
F746disco-audio-processing-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001af44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000155e0  0801b114  0801b114  0002b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080306f4  080306f4  000500b8  2**0
                  CONTENTS
  4 .ARM          00000008  080306f4  080306f4  000406f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080306fc  080306fc  000500b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080306fc  080306fc  000406fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030700  08030700  00040700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08030704  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004ad18  200000b8  080307bc  000500b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2004add0  080307bc  0005add0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004efc3  00000000  00000000  000500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a462  00000000  00000000  0009f0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003680  00000000  00000000  000a9510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003270  00000000  00000000  000acb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039e9a  00000000  00000000  000afe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00049869  00000000  00000000  000e9c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001294b2  00000000  00000000  00133503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0025c9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ef0c  00000000  00000000  0025ca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0026b984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b0fc 	.word	0x0801b0fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0801b0fc 	.word	0x0801b0fc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8

	arm_rfft_fast_init_f32(&FFT_struct, FFT_Length);
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	483f      	ldr	r0, [pc, #252]	; (8001098 <audioLoop+0x108>)
 8000f9c:	f017 faba 	bl	8018514 <arm_rfft_fast_init_f32>

	/* J'ai commenté pour mettre en place le RTOS*/
//	uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000fa0:	4a3e      	ldr	r2, [pc, #248]	; (800109c <audioLoop+0x10c>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	483e      	ldr	r0, [pc, #248]	; (80010a0 <audioLoop+0x110>)
 8000fa6:	f018 fbef 	bl	8019788 <memset>
//	audio_rec_buffer_state = BUFFER_OFFSET_NONE;

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <audioLoop+0x114>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	493b      	ldr	r1, [pc, #236]	; (80010a8 <audioLoop+0x118>)
 8000fba:	483c      	ldr	r0, [pc, #240]	; (80010ac <audioLoop+0x11c>)
 8000fbc:	f003 fde8 	bl	8004b90 <start_Audio_Processing>

	/* main audio loop */
	while (1) {


		accumulateInputLevels();
 8000fc0:	f000 f8be 	bl	8001140 <accumulateInputLevels>
		count++;
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <audioLoop+0x120>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <audioLoop+0x120>)
 8000fcc:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <audioLoop+0x120>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	dd36      	ble.n	8001044 <audioLoop+0xb4>
			count = 0;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <audioLoop+0x120>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <audioLoop+0x124>)
 8000fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe2:	a32b      	add	r3, pc, #172	; (adr r3, 8001090 <audioLoop+0x100>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fb7e 	bl	80006e8 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4930      	ldr	r1, [pc, #192]	; (80010b4 <audioLoop+0x124>)
 8000ff2:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <audioLoop+0x128>)
 8000ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffc:	a324      	add	r3, pc, #144	; (adr r3, 8001090 <audioLoop+0x100>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fb71 	bl	80006e8 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	492b      	ldr	r1, [pc, #172]	; (80010b8 <audioLoop+0x128>)
 800100c:	e9c1 2300 	strd	r2, r3, [r1]

			inputLevelL_cp = inputLevelL;
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <audioLoop+0x124>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	4929      	ldr	r1, [pc, #164]	; (80010bc <audioLoop+0x12c>)
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR_cp = inputLevelR;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <audioLoop+0x128>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <audioLoop+0x130>)
 8001024:	e9c1 2300 	strd	r2, r3, [r1]

			/* J'ai commenté pour le RTOS*/
//			uiDisplayInputLevel(inputLevelL, inputLevelR);

			inputLevelL = 0.;
 8001028:	4922      	ldr	r1, [pc, #136]	; (80010b4 <audioLoop+0x124>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8001036:	4920      	ldr	r1, [pc, #128]	; (80010b8 <audioLoop+0x128>)
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c1 2300 	strd	r2, r3, [r1]
//		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
//			asm("NOP");
//		}

		// Permet d'attendre que la première trame DMA soit complètement rempli avant de procéder au process audio
		osSignalWait(0x0001, osWaitForever);
 8001044:	463b      	mov	r3, r7
 8001046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f014 fabf 	bl	80155d0 <osSignalWait>
		processAudio(buf_output, buf_input);
 8001052:	4915      	ldr	r1, [pc, #84]	; (80010a8 <audioLoop+0x118>)
 8001054:	4815      	ldr	r0, [pc, #84]	; (80010ac <audioLoop+0x11c>)
 8001056:	f000 f954 	bl	8001302 <processAudio>
		calculateFFT(buf_output);
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <audioLoop+0x11c>)
 800105c:	f000 f836 	bl	80010cc <calculateFFT>

		// Permet d'attendre que la seconde trame DMA soit complètement rempli avant de procéder au process audio
		osSignalWait(0x0002, osWaitForever);
 8001060:	463b      	mov	r3, r7
 8001062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f014 fab1 	bl	80155d0 <osSignalWait>
		processAudio(buf_output_half, buf_input_half);
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <audioLoop+0x134>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <audioLoop+0x138>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f942 	bl	8001302 <processAudio>
		calculateFFT(buf_output_half);
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <audioLoop+0x134>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f822 	bl	80010cc <calculateFFT>
		accumulateInputLevels();
 8001088:	e79a      	b.n	8000fc0 <audioLoop+0x30>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	9999999a 	.word	0x9999999a
 8001094:	3fa99999 	.word	0x3fa99999
 8001098:	20009cf8 	.word	0x20009cf8
 800109c:	0076a000 	.word	0x0076a000
 80010a0:	c0096000 	.word	0xc0096000
 80010a4:	20009f3c 	.word	0x20009f3c
 80010a8:	200084f8 	.word	0x200084f8
 80010ac:	200090f8 	.word	0x200090f8
 80010b0:	200000d4 	.word	0x200000d4
 80010b4:	200000d8 	.word	0x200000d8
 80010b8:	200000e0 	.word	0x200000e0
 80010bc:	200000e8 	.word	0x200000e8
 80010c0:	200000f0 	.word	0x200000f0
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000000 	.word	0x20000000

080010cc <calculateFFT>:
}

/*
 * Function that realize the FFT calculation of a signal
 */
void calculateFFT(int16_t *in){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	 for (int i = 0; i < FFT_Length; i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e012      	b.n	8001100 <calculateFFT+0x34>
		 aFFT_Input_f32[i] = in[i];
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <calculateFFT+0x64>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = 0; i < FFT_Length; i++){
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d9e9      	bls.n	80010da <calculateFFT+0xe>
	 }

	 arm_rfft_fast_f32(&FFT_struct, aFFT_Input_f32, aFFT_Output_f32, 0);
 8001106:	2300      	movs	r3, #0
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <calculateFFT+0x68>)
 800110a:	4909      	ldr	r1, [pc, #36]	; (8001130 <calculateFFT+0x64>)
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <calculateFFT+0x6c>)
 800110e:	f017 fab5 	bl	801867c <arm_rfft_fast_f32>
	 arm_cmplx_mag_f32(aFFT_Output_f32, aFFT_Input_f32, FFT_Length/2);
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	4906      	ldr	r1, [pc, #24]	; (8001130 <calculateFFT+0x64>)
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <calculateFFT+0x68>)
 8001118:	f017 ff14 	bl	8018f44 <arm_cmplx_mag_f32>
	 osSignalSet(uiTaskHandle, 0x0003);
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <calculateFFT+0x70>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2103      	movs	r1, #3
 8001122:	4618      	mov	r0, r3
 8001124:	f014 fa14 	bl	8015550 <osSignalSet>
 }
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20008cf8 	.word	0x20008cf8
 8001134:	200098f8 	.word	0x200098f8
 8001138:	20009cf8 	.word	0x20009cf8
 800113c:	2000a160 	.word	0x2000a160

08001140 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e016      	b.n	800117e <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_output[i];
 8001150:	4a3e      	ldr	r2, [pc, #248]	; (800124c <accumulateInputLevels+0x10c>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001158:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 800115a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dd05      	ble.n	800116e <accumulateInputLevels+0x2e>
			lvl += v;
 8001162:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e004      	b.n	8001178 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 800116e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3302      	adds	r3, #2
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d3e4      	bcc.n	8001150 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f7ff fa34 	bl	80005f4 <__aeabi_ui2d>
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <accumulateInputLevels+0x110>)
 8001192:	f7ff fbd3 	bl	800093c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <accumulateInputLevels+0x114>)
 80011a4:	f7ff fbca 	bl	800093c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <accumulateInputLevels+0x118>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f8e1 	bl	800037c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4926      	ldr	r1, [pc, #152]	; (8001258 <accumulateInputLevels+0x118>)
 80011c0:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80011c8:	2301      	movs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	e016      	b.n	80011fc <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_output[i];
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <accumulateInputLevels+0x10c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d6:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 80011d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd05      	ble.n	80011ec <accumulateInputLevels+0xac>
			lvl += v;
 80011e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e004      	b.n	80011f6 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 80011ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3302      	adds	r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d3e4      	bcc.n	80011ce <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff f9f5 	bl	80005f4 <__aeabi_ui2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <accumulateInputLevels+0x110>)
 8001210:	f7ff fb94 	bl	800093c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <accumulateInputLevels+0x114>)
 8001222:	f7ff fb8b 	bl	800093c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <accumulateInputLevels+0x11c>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f8a2 	bl	800037c <__adddf3>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <accumulateInputLevels+0x11c>)
 800123e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200090f8 	.word	0x200090f8
 8001250:	40900000 	.word	0x40900000
 8001254:	40e00000 	.word	0x40e00000
 8001258:	200000d8 	.word	0x200000d8
 800125c:	200000e0 	.word	0x200000e0

08001260 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	/* Commenter pour le RTOS */
//	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_SAI_RxCpltCallback+0x1c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f014 f96e 	bl	8015550 <osSignalSet>
	return;
 8001274:	bf00      	nop
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20009d94 	.word	0x20009d94

08001280 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	/* Commenter pour le RTOS */
//	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f014 f95e 	bl	8015550 <osSignalSet>
	return;
 8001294:	bf00      	nop
}
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20009d94 	.word	0x20009d94

080012a0 <no_effect>:
// --------------------------- AUDIO ALGORITHMS ---------------------------

/**
 * No effect function which simply reproduces the input on the output
 */
static void no_effect(int16_t *out, int16_t *in) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]

	float A = 1.0;
 80012aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ae:	60bb      	str	r3, [r7, #8]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e01a      	b.n	80012ec <no_effect+0x4c>
		out[n] = A * in[n];
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 2a90 	vmov	r2, s15
 80012e2:	b212      	sxth	r2, r2
 80012e4:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f2:	d3e0      	bcc.n	80012b6 <no_effect+0x16>
	}

}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 800130c:	f002 fef8 	bl	8004100 <LED_On>

	no_effect(out, in); // If you want no effect on the audio output
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffc4 	bl	80012a0 <no_effect>
//	echo_effect(out, in); // If you want a echo effect on the audio output
//	noise_gate(out, in);

	LED_Off();
 8001318:	f002 fefe 	bl	8004118 <LED_Off>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <vApplicationGetIdleTaskMemory+0x2c>)
 8001368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <vApplicationGetIdleTaskMemory+0x30>)
 800136e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000f8 	.word	0x200000f8
 8001388:	20000150 	.word	0x20000150

0800138c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001390:	f3bf 8f4f 	dsb	sy
}
 8001394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001396:	f3bf 8f6f 	isb	sy
}
 800139a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <SCB_EnableICache+0x48>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013a4:	f3bf 8f4f 	dsb	sy
}
 80013a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013aa:	f3bf 8f6f 	isb	sy
}
 80013ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SCB_EnableICache+0x48>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <SCB_EnableICache+0x48>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
}
 80013c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80013dc:	f3bf 8f4f 	dsb	sy
}
 80013e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013e2:	f3bf 8f6f 	isb	sy
}
 80013e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <SCB_InvalidateICache+0x30>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013f0:	f3bf 8f4f 	dsb	sy
}
 80013f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f6:	f3bf 8f6f 	isb	sy
}
 80013fa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <SCB_EnableDCache+0x84>)
 8001414:	2200      	movs	r2, #0
 8001416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800141a:	f3bf 8f4f 	dsb	sy
}
 800141e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <SCB_EnableDCache+0x84>)
 8001422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001426:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	0b5b      	lsrs	r3, r3, #13
 800142c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001430:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001444:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800144a:	4911      	ldr	r1, [pc, #68]	; (8001490 <SCB_EnableDCache+0x84>)
 800144c:	4313      	orrs	r3, r2
 800144e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	60ba      	str	r2, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ef      	bne.n	800143c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	60fa      	str	r2, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1e5      	bne.n	8001432 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001466:	f3bf 8f4f 	dsb	sy
}
 800146a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <SCB_EnableDCache+0x84>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <SCB_EnableDCache+0x84>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001478:	f3bf 8f4f 	dsb	sy
}
 800147c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147e:	f3bf 8f6f 	isb	sy
}
 8001482:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <SCB_InvalidateDCache+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <SCB_InvalidateDCache+0x74>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	0b5b      	lsrs	r3, r3, #13
 80014b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <SCB_InvalidateDCache+0x74>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ef      	bne.n	80014c4 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	60fa      	str	r2, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e5      	bne.n	80014ba <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014ee:	f3bf 8f4f 	dsb	sy
}
 80014f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f4:	f3bf 8f6f 	isb	sy
}
 80014f8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001512:	f7ff ffbf 	bl	8001494 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001516:	f7ff ff5f 	bl	80013d8 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800151a:	f004 fd5c 	bl	8005fd6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800151e:	f000 f873 	bl	8001608 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001522:	f001 f8d1 	bl	80026c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001526:	f001 f80d 	bl	8002544 <MX_DMA_Init>
	MX_ADC3_Init();
 800152a:	f000 f92d 	bl	8001788 <MX_ADC3_Init>
	MX_CRC_Init();
 800152e:	f000 f97d 	bl	800182c <MX_CRC_Init>
	MX_DCMI_Init();
 8001532:	f000 f99d 	bl	8001870 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001536:	f000 f9cf 	bl	80018d8 <MX_DMA2D_Init>
	MX_FMC_Init();
 800153a:	f001 f871 	bl	8002620 <MX_FMC_Init>
	MX_I2C1_Init();
 800153e:	f000 f9fd 	bl	800193c <MX_I2C1_Init>
	MX_I2C3_Init();
 8001542:	f000 fa3b 	bl	80019bc <MX_I2C3_Init>
	MX_LTDC_Init();
 8001546:	f000 fa79 	bl	8001a3c <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800154a:	f000 fafb 	bl	8001b44 <MX_QUADSPI_Init>
	MX_RTC_Init();
 800154e:	f000 fb3b 	bl	8001bc8 <MX_RTC_Init>
	MX_SAI2_Init();
 8001552:	f000 fbdf 	bl	8001d14 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001556:	f000 fc99 	bl	8001e8c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 800155a:	f000 fcb7 	bl	8001ecc <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 800155e:	f000 fce5 	bl	8001f2c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001562:	f000 fd8f 	bl	8002084 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001566:	f000 fe03 	bl	8002170 <MX_TIM3_Init>
	MX_TIM5_Init();
 800156a:	f000 fe79 	bl	8002260 <MX_TIM5_Init>
	MX_TIM8_Init();
 800156e:	f000 feef 	bl	8002350 <MX_TIM8_Init>
	MX_TIM12_Init();
 8001572:	f000 ff41 	bl	80023f8 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8001576:	f000 ff85 	bl	8002484 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800157a:	f000 ffb3 	bl	80024e4 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 800157e:	f011 fb35 	bl	8012bec <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 8001582:	f011 fd83 	bl	801308c <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 8001586:	f003 fc10 	bl	8004daa <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 800158a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800158e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001592:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001594:	f003 fbf0 	bl	8004d78 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <main+0xe8>)
 800159a:	f018 fa43 	bl	8019a24 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 800159e:	f7ff fef5 	bl	800138c <SCB_EnableICache>
	SCB_EnableDCache();
 80015a2:	f7ff ff33 	bl	800140c <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <main+0xec>)
 80015a8:	f107 041c 	add.w	r4, r7, #28
 80015ac:	461d      	mov	r5, r3
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f013 ff65 	bl	8015490 <osThreadCreate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <main+0xf0>)
 80015ca:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048); // 128 = stack size
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <main+0xf4>)
 80015ce:	463c      	mov	r4, r7
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 80015de:	463b      	mov	r3, r7
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f013 ff54 	bl	8015490 <osThreadCreate>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <main+0xf8>)
 80015ec:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80015ee:	f013 ff2c 	bl	801544a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80015f2:	e7fe      	b.n	80015f2 <main+0xe6>
 80015f4:	0801b128 	.word	0x0801b128
 80015f8:	0801b140 	.word	0x0801b140
 80015fc:	20009d94 	.word	0x20009d94
 8001600:	0801b15c 	.word	0x0801b15c
 8001604:	2000a160 	.word	0x2000a160

08001608 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b4      	sub	sp, #208	; 0xd0
 800160c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001612:	2230      	movs	r2, #48	; 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f018 f8b6 	bl	8019788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2284      	movs	r2, #132	; 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f018 f8a7 	bl	8019788 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800163a:	f009 fc27 	bl	800ae8c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b4f      	ldr	r3, [pc, #316]	; (800177c <SystemClock_Config+0x174>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a4e      	ldr	r2, [pc, #312]	; (800177c <SystemClock_Config+0x174>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b4c      	ldr	r3, [pc, #304]	; (800177c <SystemClock_Config+0x174>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <SystemClock_Config+0x178>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a49      	ldr	r2, [pc, #292]	; (8001780 <SystemClock_Config+0x178>)
 800165c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <SystemClock_Config+0x178>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800166e:	2309      	movs	r3, #9
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001690:	2319      	movs	r3, #25
 8001692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001696:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800169a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80016a4:	2309      	movs	r3, #9
 80016a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00a fc10 	bl	800bed4 <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80016ba:	f001 fab3 	bl	8002c24 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016be:	f009 fbf5 	bl	800aeac <HAL_PWREx_EnableOverDrive>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80016c8:	f001 faac 	bl	8002c24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016f2:	2106      	movs	r1, #6
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a fe91 	bl	800c41c <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001700:	f001 fa90 	bl	8002c24 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <SystemClock_Config+0x17c>)
 8001706:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001718:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800171c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800171e:	2305      	movs	r3, #5
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001722:	2308      	movs	r3, #8
 8001724:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001742:	2300      	movs	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001746:	2300      	movs	r3, #0
 8001748:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800174a:	2300      	movs	r3, #0
 800174c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001752:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4618      	mov	r0, r3
 8001766:	f00b f861 	bl	800c82c <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001770:	f001 fa58 	bl	8002c24 <Error_Handler>
	}
}
 8001774:	bf00      	nop
 8001776:	37d0      	adds	r7, #208	; 0xd0
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000
 8001784:	01b14868 	.word	0x01b14868

08001788 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_ADC3_Init+0x98>)
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_ADC3_Init+0x9c>)
 800179e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_ADC3_Init+0x98>)
 80017a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a6:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_ADC3_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_ADC3_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_ADC3_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_ADC3_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_ADC3_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_ADC3_Init+0x98>)
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <MX_ADC3_Init+0xa0>)
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_ADC3_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_ADC3_Init+0x98>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_ADC3_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_ADC3_Init+0x98>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_ADC3_Init+0x98>)
 80017ea:	f004 fc45 	bl	8006078 <HAL_ADC_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80017f4:	f001 fa16 	bl	8002c24 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_ADC3_Init+0x98>)
 800180a:	f004 fc79 	bl	8006100 <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001814:	f001 fa06 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000a258 	.word	0x2000a258
 8001824:	40012200 	.word	0x40012200
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <MX_CRC_Init+0x3c>)
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <MX_CRC_Init+0x40>)
 8001834:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_CRC_Init+0x3c>)
 8001838:	2200      	movs	r2, #0
 800183a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_CRC_Init+0x3c>)
 800183e:	2200      	movs	r2, #0
 8001840:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_CRC_Init+0x3c>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_CRC_Init+0x3c>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_CRC_Init+0x3c>)
 8001850:	2201      	movs	r2, #1
 8001852:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_CRC_Init+0x3c>)
 8001856:	f005 f827 	bl	80068a8 <HAL_CRC_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001860:	f001 f9e0 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000a00c 	.word	0x2000a00c
 800186c:	40023000 	.word	0x40023000

08001870 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <MX_DCMI_Init+0x64>)
 8001878:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_DCMI_Init+0x60>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_DCMI_Init+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_DCMI_Init+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DCMI_Init+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_DCMI_Init+0x60>)
 80018be:	f005 f8dd 	bl	8006a7c <HAL_DCMI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 80018c8:	f001 f9ac 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000a2a0 	.word	0x2000a2a0
 80018d4:	50050000 	.word	0x50050000

080018d8 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <MX_DMA2D_Init+0x60>)
 80018e0:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_DMA2D_Init+0x5c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_DMA2D_Init+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_DMA2D_Init+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_DMA2D_Init+0x5c>)
 800190e:	f005 fe15 	bl	800753c <HAL_DMA2D_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001918:	f001 f984 	bl	8002c24 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800191c:	2101      	movs	r1, #1
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_DMA2D_Init+0x5c>)
 8001920:	f006 f87a 	bl	8007a18 <HAL_DMA2D_ConfigLayer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 800192a:	f001 f97b 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000a4c4 	.word	0x2000a4c4
 8001938:	4002b000 	.word	0x4002b000

0800193c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <MX_I2C1_Init+0x78>)
 8001944:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <MX_I2C1_Init+0x7c>)
 800194a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001954:	2201      	movs	r2, #1
 8001956:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_I2C1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001976:	480e      	ldr	r0, [pc, #56]	; (80019b0 <MX_I2C1_Init+0x74>)
 8001978:	f008 fa08 	bl	8009d8c <HAL_I2C_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001982:	f001 f94f 	bl	8002c24 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <MX_I2C1_Init+0x74>)
 800198a:	f008 ff09 	bl	800a7a0 <HAL_I2CEx_ConfigAnalogFilter>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001994:	f001 f946 	bl	8002c24 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_I2C1_Init+0x74>)
 800199c:	f008 ff4b 	bl	800a836 <HAL_I2CEx_ConfigDigitalFilter>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80019a6:	f001 f93d 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20009fc0 	.word	0x20009fc0
 80019b4:	40005400 	.word	0x40005400
 80019b8:	00c0eaff 	.word	0x00c0eaff

080019bc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_I2C3_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <MX_I2C3_Init+0x7c>)
 80019ca:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <MX_I2C3_Init+0x74>)
 80019f8:	f008 f9c8 	bl	8009d8c <HAL_I2C_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001a02:	f001 f90f 	bl	8002c24 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <MX_I2C3_Init+0x74>)
 8001a0a:	f008 fec9 	bl	800a7a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001a14:	f001 f906 	bl	8002c24 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_I2C3_Init+0x74>)
 8001a1c:	f008 ff0b 	bl	800a836 <HAL_I2CEx_ConfigDigitalFilter>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001a26:	f001 f8fd 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20009d98 	.word	0x20009d98
 8001a34:	40005c00 	.word	0x40005c00
 8001a38:	00c0eaff 	.word	0x00c0eaff

08001a3c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	; 0x38
 8001a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2234      	movs	r2, #52	; 0x34
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f017 fe9d 	bl	8019788 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a50:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <MX_LTDC_Init+0x104>)
 8001a52:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a6e:	2228      	movs	r2, #40	; 0x28
 8001a70:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a74:	2209      	movs	r2, #9
 8001a76:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a7a:	2235      	movs	r2, #53	; 0x35
 8001a7c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a80:	220b      	movs	r2, #11
 8001a82:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a86:	f240 2215 	movw	r2, #533	; 0x215
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a8e:	f240 121b 	movw	r2, #283	; 0x11b
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a96:	f240 2235 	movw	r2, #565	; 0x235
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001a9e:	f240 121d 	movw	r2, #285	; 0x11d
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001abc:	481f      	ldr	r0, [pc, #124]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001abe:	f008 ff07 	bl	800a8d0 <HAL_LTDC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001ac8:	f001 f8ac 	bl	8002c24 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001ad0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ad4:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001ada:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ade:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001aec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001af2:	2307      	movs	r3, #7
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001af6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001afc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001b02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_LTDC_Init+0x100>)
 8001b22:	f008 ffa5 	bl	800aa70 <HAL_LTDC_ConfigLayer>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001b2c:	f001 f87a 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001b30:	f002 fbf4 	bl	800431c <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000a1b0 	.word	0x2000a1b0
 8001b40:	40016800 	.word	0x40016800

08001b44 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <MX_QUADSPI_Init+0x80>)
 8001b4c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b56:	2204      	movs	r2, #4
 8001b58:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b62:	2218      	movs	r2, #24
 8001b64:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b68:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001b6c:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b82:	f009 f9e3 	bl	800af4c <HAL_QSPI_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001b8c:	f001 f84a 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001b92:	f002 fec5 	bl	8004920 <DISCO_QSPI_ResetMemory>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_QUADSPI_Init+0x5c>
 8001b9c:	f001 f842 	bl	8002c24 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_QUADSPI_Init+0x7c>)
 8001ba2:	f002 feff 	bl	80049a4 <DISCO_QSPI_DummyCyclesCfg>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_QUADSPI_Init+0x6c>
 8001bac:	f001 f83a 	bl	8002c24 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001bb0:	f002 fe84 	bl	80048bc <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001bb4:	205c      	movs	r0, #92	; 0x5c
 8001bb6:	f004 fded 	bl	8006794 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000a5d0 	.word	0x2000a5d0
 8001bc4:	a0001000 	.word	0xa0001000

08001bc8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b092      	sub	sp, #72	; 0x48
 8001bcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001be4:	463b      	mov	r3, r7
 8001be6:	222c      	movs	r2, #44	; 0x2c
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f017 fdcc 	bl	8019788 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001bf0:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <MX_RTC_Init+0x144>)
 8001bf2:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <MX_RTC_Init+0x148>)
 8001bf4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <MX_RTC_Init+0x144>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <MX_RTC_Init+0x144>)
 8001bfe:	227f      	movs	r2, #127	; 0x7f
 8001c00:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c14:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c1a:	483c      	ldr	r0, [pc, #240]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c1c:	f00b fb3a 	bl	800d294 <HAL_RTC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001c26:	f000 fffd 	bl	8002c24 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	482f      	ldr	r0, [pc, #188]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c4e:	f00b fbb3 	bl	800d3b8 <HAL_RTC_SetTime>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001c58:	f000 ffe4 	bl	8002c24 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4823      	ldr	r0, [pc, #140]	; (8001d0c <MX_RTC_Init+0x144>)
 8001c7e:	f00b fc59 	bl	800d534 <HAL_RTC_SetDate>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001c88:	f000 ffcc 	bl	8002c24 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4812      	ldr	r0, [pc, #72]	; (8001d0c <MX_RTC_Init+0x144>)
 8001cc4:	f00b fcde 	bl	800d684 <HAL_RTC_SetAlarm>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001cce:	f000 ffa9 	bl	8002c24 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <MX_RTC_Init+0x144>)
 8001ce0:	f00b fcd0 	bl	800d684 <HAL_RTC_SetAlarm>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001cea:	f000 ff9b 	bl	8002c24 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_RTC_Init+0x144>)
 8001cf4:	f00b fe50 	bl	800d998 <HAL_RTCEx_SetTimeStamp>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001cfe:	f000 ff91 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3748      	adds	r7, #72	; 0x48
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000a374 	.word	0x2000a374
 8001d10:	40002800 	.word	0x40002800

08001d14 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d1a:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <MX_SAI2_Init+0x16c>)
 8001d1c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d1e:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001d42:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d48:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001d50:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d58:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001d5c:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d7e:	2220      	movs	r2, #32
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d88:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d98:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001da6:	2204      	movs	r2, #4
 8001da8:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001dac:	2205      	movs	r2, #5
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001db0:	4832      	ldr	r0, [pc, #200]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001db2:	f00b fe47 	bl	800da44 <HAL_SAI_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001dbc:	f000 ff32 	bl	8002c24 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dc2:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <MX_SAI2_Init+0x174>)
 8001dc4:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dce:	2203      	movs	r2, #3
 8001dd0:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e16:	2220      	movs	r2, #32
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e20:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e3e:	2204      	movs	r2, #4
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e44:	220a      	movs	r2, #10
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e4a:	f00b fdfb 	bl	800da44 <HAL_SAI_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001e54:	f000 fee6 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SAI2_Init+0x168>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e66:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <MX_SAI2_Init+0x170>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e76:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20009f3c 	.word	0x20009f3c
 8001e80:	40015c04 	.word	0x40015c04
 8001e84:	20009d10 	.word	0x20009d10
 8001e88:	40015c24 	.word	0x40015c24

08001e8c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <MX_SDMMC1_SD_Init+0x3c>)
 8001e94:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <MX_SDMMC1_SD_Init+0x38>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	2000a090 	.word	0x2000a090
 8001ec8:	40012c00 	.word	0x40012c00

08001ecc <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001ed2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ed6:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_SPDIFRX_Init+0x5c>)
 8001f16:	f00d fa8b 	bl	800f430 <HAL_SPDIFRX_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001f20:	f000 fe80 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20009ef0 	.word	0x20009ef0

08001f2c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09a      	sub	sp, #104	; 0x68
 8001f30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	222c      	movs	r2, #44	; 0x2c
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f017 fc0e 	bl	8019788 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <MX_TIM1_Init+0x150>)
 8001f6e:	4a44      	ldr	r2, [pc, #272]	; (8002080 <MX_TIM1_Init+0x154>)
 8001f70:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <MX_TIM1_Init+0x150>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <MX_TIM1_Init+0x150>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <MX_TIM1_Init+0x150>)
 8001f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f84:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <MX_TIM1_Init+0x150>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <MX_TIM1_Init+0x150>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b3a      	ldr	r3, [pc, #232]	; (800207c <MX_TIM1_Init+0x150>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f98:	4838      	ldr	r0, [pc, #224]	; (800207c <MX_TIM1_Init+0x150>)
 8001f9a:	f00d faa5 	bl	800f4e8 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001fa4:	f000 fe3e 	bl	8002c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4831      	ldr	r0, [pc, #196]	; (800207c <MX_TIM1_Init+0x150>)
 8001fb6:	f00d fded 	bl	800fb94 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001fc0:	f000 fe30 	bl	8002c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fc4:	482d      	ldr	r0, [pc, #180]	; (800207c <MX_TIM1_Init+0x150>)
 8001fc6:	f00d fb5f 	bl	800f688 <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001fd0:	f000 fe28 	bl	8002c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4825      	ldr	r0, [pc, #148]	; (800207c <MX_TIM1_Init+0x150>)
 8001fe8:	f00e fa5a 	bl	80104a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001ff2:	f000 fe17 	bl	8002c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff6:	2360      	movs	r3, #96	; 0x60
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <MX_TIM1_Init+0x150>)
 800201c:	f00d fcaa 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8002026:	f000 fdfd 	bl	8002c24 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800203e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002042:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800204c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM1_Init+0x150>)
 8002060:	f00e faac 	bl	80105bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800206a:	f000 fddb 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM1_Init+0x150>)
 8002070:	f001 fafa 	bl	8003668 <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3768      	adds	r7, #104	; 0x68
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000a394 	.word	0x2000a394
 8002080:	40010000 	.word	0x40010000

08002084 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020a4:	463b      	mov	r3, r7
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <MX_TIM2_Init+0xe8>)
 80020b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <MX_TIM2_Init+0xe8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_TIM2_Init+0xe8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <MX_TIM2_Init+0xe8>)
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_TIM2_Init+0xe8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <MX_TIM2_Init+0xe8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020de:	4823      	ldr	r0, [pc, #140]	; (800216c <MX_TIM2_Init+0xe8>)
 80020e0:	f00d fa02 	bl	800f4e8 <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80020ea:	f000 fd9b 	bl	8002c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f8:	4619      	mov	r1, r3
 80020fa:	481c      	ldr	r0, [pc, #112]	; (800216c <MX_TIM2_Init+0xe8>)
 80020fc:	f00d fd4a 	bl	800fb94 <HAL_TIM_ConfigClockSource>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8002106:	f000 fd8d 	bl	8002c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM2_Init+0xe8>)
 800210c:	f00d fabc 	bl	800f688 <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8002116:	f000 fd85 	bl	8002c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <MX_TIM2_Init+0xe8>)
 800212a:	f00e f9b9 	bl	80104a0 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8002134:	f000 fd76 	bl	8002c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM2_Init+0xe8>)
 8002150:	f00d fc10 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 800215a:	f000 fd63 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM2_Init+0xe8>)
 8002160:	f001 fa82 	bl	8003668 <HAL_TIM_MspPostInit>

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000a504 	.word	0x2000a504

08002170 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <MX_TIM3_Init+0xec>)
 80021a6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021c8:	4823      	ldr	r0, [pc, #140]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021ca:	f00d f98d 	bl	800f4e8 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80021d4:	f000 fd26 	bl	8002c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021e6:	f00d fcd5 	bl	800fb94 <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80021f0:	f000 fd18 	bl	8002c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021f4:	4818      	ldr	r0, [pc, #96]	; (8002258 <MX_TIM3_Init+0xe8>)
 80021f6:	f00d fa47 	bl	800f688 <HAL_TIM_PWM_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8002200:	f000 fd10 	bl	8002c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <MX_TIM3_Init+0xe8>)
 8002214:	f00e f944 	bl	80104a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800221e:	f000 fd01 	bl	8002c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002222:	2360      	movs	r3, #96	; 0x60
 8002224:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002232:	463b      	mov	r3, r7
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	4807      	ldr	r0, [pc, #28]	; (8002258 <MX_TIM3_Init+0xe8>)
 800223a:	f00d fb9b 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002244:	f000 fcee 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <MX_TIM3_Init+0xe8>)
 800224a:	f001 fa0d 	bl	8003668 <HAL_TIM_MspPostInit>

}
 800224e:	bf00      	nop
 8002250:	3738      	adds	r7, #56	; 0x38
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000a164 	.word	0x2000a164
 800225c:	40000400 	.word	0x40000400

08002260 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002280:	463b      	mov	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <MX_TIM5_Init+0xe8>)
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <MX_TIM5_Init+0xec>)
 8002296:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <MX_TIM5_Init+0xe8>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022aa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022b8:	4823      	ldr	r0, [pc, #140]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022ba:	f00d f915 	bl	800f4e8 <HAL_TIM_Base_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80022c4:	f000 fcae 	bl	8002c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d2:	4619      	mov	r1, r3
 80022d4:	481c      	ldr	r0, [pc, #112]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022d6:	f00d fc5d 	bl	800fb94 <HAL_TIM_ConfigClockSource>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80022e0:	f000 fca0 	bl	8002c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80022e4:	4818      	ldr	r0, [pc, #96]	; (8002348 <MX_TIM5_Init+0xe8>)
 80022e6:	f00d f9cf 	bl	800f688 <HAL_TIM_PWM_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80022f0:	f000 fc98 	bl	8002c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_TIM5_Init+0xe8>)
 8002304:	f00e f8cc 	bl	80104a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 800230e:	f000 fc89 	bl	8002c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002312:	2360      	movs	r3, #96	; 0x60
 8002314:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	220c      	movs	r2, #12
 8002326:	4619      	mov	r1, r3
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <MX_TIM5_Init+0xe8>)
 800232a:	f00d fb23 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002334:	f000 fc76 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <MX_TIM5_Init+0xe8>)
 800233a:	f001 f995 	bl	8003668 <HAL_TIM_MspPostInit>

}
 800233e:	bf00      	nop
 8002340:	3738      	adds	r7, #56	; 0x38
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000a114 	.word	0x2000a114
 800234c:	40000c00 	.word	0x40000c00

08002350 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <MX_TIM8_Init+0xa0>)
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <MX_TIM8_Init+0xa4>)
 8002372:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_TIM8_Init+0xa0>)
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_TIM8_Init+0xa0>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_TIM8_Init+0xa0>)
 8002382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002386:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_TIM8_Init+0xa0>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM8_Init+0xa0>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_TIM8_Init+0xa0>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800239a:	4815      	ldr	r0, [pc, #84]	; (80023f0 <MX_TIM8_Init+0xa0>)
 800239c:	f00d f8a4 	bl	800f4e8 <HAL_TIM_Base_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 80023a6:	f000 fc3d 	bl	8002c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ae:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	480e      	ldr	r0, [pc, #56]	; (80023f0 <MX_TIM8_Init+0xa0>)
 80023b8:	f00d fbec 	bl	800fb94 <HAL_TIM_ConfigClockSource>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 80023c2:	f000 fc2f 	bl	8002c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_TIM8_Init+0xa0>)
 80023d8:	f00e f862 	bl	80104a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80023e2:	f000 fc1f 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20009e44 	.word	0x20009e44
 80023f4:	40010400 	.word	0x40010400

080023f8 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_TIM12_Init+0x84>)
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <MX_TIM12_Init+0x88>)
 8002414:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_TIM12_Init+0x84>)
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_TIM12_Init+0x84>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <MX_TIM12_Init+0x84>)
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_TIM12_Init+0x84>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_TIM12_Init+0x84>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002436:	4811      	ldr	r0, [pc, #68]	; (800247c <MX_TIM12_Init+0x84>)
 8002438:	f00d f926 	bl	800f688 <HAL_TIM_PWM_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002442:	f000 fbef 	bl	8002c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002446:	2360      	movs	r3, #96	; 0x60
 8002448:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_TIM12_Init+0x84>)
 800245e:	f00d fa89 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002468:	f000 fbdc 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <MX_TIM12_Init+0x84>)
 800246e:	f001 f8fb 	bl	8003668 <HAL_TIM_MspPostInit>

}
 8002472:	bf00      	nop
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000a550 	.word	0x2000a550
 8002480:	40001800 	.word	0x40001800

08002484 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_USART1_UART_Init+0x58>)
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <MX_USART1_UART_Init+0x5c>)
 800248c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_USART1_UART_Init+0x58>)
 8002490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002494:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_USART1_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_USART1_UART_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024aa:	220c      	movs	r2, #12
 80024ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_USART1_UART_Init+0x58>)
 80024c8:	f00e f914 	bl	80106f4 <HAL_UART_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80024d2:	f000 fba7 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000a2f0 	.word	0x2000a2f0
 80024e0:	40011000 	.word	0x40011000

080024e4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_USART6_UART_Init+0x58>)
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <MX_USART6_UART_Init+0x5c>)
 80024ec:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <MX_USART6_UART_Init+0x58>)
 80024f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USART6_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_USART6_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USART6_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART6_UART_Init+0x58>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USART6_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART6_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USART6_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART6_UART_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_USART6_UART_Init+0x58>)
 8002528:	f00e f8e4 	bl	80106f4 <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002532:	f000 fb77 	bl	8002c24 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000a440 	.word	0x2000a440
 8002540:	40011400 	.word	0x40011400

08002544 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800254a:	4b32      	ldr	r3, [pc, #200]	; (8002614 <MX_DMA_Init+0xd0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a31      	ldr	r2, [pc, #196]	; (8002614 <MX_DMA_Init+0xd0>)
 8002550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <MX_DMA_Init+0xd0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <MX_DMA_Init+0xd4>)
 8002564:	4a2d      	ldr	r2, [pc, #180]	; (800261c <MX_DMA_Init+0xd8>)
 8002566:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <MX_DMA_Init+0xd4>)
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <MX_DMA_Init+0xd4>)
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <MX_DMA_Init+0xd4>)
 8002576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <MX_DMA_Init+0xd4>)
 800257e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002582:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <MX_DMA_Init+0xd4>)
 8002586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800258a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_DMA_Init+0xd4>)
 800258e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002592:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MX_DMA_Init+0xd4>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_DMA_Init+0xd4>)
 800259c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a0:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_DMA_Init+0xd4>)
 80025a4:	2204      	movs	r2, #4
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_DMA_Init+0xd4>)
 80025aa:	2203      	movs	r2, #3
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_DMA_Init+0xd4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_DMA_Init+0xd4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80025ba:	4817      	ldr	r0, [pc, #92]	; (8002618 <MX_DMA_Init+0xd4>)
 80025bc:	f004 fba8 	bl	8006d10 <HAL_DMA_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 80025c6:	f000 fb2d 	bl	8002c24 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	2038      	movs	r0, #56	; 0x38
 80025d0:	f004 f8b6 	bl	8006740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025d4:	2038      	movs	r0, #56	; 0x38
 80025d6:	f004 f8cf 	bl	8006778 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2105      	movs	r1, #5
 80025de:	2039      	movs	r0, #57	; 0x39
 80025e0:	f004 f8ae 	bl	8006740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80025e4:	2039      	movs	r0, #57	; 0x39
 80025e6:	f004 f8c7 	bl	8006778 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2105      	movs	r1, #5
 80025ee:	203c      	movs	r0, #60	; 0x3c
 80025f0:	f004 f8a6 	bl	8006740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80025f4:	203c      	movs	r0, #60	; 0x3c
 80025f6:	f004 f8bf 	bl	8006778 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	2046      	movs	r0, #70	; 0x46
 8002600:	f004 f89e 	bl	8006740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002604:	2046      	movs	r0, #70	; 0x46
 8002606:	f004 f8b7 	bl	8006778 <HAL_NVIC_EnableIRQ>

}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	20009de4 	.word	0x20009de4
 800261c:	40026410 	.word	0x40026410

08002620 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_FMC_Init+0xa0>)
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <MX_FMC_Init+0xa4>)
 800263c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <MX_FMC_Init+0xa0>)
 800264c:	2204      	movs	r2, #4
 800264e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002652:	2210      	movs	r2, #16
 8002654:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_FMC_Init+0xa0>)
 800265e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002662:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_FMC_Init+0xa0>)
 800266c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002670:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_FMC_Init+0xa0>)
 8002674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_FMC_Init+0xa0>)
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002680:	2302      	movs	r3, #2
 8002682:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002684:	2307      	movs	r3, #7
 8002686:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002688:	2304      	movs	r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 800268c:	2307      	movs	r3, #7
 800268e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002690:	2303      	movs	r3, #3
 8002692:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	4619      	mov	r1, r3
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_FMC_Init+0xa0>)
 80026a2:	f00c fe46 	bl	800f332 <HAL_SDRAM_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 80026ac:	f000 faba 	bl	8002c24 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80026b0:	f240 6003 	movw	r0, #1539	; 0x603
 80026b4:	f002 fb00 	bl	8004cb8 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 80026b8:	bf00      	nop
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000a59c 	.word	0x2000a59c
 80026c4:	a0000140 	.word	0xa0000140

080026c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b090      	sub	sp, #64	; 0x40
 80026cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80026de:	4baf      	ldr	r3, [pc, #700]	; (800299c <MX_GPIO_Init+0x2d4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4aae      	ldr	r2, [pc, #696]	; (800299c <MX_GPIO_Init+0x2d4>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4bac      	ldr	r3, [pc, #688]	; (800299c <MX_GPIO_Init+0x2d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80026f6:	4ba9      	ldr	r3, [pc, #676]	; (800299c <MX_GPIO_Init+0x2d4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4aa8      	ldr	r2, [pc, #672]	; (800299c <MX_GPIO_Init+0x2d4>)
 80026fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4ba6      	ldr	r3, [pc, #664]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4ba3      	ldr	r3, [pc, #652]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4aa2      	ldr	r2, [pc, #648]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4ba0      	ldr	r3, [pc, #640]	; (800299c <MX_GPIO_Init+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002726:	4b9d      	ldr	r3, [pc, #628]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a9c      	ldr	r2, [pc, #624]	; (800299c <MX_GPIO_Init+0x2d4>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b9a      	ldr	r3, [pc, #616]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a96      	ldr	r2, [pc, #600]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <MX_GPIO_Init+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a90      	ldr	r2, [pc, #576]	; (800299c <MX_GPIO_Init+0x2d4>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b8e      	ldr	r3, [pc, #568]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a8a      	ldr	r2, [pc, #552]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <MX_GPIO_Init+0x2d4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002786:	4b85      	ldr	r3, [pc, #532]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a84      	ldr	r2, [pc, #528]	; (800299c <MX_GPIO_Init+0x2d4>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <MX_GPIO_Init+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	4b79      	ldr	r3, [pc, #484]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a78      	ldr	r2, [pc, #480]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <MX_GPIO_Init+0x2d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	2120      	movs	r1, #32
 80027ea:	486d      	ldr	r0, [pc, #436]	; (80029a0 <MX_GPIO_Init+0x2d8>)
 80027ec:	f005 fd12 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	210e      	movs	r1, #14
 80027f4:	486b      	ldr	r0, [pc, #428]	; (80029a4 <MX_GPIO_Init+0x2dc>)
 80027f6:	f005 fd0d 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2108      	movs	r1, #8
 80027fe:	486a      	ldr	r0, [pc, #424]	; (80029a8 <MX_GPIO_Init+0x2e0>)
 8002800:	f005 fd08 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280a:	4866      	ldr	r0, [pc, #408]	; (80029a4 <MX_GPIO_Init+0x2dc>)
 800280c:	f005 fd02 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002816:	4865      	ldr	r0, [pc, #404]	; (80029ac <MX_GPIO_Init+0x2e4>)
 8002818:	f005 fcfc 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	21c8      	movs	r1, #200	; 0xc8
 8002820:	4863      	ldr	r0, [pc, #396]	; (80029b0 <MX_GPIO_Init+0x2e8>)
 8002822:	f005 fcf7 	bl	8008214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002826:	2308      	movs	r3, #8
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282a:	2300      	movs	r3, #0
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002836:	4619      	mov	r1, r3
 8002838:	485e      	ldr	r0, [pc, #376]	; (80029b4 <MX_GPIO_Init+0x2ec>)
 800283a:	f005 fa1b 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800283e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002850:	230b      	movs	r3, #11
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002858:	4619      	mov	r1, r3
 800285a:	4855      	ldr	r0, [pc, #340]	; (80029b0 <MX_GPIO_Init+0x2e8>)
 800285c:	f005 fa0a 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002860:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002872:	230a      	movs	r3, #10
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287a:	4619      	mov	r1, r3
 800287c:	484e      	ldr	r0, [pc, #312]	; (80029b8 <MX_GPIO_Init+0x2f0>)
 800287e:	f005 f9f9 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002894:	4619      	mov	r1, r3
 8002896:	4849      	ldr	r0, [pc, #292]	; (80029bc <MX_GPIO_Init+0x2f4>)
 8002898:	f005 f9ec 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <MX_GPIO_Init+0x2f8>)
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ac:	4619      	mov	r1, r3
 80028ae:	483c      	ldr	r0, [pc, #240]	; (80029a0 <MX_GPIO_Init+0x2d8>)
 80028b0:	f005 f9e0 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80028b4:	2320      	movs	r3, #32
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b8:	2301      	movs	r3, #1
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	4619      	mov	r1, r3
 80028ca:	4835      	ldr	r0, [pc, #212]	; (80029a0 <MX_GPIO_Init+0x2d8>)
 80028cc:	f005 f9d2 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80028d0:	f241 030e 	movw	r3, #4110	; 0x100e
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	482e      	ldr	r0, [pc, #184]	; (80029a4 <MX_GPIO_Init+0x2dc>)
 80028ea:	f005 f9c3 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80028ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002900:	4619      	mov	r1, r3
 8002902:	4830      	ldr	r0, [pc, #192]	; (80029c4 <MX_GPIO_Init+0x2fc>)
 8002904:	f005 f9b6 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002908:	2308      	movs	r3, #8
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	4822      	ldr	r0, [pc, #136]	; (80029a8 <MX_GPIO_Init+0x2e0>)
 8002920:	f005 f9a8 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002924:	2310      	movs	r3, #16
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002934:	4619      	mov	r1, r3
 8002936:	481a      	ldr	r0, [pc, #104]	; (80029a0 <MX_GPIO_Init+0x2d8>)
 8002938:	f005 f99c 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800293c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002942:	2300      	movs	r3, #0
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	4816      	ldr	r0, [pc, #88]	; (80029ac <MX_GPIO_Init+0x2e4>)
 8002952:	f005 f98f 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	480f      	ldr	r0, [pc, #60]	; (80029ac <MX_GPIO_Init+0x2e4>)
 8002970:	f005 f980 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	4619      	mov	r1, r3
 8002988:	4806      	ldr	r0, [pc, #24]	; (80029a4 <MX_GPIO_Init+0x2dc>)
 800298a:	f005 f973 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800298e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_GPIO_Init+0x300>)
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	e017      	b.n	80029cc <MX_GPIO_Init+0x304>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020c00 	.word	0x40020c00
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40022800 	.word	0x40022800
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40022400 	.word	0x40022400
 80029c0:	10120000 	.word	0x10120000
 80029c4:	40020800 	.word	0x40020800
 80029c8:	10110000 	.word	0x10110000
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4844      	ldr	r0, [pc, #272]	; (8002ae8 <MX_GPIO_Init+0x420>)
 80029d6:	f005 f94d 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80029da:	2310      	movs	r3, #16
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029ea:	230a      	movs	r3, #10
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f2:	4619      	mov	r1, r3
 80029f4:	483d      	ldr	r0, [pc, #244]	; (8002aec <MX_GPIO_Init+0x424>)
 80029f6:	f005 f93d 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80029fa:	23c8      	movs	r3, #200	; 0xc8
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4837      	ldr	r0, [pc, #220]	; (8002af0 <MX_GPIO_Init+0x428>)
 8002a12:	f005 f92f 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002a16:	2305      	movs	r3, #5
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a26:	230a      	movs	r3, #10
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4830      	ldr	r0, [pc, #192]	; (8002af4 <MX_GPIO_Init+0x42c>)
 8002a32:	f005 f91f 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a36:	2332      	movs	r3, #50	; 0x32
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a46:	230b      	movs	r3, #11
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4828      	ldr	r0, [pc, #160]	; (8002af4 <MX_GPIO_Init+0x42c>)
 8002a52:	f005 f90f 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a56:	2304      	movs	r3, #4
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a66:	4619      	mov	r1, r3
 8002a68:	4821      	ldr	r0, [pc, #132]	; (8002af0 <MX_GPIO_Init+0x428>)
 8002a6a:	f005 f903 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a6e:	2386      	movs	r3, #134	; 0x86
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a7e:	230b      	movs	r3, #11
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	481b      	ldr	r0, [pc, #108]	; (8002af8 <MX_GPIO_Init+0x430>)
 8002a8a:	f005 f8f3 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002a8e:	2328      	movs	r3, #40	; 0x28
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4813      	ldr	r0, [pc, #76]	; (8002af8 <MX_GPIO_Init+0x430>)
 8002aaa:	f005 f8e3 	bl	8007c74 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002aae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480c      	ldr	r0, [pc, #48]	; (8002afc <MX_GPIO_Init+0x434>)
 8002acc:	f005 f8d2 	bl	8007c74 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2028      	movs	r0, #40	; 0x28
 8002ad6:	f003 fe33 	bl	8006740 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ada:	2028      	movs	r0, #40	; 0x28
 8002adc:	f003 fe4c 	bl	8006778 <HAL_NVIC_EnableIRQ>

}
 8002ae0:	bf00      	nop
 8002ae2:	3740      	adds	r7, #64	; 0x40
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40021800 	.word	0x40021800
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400

08002b00 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f016 feef 	bl	80198ec <iprintf>
	printf("\n");
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f016 ff04 	bl	801991c <putchar>
	Error_Handler();
 8002b14:	f000 f886 	bl	8002c24 <Error_Handler>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002b28:	f015 f9fe 	bl	8017f28 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <StartDefaultTask+0x18>)
 8002b2e:	f016 ff79 	bl	8019a24 <puts>
	audioLoop();
 8002b32:	f7fe fa2d 	bl	8000f90 <audioLoop>

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	for(;;)
 8002b36:	e7fe      	b.n	8002b36 <StartDefaultTask+0x16>
 8002b38:	0801b178 	.word	0x0801b178

08002b3c <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 8002b44:	20c8      	movs	r0, #200	; 0xc8
 8002b46:	f012 fcef 	bl	8015528 <osDelay>
	printf("StartLedTask\n");
 8002b4a:	4829      	ldr	r0, [pc, #164]	; (8002bf0 <startUITask+0xb4>)
 8002b4c:	f016 ff6a 	bl	8019a24 <puts>

	uiDisplayBasic();
 8002b50:	f001 fa10 	bl	8003f74 <uiDisplayBasic>
	int x = 40;
 8002b54:	2328      	movs	r3, #40	; 0x28
 8002b56:	61fb      	str	r3, [r7, #28]
	int y1 = 80;
 8002b58:	2350      	movs	r3, #80	; 0x50
 8002b5a:	61bb      	str	r3, [r7, #24]
	int time = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Infinite loop */
	for(;;)
	{
		/* Permet d'attendre le signal 0x0003 pour l'affichage des niveau sonore des channels sur l'écran LCD */
		osSignalWait(0x0003, osWaitForever);
 8002b60:	463b      	mov	r3, r7
 8002b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b66:	2103      	movs	r1, #3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f012 fd31 	bl	80155d0 <osSignalWait>
		uiDisplayInputLevel(inputLevelL_cp, inputLevelR_cp);
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <startUITask+0xb8>)
 8002b70:	ed93 7b00 	vldr	d7, [r3]
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <startUITask+0xbc>)
 8002b76:	ed93 6b00 	vldr	d6, [r3]
 8002b7a:	eeb0 1a46 	vmov.f32	s2, s12
 8002b7e:	eef0 1a66 	vmov.f32	s3, s13
 8002b82:	eeb0 0a47 	vmov.f32	s0, s14
 8002b86:	eef0 0a67 	vmov.f32	s1, s15
 8002b8a:	f001 fa2d 	bl	8003fe8 <uiDisplayInputLevel>

		/* Permet d'afficher le spectrogramme en temps réel du son ambiant */
		for(int y = FFT_Length/2 + y1; y > y1; y--){
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	3380      	adds	r3, #128	; 0x80
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	e01c      	b.n	8002bd0 <startUITask+0x94>
			LCD_DrawPixel_Color(x + time, y, aFFT_Input_f32[(FFT_Length/2 + y1) - y]);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b298      	uxth	r0, r3
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <startUITask+0xc0>)
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbe:	ee17 3a90 	vmov	r3, s15
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f001 fc4b 	bl	8004460 <LCD_DrawPixel_Color>
		for(int y = FFT_Length/2 + y1; y > y1; y--){
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dcde      	bgt.n	8002b96 <startUITask+0x5a>
		}
		if(time < 400){
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002bde:	da03      	bge.n	8002be8 <startUITask+0xac>
			time += 1;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	3301      	adds	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e7bb      	b.n	8002b60 <startUITask+0x24>
		}
		else{
			time = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
		osSignalWait(0x0003, osWaitForever);
 8002bec:	e7b8      	b.n	8002b60 <startUITask+0x24>
 8002bee:	bf00      	nop
 8002bf0:	0801b18c 	.word	0x0801b18c
 8002bf4:	200000e8 	.word	0x200000e8
 8002bf8:	200000f0 	.word	0x200000f0
 8002bfc:	20008cf8 	.word	0x20008cf8

08002c00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002c12:	f003 f9ed 	bl	8005ff0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40001000 	.word	0x40001000

08002c24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002c28:	f001 fa82 	bl	8004130 <LED_Toggle>
		HAL_Delay(100);
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	f003 f9ff 	bl	8006030 <HAL_Delay>
		LED_Toggle();
 8002c32:	e7f9      	b.n	8002c28 <Error_Handler+0x4>

08002c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	f06f 0001 	mvn.w	r0, #1
 8002c72:	f003 fd65 	bl	8006740 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_ADC_MspInit+0xa4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d13c      	bne.n	8002d20 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cc4:	f043 0320 	orr.w	r3, r3, #32
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_ADC_MspInit+0xa8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002cee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002cf2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <HAL_ADC_MspInit+0xac>)
 8002d04:	f004 ffb6 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <HAL_ADC_MspInit+0xb0>)
 8002d1c:	f004 ffaa 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40012200 	.word	0x40012200
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40021400 	.word	0x40021400
 8002d34:	40020000 	.word	0x40020000

08002d38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_CRC_MspInit+0x38>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10b      	bne.n	8002d62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_CRC_MspInit+0x3c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_CRC_MspInit+0x3c>)
 8002d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_CRC_MspInit+0x3c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023000 	.word	0x40023000
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_DCMI_MspInit+0x1d0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	f040 80d2 	bne.w	8002f40 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002d9c:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6353      	str	r3, [r2, #52]	; 0x34
 8002da8:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db4:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dcc:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dd2:	f043 0308 	orr.w	r3, r3, #8
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e06:	6313      	str	r3, [r2, #48]	; 0x30
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_DCMI_MspInit+0x1d4>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002e2c:	2360      	movs	r3, #96	; 0x60
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e3c:	230d      	movs	r3, #13
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e44:	4619      	mov	r1, r3
 8002e46:	4842      	ldr	r0, [pc, #264]	; (8002f50 <HAL_DCMI_MspInit+0x1d8>)
 8002e48:	f004 ff14 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e5c:	230d      	movs	r3, #13
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e64:	4619      	mov	r1, r3
 8002e66:	483b      	ldr	r0, [pc, #236]	; (8002f54 <HAL_DCMI_MspInit+0x1dc>)
 8002e68:	f004 ff04 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e7e:	230d      	movs	r3, #13
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4619      	mov	r1, r3
 8002e88:	4833      	ldr	r0, [pc, #204]	; (8002f58 <HAL_DCMI_MspInit+0x1e0>)
 8002e8a:	f004 fef3 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002e8e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ea0:	230d      	movs	r3, #13
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	482c      	ldr	r0, [pc, #176]	; (8002f5c <HAL_DCMI_MspInit+0x1e4>)
 8002eac:	f004 fee2 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002eb0:	2350      	movs	r3, #80	; 0x50
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ec0:	230d      	movs	r3, #13
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4825      	ldr	r0, [pc, #148]	; (8002f60 <HAL_DCMI_MspInit+0x1e8>)
 8002ecc:	f004 fed2 	bl	8007c74 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <HAL_DCMI_MspInit+0x1f0>)
 8002ed4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ef8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f00:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f16:	f003 fefb 	bl	8006d10 <HAL_DMA_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002f20:	f7ff fe80 	bl	8002c24 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f28:	649a      	str	r2, [r3, #72]	; 0x48
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_DCMI_MspInit+0x1ec>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2105      	movs	r1, #5
 8002f34:	204e      	movs	r0, #78	; 0x4e
 8002f36:	f003 fc03 	bl	8006740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002f3a:	204e      	movs	r0, #78	; 0x4e
 8002f3c:	f003 fc1c 	bl	8006778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3738      	adds	r7, #56	; 0x38
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	50050000 	.word	0x50050000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021800 	.word	0x40021800
 8002f5c:	40021c00 	.word	0x40021c00
 8002f60:	40020000 	.word	0x40020000
 8002f64:	2000a030 	.word	0x2000a030
 8002f68:	40026428 	.word	0x40026428

08002f6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_DMA2D_MspInit+0x44>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d113      	bne.n	8002fa6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_DMA2D_MspInit+0x48>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <HAL_DMA2D_MspInit+0x48>)
 8002f84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_DMA2D_MspInit+0x48>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2105      	movs	r1, #5
 8002f9a:	205a      	movs	r0, #90	; 0x5a
 8002f9c:	f003 fbd0 	bl	8006740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002fa0:	205a      	movs	r0, #90	; 0x5a
 8002fa2:	f003 fbe9 	bl	8006778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	4002b000 	.word	0x4002b000
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <HAL_I2C_MspInit+0xdc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d129      	bne.n	800302e <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a2e      	ldr	r2, [pc, #184]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003004:	2304      	movs	r3, #4
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	4823      	ldr	r0, [pc, #140]	; (800309c <HAL_I2C_MspInit+0xe4>)
 8003010:	f004 fe30 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 800301a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800301e:	6413      	str	r3, [r2, #64]	; 0x40
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800302c:	e02d      	b.n	800308a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <HAL_I2C_MspInit+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d128      	bne.n	800308a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 800303e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003042:	6313      	str	r3, [r2, #48]	; 0x30
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003050:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003056:	2312      	movs	r3, #18
 8003058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003062:	2304      	movs	r3, #4
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4619      	mov	r1, r3
 800306c:	480d      	ldr	r0, [pc, #52]	; (80030a4 <HAL_I2C_MspInit+0xec>)
 800306e:	f004 fe01 	bl	8007c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_I2C_MspInit+0xe0>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	bf00      	nop
 800308c:	3730      	adds	r7, #48	; 0x30
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40005400 	.word	0x40005400
 8003098:	40023800 	.word	0x40023800
 800309c:	40020400 	.word	0x40020400
 80030a0:	40005c00 	.word	0x40005c00
 80030a4:	40021c00 	.word	0x40021c00

080030a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_I2C_MspDeInit+0x64>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d110      	bne.n	80030dc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_I2C_MspDeInit+0x68>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_I2C_MspDeInit+0x68>)
 80030c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80030c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ca:	4812      	ldr	r0, [pc, #72]	; (8003114 <HAL_I2C_MspDeInit+0x6c>)
 80030cc:	f004 ff7e 	bl	8007fcc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80030d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d4:	480f      	ldr	r0, [pc, #60]	; (8003114 <HAL_I2C_MspDeInit+0x6c>)
 80030d6:	f004 ff79 	bl	8007fcc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80030da:	e013      	b.n	8003104 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_I2C_MspDeInit+0x70>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10e      	bne.n	8003104 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_I2C_MspDeInit+0x68>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_I2C_MspDeInit+0x68>)
 80030ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	4809      	ldr	r0, [pc, #36]	; (800311c <HAL_I2C_MspDeInit+0x74>)
 80030f6:	f004 ff69 	bl	8007fcc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80030fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fe:	4807      	ldr	r0, [pc, #28]	; (800311c <HAL_I2C_MspDeInit+0x74>)
 8003100:	f004 ff64 	bl	8007fcc <HAL_GPIO_DeInit>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40005400 	.word	0x40005400
 8003110:	40023800 	.word	0x40023800
 8003114:	40020400 	.word	0x40020400
 8003118:	40005c00 	.word	0x40005c00
 800311c:	40021c00 	.word	0x40021c00

08003120 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08e      	sub	sp, #56	; 0x38
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a51      	ldr	r2, [pc, #324]	; (8003284 <HAL_LTDC_MspInit+0x164>)
 800313e:	4293      	cmp	r3, r2
 8003140:	f040 809b 	bne.w	800327a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800314a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800314e:	6453      	str	r3, [r2, #68]	; 0x44
 8003150:	4b4d      	ldr	r3, [pc, #308]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a49      	ldr	r2, [pc, #292]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003174:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a43      	ldr	r2, [pc, #268]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800317a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 8003192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4a37      	ldr	r2, [pc, #220]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ae:	6313      	str	r3, [r2, #48]	; 0x30
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031bc:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	6313      	str	r3, [r2, #48]	; 0x30
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_LTDC_MspInit+0x168>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80031d4:	2310      	movs	r3, #16
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031e4:	230e      	movs	r3, #14
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	4827      	ldr	r0, [pc, #156]	; (800328c <HAL_LTDC_MspInit+0x16c>)
 80031f0:	f004 fd40 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80031f4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003206:	230e      	movs	r3, #14
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800320a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320e:	4619      	mov	r1, r3
 8003210:	481f      	ldr	r0, [pc, #124]	; (8003290 <HAL_LTDC_MspInit+0x170>)
 8003212:	f004 fd2f 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003216:	23f7      	movs	r3, #247	; 0xf7
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003226:	230e      	movs	r3, #14
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4818      	ldr	r0, [pc, #96]	; (8003294 <HAL_LTDC_MspInit+0x174>)
 8003232:	f004 fd1f 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003248:	2309      	movs	r3, #9
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	4811      	ldr	r0, [pc, #68]	; (8003298 <HAL_LTDC_MspInit+0x178>)
 8003254:	f004 fd0e 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003258:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800326a:	230e      	movs	r3, #14
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800326e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003272:	4619      	mov	r1, r3
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_LTDC_MspInit+0x17c>)
 8003276:	f004 fcfd 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800327a:	bf00      	nop
 800327c:	3738      	adds	r7, #56	; 0x38
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40016800 	.word	0x40016800
 8003288:	40023800 	.word	0x40023800
 800328c:	40021000 	.word	0x40021000
 8003290:	40022400 	.word	0x40022400
 8003294:	40022800 	.word	0x40022800
 8003298:	40021800 	.word	0x40021800
 800329c:	40022000 	.word	0x40022000

080032a0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_QSPI_MspInit+0x11c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d178      	bne.n	80033b4 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a3e      	ldr	r2, [pc, #248]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6393      	str	r3, [r2, #56]	; 0x38
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <HAL_QSPI_MspInit+0x120>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003322:	2304      	movs	r3, #4
 8003324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003332:	2309      	movs	r3, #9
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003336:	f107 031c 	add.w	r3, r7, #28
 800333a:	4619      	mov	r1, r3
 800333c:	4821      	ldr	r0, [pc, #132]	; (80033c4 <HAL_QSPI_MspInit+0x124>)
 800333e:	f004 fc99 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003352:	230a      	movs	r3, #10
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	481a      	ldr	r0, [pc, #104]	; (80033c8 <HAL_QSPI_MspInit+0x128>)
 800335e:	f004 fc89 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003362:	2304      	movs	r3, #4
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003372:	2309      	movs	r3, #9
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	4619      	mov	r1, r3
 800337c:	4812      	ldr	r0, [pc, #72]	; (80033c8 <HAL_QSPI_MspInit+0x128>)
 800337e:	f004 fc79 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003382:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003394:	2309      	movs	r3, #9
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	480b      	ldr	r0, [pc, #44]	; (80033cc <HAL_QSPI_MspInit+0x12c>)
 80033a0:	f004 fc68 	bl	8007c74 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2105      	movs	r1, #5
 80033a8:	205c      	movs	r0, #92	; 0x5c
 80033aa:	f003 f9c9 	bl	8006740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80033ae:	205c      	movs	r0, #92	; 0x5c
 80033b0:	f003 f9e2 	bl	8006778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3730      	adds	r7, #48	; 0x30
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	a0001000 	.word	0xa0001000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020c00 	.word	0x40020c00

080033d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_RTC_MspInit+0x2c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d105      	bne.n	80033ee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_RTC_MspInit+0x30>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a06      	ldr	r2, [pc, #24]	; (8003400 <HAL_RTC_MspInit+0x30>)
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40002800 	.word	0x40002800
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <HAL_SD_MspInit+0xb4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d144      	bne.n	80034b0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	4a24      	ldr	r2, [pc, #144]	; (80034bc <HAL_SD_MspInit+0xb8>)
 800342c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003430:	6453      	str	r3, [r2, #68]	; 0x44
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_SD_MspInit+0xb8>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_SD_MspInit+0xb8>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_SD_MspInit+0xb8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800346e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003472:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003480:	230c      	movs	r3, #12
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4619      	mov	r1, r3
 800348a:	480d      	ldr	r0, [pc, #52]	; (80034c0 <HAL_SD_MspInit+0xbc>)
 800348c:	f004 fbf2 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003490:	2304      	movs	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80034a0:	230c      	movs	r3, #12
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	4806      	ldr	r0, [pc, #24]	; (80034c4 <HAL_SD_MspInit+0xc0>)
 80034ac:	f004 fbe2 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80034b0:	bf00      	nop
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00

080034c8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80034e8:	d127      	bne.n	800353a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 8003508:	f043 0308 	orr.w	r3, r3, #8
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_SPDIFRX_MspInit+0x7c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800352a:	2308      	movs	r3, #8
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <HAL_SPDIFRX_MspInit+0x80>)
 8003536:	f004 fb9d 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40020c00 	.word	0x40020c00

0800354c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_TIM_Base_MspInit+0xc8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10c      	bne.n	8003578 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003576:	e046      	b.n	8003606 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d10c      	bne.n	800359c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003582:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]
}
 800359a:	e034      	b.n	8003606 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_TIM_Base_MspInit+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10c      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
}
 80035be:	e022      	b.n	8003606 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_TIM_Base_MspInit+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10c      	bne.n	80035e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
}
 80035e2:	e010      	b.n	8003606 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_TIM_Base_MspInit+0xd8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10b      	bne.n	8003606 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_TIM_Base_MspInit+0xcc>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	bf00      	nop
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40023800 	.word	0x40023800
 800361c:	40000400 	.word	0x40000400
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_TIM_PWM_MspInit+0x38>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10b      	bne.n	8003652 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_TIM_PWM_MspInit+0x3c>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_TIM_PWM_MspInit+0x3c>)
 8003640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_TIM_PWM_MspInit+0x3c>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40001800 	.word	0x40001800
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a56      	ldr	r2, [pc, #344]	; (80037e0 <HAL_TIM_MspPostInit+0x178>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d11d      	bne.n	80036c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a55      	ldr	r2, [pc, #340]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80036a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	4619      	mov	r1, r3
 80036be:	484a      	ldr	r0, [pc, #296]	; (80037e8 <HAL_TIM_MspPostInit+0x180>)
 80036c0:	f004 fad8 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80036c4:	e087      	b.n	80037d6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d11d      	bne.n	800370c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d0:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6313      	str	r3, [r2, #48]	; 0x30
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80036e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036fa:	2301      	movs	r3, #1
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	4838      	ldr	r0, [pc, #224]	; (80037e8 <HAL_TIM_MspPostInit+0x180>)
 8003706:	f004 fab5 	bl	8007c74 <HAL_GPIO_Init>
}
 800370a:	e064      	b.n	80037d6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_TIM_MspPostInit+0x184>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d11c      	bne.n	8003750 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800372e:	2310      	movs	r3, #16
 8003730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373e:	2302      	movs	r3, #2
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	4619      	mov	r1, r3
 8003748:	4829      	ldr	r0, [pc, #164]	; (80037f0 <HAL_TIM_MspPostInit+0x188>)
 800374a:	f004 fa93 	bl	8007c74 <HAL_GPIO_Init>
}
 800374e:	e042      	b.n	80037d6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <HAL_TIM_MspPostInit+0x18c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d11c      	bne.n	8003794 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003772:	2301      	movs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003782:	2302      	movs	r3, #2
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	4619      	mov	r1, r3
 800378c:	481a      	ldr	r0, [pc, #104]	; (80037f8 <HAL_TIM_MspPostInit+0x190>)
 800378e:	f004 fa71 	bl	8007c74 <HAL_GPIO_Init>
}
 8003792:	e020      	b.n	80037d6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_MspPostInit+0x194>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d11b      	bne.n	80037d6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_TIM_MspPostInit+0x17c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80037c6:	2309      	movs	r3, #9
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80037ca:	f107 031c 	add.w	r3, r7, #28
 80037ce:	4619      	mov	r1, r3
 80037d0:	480b      	ldr	r0, [pc, #44]	; (8003800 <HAL_TIM_MspPostInit+0x198>)
 80037d2:	f004 fa4f 	bl	8007c74 <HAL_GPIO_Init>
}
 80037d6:	bf00      	nop
 80037d8:	3730      	adds	r7, #48	; 0x30
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40001800 	.word	0x40001800
 8003800:	40021c00 	.word	0x40021c00

08003804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	; 0x30
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <HAL_UART_MspInit+0x110>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d145      	bne.n	80038b2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003826:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4a3b      	ldr	r2, [pc, #236]	; (8003918 <HAL_UART_MspInit+0x114>)
 800382c:	f043 0310 	orr.w	r3, r3, #16
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a35      	ldr	r2, [pc, #212]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_UART_MspInit+0x114>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <HAL_UART_MspInit+0x114>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_UART_MspInit+0x114>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2300      	movs	r3, #0
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800387e:	2307      	movs	r3, #7
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	4824      	ldr	r0, [pc, #144]	; (800391c <HAL_UART_MspInit+0x118>)
 800388a:	f004 f9f3 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800388e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	2300      	movs	r3, #0
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038a0:	2307      	movs	r3, #7
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80038a4:	f107 031c 	add.w	r3, r7, #28
 80038a8:	4619      	mov	r1, r3
 80038aa:	481d      	ldr	r0, [pc, #116]	; (8003920 <HAL_UART_MspInit+0x11c>)
 80038ac:	f004 f9e2 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038b0:	e02c      	b.n	800390c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_UART_MspInit+0x120>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d127      	bne.n	800390c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038c2:	f043 0320 	orr.w	r3, r3, #32
 80038c6:	6453      	str	r3, [r2, #68]	; 0x44
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	6313      	str	r3, [r2, #48]	; 0x30
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_UART_MspInit+0x114>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80038ec:	23c0      	movs	r3, #192	; 0xc0
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f8:	2303      	movs	r3, #3
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038fc:	2308      	movs	r3, #8
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	4619      	mov	r1, r3
 8003906:	4808      	ldr	r0, [pc, #32]	; (8003928 <HAL_UART_MspInit+0x124>)
 8003908:	f004 f9b4 	bl	8007c74 <HAL_GPIO_Init>
}
 800390c:	bf00      	nop
 800390e:	3730      	adds	r7, #48	; 0x30
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40011000 	.word	0x40011000
 8003918:	40023800 	.word	0x40023800
 800391c:	40020400 	.word	0x40020400
 8003920:	40020000 	.word	0x40020000
 8003924:	40011400 	.word	0x40011400
 8003928:	40020800 	.word	0x40020800

0800392c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_FMC_MspInit+0x10c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d173      	bne.n	8003a30 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003948:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_FMC_MspInit+0x10c>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_FMC_MspInit+0x110>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <HAL_FMC_MspInit+0x110>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6393      	str	r3, [r2, #56]	; 0x38
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_FMC_MspInit+0x110>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003966:	f64f 7383 	movw	r3, #65411	; 0xff83
 800396a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003978:	230c      	movs	r3, #12
 800397a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	4619      	mov	r1, r3
 8003980:	482f      	ldr	r0, [pc, #188]	; (8003a40 <HAL_FMC_MspInit+0x114>)
 8003982:	f004 f977 	bl	8007c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003986:	f248 1333 	movw	r3, #33075	; 0x8133
 800398a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003998:	230c      	movs	r3, #12
 800399a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4828      	ldr	r0, [pc, #160]	; (8003a44 <HAL_FMC_MspInit+0x118>)
 80039a2:	f004 f967 	bl	8007c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80039a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039aa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039b8:	230c      	movs	r3, #12
 80039ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	4821      	ldr	r0, [pc, #132]	; (8003a48 <HAL_FMC_MspInit+0x11c>)
 80039c2:	f004 f957 	bl	8007c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80039c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039ca:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039d8:	230c      	movs	r3, #12
 80039da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	481a      	ldr	r0, [pc, #104]	; (8003a4c <HAL_FMC_MspInit+0x120>)
 80039e2:	f004 f947 	bl	8007c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80039e6:	2328      	movs	r3, #40	; 0x28
 80039e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ea:	2302      	movs	r3, #2
 80039ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f2:	2303      	movs	r3, #3
 80039f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f6:	230c      	movs	r3, #12
 80039f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4814      	ldr	r0, [pc, #80]	; (8003a50 <HAL_FMC_MspInit+0x124>)
 8003a00:	f004 f938 	bl	8007c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003a04:	2308      	movs	r3, #8
 8003a06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a14:	230c      	movs	r3, #12
 8003a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	480d      	ldr	r0, [pc, #52]	; (8003a54 <HAL_FMC_MspInit+0x128>)
 8003a1e:	f004 f929 	bl	8007c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_FMC_MspInit+0x12c>)
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <HAL_FMC_MspInit+0x130>)
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_FMC_MspInit+0x130>)
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <HAL_FMC_MspInit+0x12c>)
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a2e:	e000      	b.n	8003a32 <HAL_FMC_MspInit+0x106>
    return;
 8003a30:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000350 	.word	0x20000350
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021c00 	.word	0x40021c00
 8003a54:	40020800 	.word	0x40020800
 8003a58:	2000a59c 	.word	0x2000a59c
 8003a5c:	20009de4 	.word	0x20009de4

08003a60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003a68:	f7ff ff60 	bl	800392c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6f      	ldr	r2, [pc, #444]	; (8003c40 <HAL_SAI_MspInit+0x1cc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d175      	bne.n	8003b72 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003a86:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a8e:	4b6e      	ldr	r3, [pc, #440]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	4a6d      	ldr	r2, [pc, #436]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a98:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9a:	4b6b      	ldr	r3, [pc, #428]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a65      	ldr	r2, [pc, #404]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003aae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4860      	ldr	r0, [pc, #384]	; (8003c4c <HAL_SAI_MspInit+0x1d8>)
 8003acc:	f004 f8d2 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003ad0:	23e0      	movs	r3, #224	; 0xe0
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003adc:	2302      	movs	r3, #2
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ae0:	230a      	movs	r3, #10
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4858      	ldr	r0, [pc, #352]	; (8003c4c <HAL_SAI_MspInit+0x1d8>)
 8003aec:	f004 f8c2 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003af2:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_SAI_MspInit+0x1e0>)
 8003af4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003af6:	4b56      	ldr	r3, [pc, #344]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003af8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003afc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003afe:	4b54      	ldr	r3, [pc, #336]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b04:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b10:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b12:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b18:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b1a:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b20:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003b22:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b28:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003b2a:	4b49      	ldr	r3, [pc, #292]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b30:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b34:	2204      	movs	r2, #4
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b38:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b44:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003b4a:	4841      	ldr	r0, [pc, #260]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b4c:	f003 f8e0 	bl	8006d10 <HAL_DMA_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003b56:	f7ff f865 	bl	8002c24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b5e:	671a      	str	r2, [r3, #112]	; 0x70
 8003b60:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b6c:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <HAL_SAI_MspInit+0x1dc>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a38      	ldr	r2, [pc, #224]	; (8003c58 <HAL_SAI_MspInit+0x1e4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d15c      	bne.n	8003c36 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003b8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_SAI_MspInit+0x1d4>)
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <HAL_SAI_MspInit+0x1d0>)
 8003ba4:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003bb8:	230a      	movs	r3, #10
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4826      	ldr	r0, [pc, #152]	; (8003c5c <HAL_SAI_MspInit+0x1e8>)
 8003bc4:	f004 f856 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_SAI_MspInit+0x1f0>)
 8003bcc:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd4:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bda:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bee:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bf6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfe:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c06:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c10:	f003 f87e 	bl	8006d10 <HAL_DMA_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003c1a:	f7ff f803 	bl	8002c24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c22:	671a      	str	r2, [r3, #112]	; 0x70
 8003c24:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <HAL_SAI_MspInit+0x1ec>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40015c04 	.word	0x40015c04
 8003c44:	20000354 	.word	0x20000354
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	2000a3e0 	.word	0x2000a3e0
 8003c54:	40026470 	.word	0x40026470
 8003c58:	40015c24 	.word	0x40015c24
 8003c5c:	40021800 	.word	0x40021800
 8003c60:	20009e90 	.word	0x20009e90
 8003c64:	400264b8 	.word	0x400264b8

08003c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	2036      	movs	r0, #54	; 0x36
 8003c7e:	f002 fd5f 	bl	8006740 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c82:	2036      	movs	r0, #54	; 0x36
 8003c84:	f002 fd78 	bl	8006778 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_InitTick+0xa0>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_InitTick+0xa0>)
 8003c8e:	f043 0310 	orr.w	r3, r3, #16
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <HAL_InitTick+0xa0>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ca0:	f107 0210 	add.w	r2, r7, #16
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f008 fd8c 	bl	800c7c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003cb0:	f008 fd62 	bl	800c778 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <HAL_InitTick+0xa4>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9b      	lsrs	r3, r3, #18
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <HAL_InitTick+0xac>)
 8003ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_InitTick+0xa8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ce8:	4809      	ldr	r0, [pc, #36]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cea:	f00b fbfd 	bl	800f4e8 <HAL_TIM_Base_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003cf4:	4806      	ldr	r0, [pc, #24]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cf6:	f00b fc4f 	bl	800f598 <HAL_TIM_Base_Start_IT>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	e000      	b.n	8003d00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3730      	adds	r7, #48	; 0x30
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	2000a61c 	.word	0x2000a61c
 8003d14:	40001000 	.word	0x40001000

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <NMI_Handler+0x4>

08003d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <HardFault_Handler+0x4>

08003d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <MemManage_Handler+0x4>

08003d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <BusFault_Handler+0x4>

08003d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <UsageFault_Handler+0x4>

08003d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d4c:	f004 fa96 	bl	800827c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <TIM6_DAC_IRQHandler+0x10>)
 8003d5a:	f00b fcec 	bl	800f736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000a61c 	.word	0x2000a61c

08003d68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA2_Stream0_IRQHandler+0x10>)
 8003d6e:	f003 f96f 	bl	8007050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20009de4 	.word	0x20009de4

08003d7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA2_Stream1_IRQHandler+0x10>)
 8003d82:	f003 f965 	bl	8007050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000a030 	.word	0x2000a030

08003d90 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <DMA2_Stream4_IRQHandler+0x10>)
 8003d96:	f003 f95b 	bl	8007050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000a3e0 	.word	0x2000a3e0

08003da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <OTG_FS_IRQHandler+0x10>)
 8003daa:	f004 fcf5 	bl	8008798 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2004aabc 	.word	0x2004aabc

08003db8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <DMA2_Stream7_IRQHandler+0x10>)
 8003dbe:	f003 f947 	bl	8007050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20009e90 	.word	0x20009e90

08003dcc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <DCMI_IRQHandler+0x10>)
 8003dd2:	f002 fecd 	bl	8006b70 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000a2a0 	.word	0x2000a2a0

08003de0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <DMA2D_IRQHandler+0x10>)
 8003de6:	f003 fd07 	bl	80077f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000a4c4 	.word	0x2000a4c4

08003df4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <QUADSPI_IRQHandler+0x10>)
 8003dfa:	f007 f923 	bl	800b044 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000a5d0 	.word	0x2000a5d0

08003e08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e00a      	b.n	8003e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e1a:	f3af 8000 	nop.w
 8003e1e:	4601      	mov	r1, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	60ba      	str	r2, [r7, #8]
 8003e26:	b2ca      	uxtb	r2, r1
 8003e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf0      	blt.n	8003e1a <_read+0x12>
	}

return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e009      	b.n	8003e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	60ba      	str	r2, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f971 	bl	8004144 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbf1      	blt.n	8003e54 <_write+0x12>
	}
	return len;
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_close>:

int _close(int file)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
	return -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_isatty>:

int _isatty(int file)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <_sbrk+0x5c>)
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <_sbrk+0x60>)
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <_sbrk+0x64>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <_sbrk+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <_sbrk+0x64>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d207      	bcs.n	8003f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f14:	f015 fbf0 	bl	80196f8 <__errno>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f22:	e009      	b.n	8003f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <_sbrk+0x64>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <_sbrk+0x64>)
 8003f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20050000 	.word	0x20050000
 8003f44:	00000400 	.word	0x00000400
 8003f48:	20000358 	.word	0x20000358
 8003f4c:	2004add0 	.word	0x2004add0

08003f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <SystemInit+0x20>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <SystemInit+0x20>)
 8003f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7e:	f000 fab1 	bl	80044e4 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003f82:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003f86:	f000 fa13 	bl	80043b0 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f8e:	f000 fa3f 	bl	8004410 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003f92:	4810      	ldr	r0, [pc, #64]	; (8003fd4 <uiDisplayBasic+0x60>)
 8003f94:	f000 fa54 	bl	8004440 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <uiDisplayBasic+0x64>)
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f000 fae6 	bl	8004574 <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003fa8:	480c      	ldr	r0, [pc, #48]	; (8003fdc <uiDisplayBasic+0x68>)
 8003faa:	f000 fa49 	bl	8004440 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003fae:	2301      	movs	r3, #1
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <uiDisplayBasic+0x6c>)
 8003fb6:	211e      	movs	r1, #30
 8003fb8:	200a      	movs	r0, #10
 8003fba:	f000 fadb 	bl	8004574 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <uiDisplayBasic+0x70>)
 8003fc6:	2132      	movs	r1, #50	; 0x32
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f000 fad3 	bl	8004574 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	2000001c 	.word	0x2000001c
 8003fd8:	0801b19c 	.word	0x0801b19c
 8003fdc:	20000014 	.word	0x20000014
 8003fe0:	0801b1b4 	.word	0x0801b1b4
 8003fe4:	0801b1c0 	.word	0x0801b1c0

08003fe8 <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b096      	sub	sp, #88	; 0x58
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ff2:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003ff6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003ffa:	f000 f9d9 	bl	80043b0 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004002:	f000 fa05 	bl	8004410 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 8004006:	483a      	ldr	r0, [pc, #232]	; (80040f0 <uiDisplayInputLevel+0x108>)
 8004008:	f000 fa1a 	bl	8004440 <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004018:	f7fc fdf6 	bl	8000c08 <__aeabi_dcmpgt>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d023      	beq.n	800406a <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 8004022:	ed97 0b02 	vldr	d0, [r7, #8]
 8004026:	f016 fda7 	bl	801ab78 <log10>
 800402a:	ec51 0b10 	vmov	r0, r1, d0
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <uiDisplayInputLevel+0x10c>)
 8004034:	f7fc fb58 	bl	80006e8 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f7fc fe02 	bl	8000c48 <__aeabi_d2iz>
 8004044:	4603      	mov	r3, r0
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800404e:	492a      	ldr	r1, [pc, #168]	; (80040f8 <uiDisplayInputLevel+0x110>)
 8004050:	4618      	mov	r0, r3
 8004052:	f015 fcff 	bl	8019a54 <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 8004056:	f107 0214 	add.w	r2, r7, #20
 800405a:	2301      	movs	r3, #1
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2303      	movs	r3, #3
 8004060:	211e      	movs	r1, #30
 8004062:	205a      	movs	r0, #90	; 0x5a
 8004064:	f000 fa86 	bl	8004574 <LCD_DrawString>
 8004068:	e007      	b.n	800407a <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 800406a:	2301      	movs	r3, #1
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2303      	movs	r3, #3
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <uiDisplayInputLevel+0x114>)
 8004072:	211e      	movs	r1, #30
 8004074:	205a      	movs	r0, #90	; 0x5a
 8004076:	f000 fa7d 	bl	8004574 <LCD_DrawString>

	if (inputLevelR > 0) {
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004086:	f7fc fdbf 	bl	8000c08 <__aeabi_dcmpgt>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8004090:	ed97 0b00 	vldr	d0, [r7]
 8004094:	f016 fd70 	bl	801ab78 <log10>
 8004098:	ec51 0b10 	vmov	r0, r1, d0
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <uiDisplayInputLevel+0x10c>)
 80040a2:	f7fc fb21 	bl	80006e8 <__aeabi_dmul>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fc fdcb 	bl	8000c48 <__aeabi_d2iz>
 80040b2:	4603      	mov	r3, r0
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <uiDisplayInputLevel+0x110>)
 80040be:	4618      	mov	r0, r3
 80040c0:	f015 fcc8 	bl	8019a54 <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 80040c4:	f107 0214 	add.w	r2, r7, #20
 80040c8:	2301      	movs	r3, #1
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2303      	movs	r3, #3
 80040ce:	2132      	movs	r1, #50	; 0x32
 80040d0:	205a      	movs	r0, #90	; 0x5a
 80040d2:	f000 fa4f 	bl	8004574 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 80040d6:	e007      	b.n	80040e8 <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 80040d8:	2301      	movs	r3, #1
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2303      	movs	r3, #3
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <uiDisplayInputLevel+0x114>)
 80040e0:	2132      	movs	r1, #50	; 0x32
 80040e2:	205a      	movs	r0, #90	; 0x5a
 80040e4:	f000 fa46 	bl	8004574 <LCD_DrawString>
}
 80040e8:	bf00      	nop
 80040ea:	3750      	adds	r7, #80	; 0x50
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000014 	.word	0x20000014
 80040f4:	40340000 	.word	0x40340000
 80040f8:	0801b1cc 	.word	0x0801b1cc
 80040fc:	0801b1d8 	.word	0x0801b1d8

08004100 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8004104:	2201      	movs	r2, #1
 8004106:	2102      	movs	r1, #2
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <LED_On+0x14>)
 800410a:	f004 f883 	bl	8008214 <HAL_GPIO_WritePin>
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000

08004118 <LED_Off>:

void LED_Off(){
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	2102      	movs	r1, #2
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <LED_Off+0x14>)
 8004122:	f004 f877 	bl	8008214 <HAL_GPIO_WritePin>
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40022000 	.word	0x40022000

08004130 <LED_Toggle>:

void LED_Toggle(){
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8004134:	2102      	movs	r1, #2
 8004136:	4802      	ldr	r0, [pc, #8]	; (8004140 <LED_Toggle+0x10>)
 8004138:	f004 f885 	bl	8008246 <HAL_GPIO_TogglePin>

}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40022000 	.word	0x40022000

08004144 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 800414c:	1d39      	adds	r1, r7, #4
 800414e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004152:	2201      	movs	r2, #1
 8004154:	4803      	ldr	r0, [pc, #12]	; (8004164 <__io_putchar+0x20>)
 8004156:	f00c fb1b 	bl	8010790 <HAL_UART_Transmit>
	return ch;
 800415a:	687b      	ldr	r3, [r7, #4]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000a2f0 	.word	0x2000a2f0

08004168 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	72fb      	strb	r3, [r7, #11]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	b299      	uxth	r1, r3
 800418a:	88f8      	ldrh	r0, [r7, #6]
 800418c:	893a      	ldrh	r2, [r7, #8]
 800418e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4603      	mov	r3, r0
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f005 ffc8 	bl	800a134 <HAL_I2C_Mem_Read>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f832 	bl	800421c <I2Cx_Error>
  }
  return status;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08a      	sub	sp, #40	; 0x28
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	461a      	mov	r2, r3
 80041d0:	4603      	mov	r3, r0
 80041d2:	72fb      	strb	r3, [r7, #11]
 80041d4:	460b      	mov	r3, r1
 80041d6:	813b      	strh	r3, [r7, #8]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80041e0:	7afb      	ldrb	r3, [r7, #11]
 80041e2:	b299      	uxth	r1, r3
 80041e4:	88f8      	ldrh	r0, [r7, #6]
 80041e6:	893a      	ldrh	r2, [r7, #8]
 80041e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4603      	mov	r3, r0
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f005 fe87 	bl	8009f0c <HAL_I2C_Mem_Write>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	4619      	mov	r1, r3
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f805 	bl	800421c <I2Cx_Error>
  }
  return status;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f005 fe3f 	bl	8009eac <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f005 fdac 	bl	8009d8c <HAL_I2C_Init>
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	460b      	mov	r3, r1
 8004248:	80bb      	strh	r3, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29b      	uxth	r3, r3
 8004258:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800425a:	89fb      	ldrh	r3, [r7, #14]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	b29b      	uxth	r3, r3
 8004260:	b21a      	sxth	r2, r3
 8004262:	887b      	ldrh	r3, [r7, #2]
 8004264:	b21b      	sxth	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b21b      	sxth	r3, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800426e:	88ba      	ldrh	r2, [r7, #4]
 8004270:	79f9      	ldrb	r1, [r7, #7]
 8004272:	2302      	movs	r3, #2
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	1cbb      	adds	r3, r7, #2
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2302      	movs	r3, #2
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <AUDIO_I2C_Write+0x50>)
 800427e:	f7ff ffa0 	bl	80041c2 <I2Cx_WriteMultiple>
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20009d98 	.word	0x20009d98

08004290 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af02      	add	r7, sp, #8
 8004296:	4603      	mov	r3, r0
 8004298:	460a      	mov	r2, r1
 800429a:	71fb      	strb	r3, [r7, #7]
 800429c:	4613      	mov	r3, r2
 800429e:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	81bb      	strh	r3, [r7, #12]
 80042a4:	2300      	movs	r3, #0
 80042a6:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80042a8:	88ba      	ldrh	r2, [r7, #4]
 80042aa:	79f9      	ldrb	r1, [r7, #7]
 80042ac:	2302      	movs	r3, #2
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2302      	movs	r3, #2
 80042b8:	480a      	ldr	r0, [pc, #40]	; (80042e4 <AUDIO_I2C_Read+0x54>)
 80042ba:	f7ff ff55 	bl	8004168 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80042be:	89bb      	ldrh	r3, [r7, #12]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80042c4:	89bb      	ldrh	r3, [r7, #12]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b21a      	sxth	r2, r3
 80042cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	81bb      	strh	r3, [r7, #12]

  return read_value;
 80042da:	89bb      	ldrh	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20009d98 	.word	0x20009d98

080042e8 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	4603      	mov	r3, r0
 80042f0:	460a      	mov	r2, r1
 80042f2:	71fb      	strb	r3, [r7, #7]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	2301      	movs	r3, #1
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	1dbb      	adds	r3, r7, #6
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	2170      	movs	r1, #112	; 0x70
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <TS_I2C_Write+0x30>)
 800430a:	f7ff ff5a 	bl	80041c2 <I2Cx_WriteMultiple>

}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20009d98 	.word	0x20009d98

0800431c <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <LCD_Init+0x44>)
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	2b02      	cmp	r3, #2
 8004326:	d002      	beq.n	800432e <LCD_Init+0x12>
 8004328:	480e      	ldr	r0, [pc, #56]	; (8004364 <LCD_Init+0x48>)
 800432a:	f7fe fbe9 	bl	8002b00 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <LCD_Init+0x4c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	4619      	mov	r1, r3
 8004336:	480a      	ldr	r0, [pc, #40]	; (8004360 <LCD_Init+0x44>)
 8004338:	f006 fbd8 	bl	800aaec <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 800433c:	f000 f81a 	bl	8004374 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8004340:	480a      	ldr	r0, [pc, #40]	; (800436c <LCD_Init+0x50>)
 8004342:	f000 f87d 	bl	8004440 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434a:	f000 f861 	bl	8004410 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800434e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004352:	f000 f82d 	bl	80043b0 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004356:	4806      	ldr	r0, [pc, #24]	; (8004370 <LCD_Init+0x54>)
 8004358:	f000 f842 	bl	80043e0 <LCD_SetFillColor>


}
 800435c:	bf00      	nop
 800435e:	bd80      	pop	{r7, pc}
 8004360:	2000a1b0 	.word	0x2000a1b0
 8004364:	0801b1e0 	.word	0x0801b1e0
 8004368:	2000000c 	.word	0x2000000c
 800436c:	2000001c 	.word	0x2000001c
 8004370:	ffff0000 	.word	0xffff0000

08004374 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <LCD_DisplayOn+0x30>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <LCD_DisplayOn+0x30>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004388:	2201      	movs	r2, #1
 800438a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <LCD_DisplayOn+0x34>)
 8004390:	f003 ff40 	bl	8008214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004394:	2201      	movs	r2, #1
 8004396:	2108      	movs	r1, #8
 8004398:	4804      	ldr	r0, [pc, #16]	; (80043ac <LCD_DisplayOn+0x38>)
 800439a:	f003 ff3b 	bl	8008214 <HAL_GPIO_WritePin>
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000a1b0 	.word	0x2000a1b0
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40022800 	.word	0x40022800

080043b0 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <LCD_SetStrokeColor+0x28>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <LCD_SetStrokeColor+0x28>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa4c 	bl	8004860 <ARGB888ToRGB565>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <LCD_SetStrokeColor+0x2c>)
 80043ce:	601a      	str	r2, [r3, #0]
#endif
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	2000035c 	.word	0x2000035c
 80043dc:	20000368 	.word	0x20000368

080043e0 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <LCD_SetFillColor+0x28>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <LCD_SetFillColor+0x28>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa34 	bl	8004860 <ARGB888ToRGB565>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <LCD_SetFillColor+0x2c>)
 80043fe:	601a      	str	r2, [r3, #0]
#endif
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000360 	.word	0x20000360
 800440c:	2000036c 	.word	0x2000036c

08004410 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004418:	4a07      	ldr	r2, [pc, #28]	; (8004438 <LCD_SetBackColor+0x28>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <LCD_SetBackColor+0x28>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa1c 	bl	8004860 <ARGB888ToRGB565>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <LCD_SetBackColor+0x2c>)
 800442e:	601a      	str	r2, [r3, #0]
#endif
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000364 	.word	0x20000364
 800443c:	20000370 	.word	0x20000370

08004440 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <LCD_SetFont+0x1c>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000374 	.word	0x20000374

08004460 <LCD_DrawPixel_Color>:
 * @param  Ypos: Y position
 * @param  color: Color of the pixel
 * @retval None
 */
void LCD_DrawPixel_Color(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
 800446a:	460b      	mov	r3, r1
 800446c:	80bb      	strh	r3, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	807b      	strh	r3, [r7, #2]
	__DrawPixel(Xpos, Ypos, color);
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <LCD_DrawPixel_Color+0x3c>)
 8004474:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004476:	88ba      	ldrh	r2, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	015b      	lsls	r3, r3, #5
 8004480:	461a      	mov	r2, r3
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	4413      	add	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	440b      	add	r3, r1
 800448a:	461a      	mov	r2, r3
 800448c:	887b      	ldrh	r3, [r7, #2]
 800448e:	8013      	strh	r3, [r2, #0]
	__CleanDCache();

}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	2000a1b0 	.word	0x2000a1b0

080044a0 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	460a      	mov	r2, r1
 80044aa:	80fb      	strh	r3, [r7, #6]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <LCD_ErasePixel+0x3c>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <LCD_ErasePixel+0x40>)
 80044b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80044b8:	88ba      	ldrh	r2, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	461a      	mov	r2, r3
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	4413      	add	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	440b      	add	r3, r1
 80044cc:	b282      	uxth	r2, r0
 80044ce:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000370 	.word	0x20000370
 80044e0:	2000a1b0 	.word	0x2000a1b0

080044e4 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <LCD_Clear+0x28>)
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	4618      	mov	r0, r3
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <LCD_Clear+0x2c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80044fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004500:	f000 f976 	bl	80047f0 <LL_FillBuffer>
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2000a1b0 	.word	0x2000a1b0
 8004510:	20000364 	.word	0x20000364

08004514 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4623      	mov	r3, r4
 8004524:	80fb      	strh	r3, [r7, #6]
 8004526:	4603      	mov	r3, r0
 8004528:	80bb      	strh	r3, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
 800452e:	4613      	mov	r3, r2
 8004530:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <LCD_DrawChar+0x5c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	3b20      	subs	r3, #32
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <LCD_DrawChar+0x5c>)
 800453e:	6809      	ldr	r1, [r1, #0]
 8004540:	88c9      	ldrh	r1, [r1, #6]
 8004542:	fb01 f103 	mul.w	r1, r1, r3
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <LCD_DrawChar+0x5c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	889b      	ldrh	r3, [r3, #4]
 800454c:	3307      	adds	r3, #7
 800454e:	2b00      	cmp	r3, #0
 8004550:	da00      	bge.n	8004554 <LCD_DrawChar+0x40>
 8004552:	3307      	adds	r3, #7
 8004554:	10db      	asrs	r3, r3, #3
 8004556:	fb03 f301 	mul.w	r3, r3, r1
 800455a:	441a      	add	r2, r3
 800455c:	78bb      	ldrb	r3, [r7, #2]
 800455e:	88b9      	ldrh	r1, [r7, #4]
 8004560:	88f8      	ldrh	r0, [r7, #6]
 8004562:	f000 f89d 	bl	80046a0 <DrawChar>

}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	20000374 	.word	0x20000374

08004574 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60ba      	str	r2, [r7, #8]
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	81fb      	strh	r3, [r7, #14]
 8004582:	460b      	mov	r3, r1
 8004584:	81bb      	strh	r3, [r7, #12]
 8004586:	4613      	mov	r3, r2
 8004588:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 800458a:	2301      	movs	r3, #1
 800458c:	83fb      	strh	r3, [r7, #30]
 800458e:	2300      	movs	r3, #0
 8004590:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 800459e:	e002      	b.n	80045a6 <LCD_DrawString+0x32>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	617a      	str	r2, [r7, #20]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f6      	bne.n	80045a0 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <LCD_DrawString+0x128>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	889b      	ldrh	r3, [r3, #4]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80045be:	fb93 f3f2 	sdiv	r3, r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d014      	beq.n	80045f4 <LCD_DrawString+0x80>
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	dc23      	bgt.n	8004616 <LCD_DrawString+0xa2>
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d002      	beq.n	80045d8 <LCD_DrawString+0x64>
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d011      	beq.n	80045fa <LCD_DrawString+0x86>
 80045d6:	e01e      	b.n	8004616 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	4a2f      	ldr	r2, [pc, #188]	; (800469c <LCD_DrawString+0x128>)
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	8892      	ldrh	r2, [r2, #4]
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	89fb      	ldrh	r3, [r7, #14]
 80045ee:	4413      	add	r3, r2
 80045f0:	83fb      	strh	r3, [r7, #30]
		break;
 80045f2:	e013      	b.n	800461c <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	83fb      	strh	r3, [r7, #30]
		break;
 80045f8:	e010      	b.n	800461c <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	b29a      	uxth	r2, r3
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <LCD_DrawString+0x128>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	889b      	ldrh	r3, [r3, #4]
 8004608:	fb12 f303 	smulbb	r3, r2, r3
 800460c:	b29a      	uxth	r2, r3
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	83fb      	strh	r3, [r7, #30]
		break;
 8004614:	e002      	b.n	800461c <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	83fb      	strh	r3, [r7, #30]
		break;
 800461a:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 800461c:	8bfb      	ldrh	r3, [r7, #30]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <LCD_DrawString+0xb6>
 8004622:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da16      	bge.n	8004658 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800462e:	e013      	b.n	8004658 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004638:	89b9      	ldrh	r1, [r7, #12]
 800463a:	8bf8      	ldrh	r0, [r7, #30]
 800463c:	f7ff ff6a 	bl	8004514 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004640:	4b16      	ldr	r3, [pc, #88]	; (800469c <LCD_DrawString+0x128>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	889a      	ldrh	r2, [r3, #4]
 8004646:	8bfb      	ldrh	r3, [r7, #30]
 8004648:	4413      	add	r3, r2
 800464a:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
		i++;
 8004652:	8bbb      	ldrh	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2da      	uxtb	r2, r3
 8004666:	8bbb      	ldrh	r3, [r7, #28]
 8004668:	490c      	ldr	r1, [pc, #48]	; (800469c <LCD_DrawString+0x128>)
 800466a:	6809      	ldr	r1, [r1, #0]
 800466c:	8889      	ldrh	r1, [r1, #4]
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004676:	b29b      	uxth	r3, r3
 8004678:	4908      	ldr	r1, [pc, #32]	; (800469c <LCD_DrawString+0x128>)
 800467a:	6809      	ldr	r1, [r1, #0]
 800467c:	8889      	ldrh	r1, [r1, #4]
 800467e:	428b      	cmp	r3, r1
 8004680:	bfac      	ite	ge
 8004682:	2301      	movge	r3, #1
 8004684:	2300      	movlt	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4013      	ands	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1cf      	bne.n	8004630 <LCD_DrawString+0xbc>
	}
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000374 	.word	0x20000374

080046a0 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b08b      	sub	sp, #44	; 0x2c
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60ba      	str	r2, [r7, #8]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	81fb      	strh	r3, [r7, #14]
 80046ae:	460b      	mov	r3, r1
 80046b0:	81bb      	strh	r3, [r7, #12]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	2300      	movs	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <DrawChar+0x144>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	88db      	ldrh	r3, [r3, #6]
 80046c4:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <DrawChar+0x144>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	889b      	ldrh	r3, [r3, #4]
 80046cc:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 80046ce:	8b3b      	ldrh	r3, [r7, #24]
 80046d0:	3307      	adds	r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da00      	bge.n	80046d8 <DrawChar+0x38>
 80046d6:	3307      	adds	r3, #7
 80046d8:	10db      	asrs	r3, r3, #3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	8b3b      	ldrh	r3, [r7, #24]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	e070      	b.n	80047d0 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80046ee:	8b3b      	ldrh	r3, [r7, #24]
 80046f0:	3307      	adds	r3, #7
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da00      	bge.n	80046f8 <DrawChar+0x58>
 80046f6:	3307      	adds	r3, #7
 80046f8:	10db      	asrs	r3, r3, #3
 80046fa:	461a      	mov	r2, r3
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	fb03 f302 	mul.w	r3, r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	4413      	add	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004708:	8b3b      	ldrh	r3, [r7, #24]
 800470a:	3307      	adds	r3, #7
 800470c:	2b00      	cmp	r3, #0
 800470e:	da00      	bge.n	8004712 <DrawChar+0x72>
 8004710:	3307      	adds	r3, #7
 8004712:	10db      	asrs	r3, r3, #3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d002      	beq.n	800471e <DrawChar+0x7e>
 8004718:	2b02      	cmp	r3, #2
 800471a:	d004      	beq.n	8004726 <DrawChar+0x86>
 800471c:	e00c      	b.n	8004738 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	61fb      	str	r3, [r7, #28]
			break;
 8004724:	e016      	b.n	8004754 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	3201      	adds	r2, #1
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	61fb      	str	r3, [r7, #28]
			break;
 8004736:	e00d      	b.n	8004754 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3301      	adds	r3, #1
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4313      	orrs	r3, r2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	3202      	adds	r2, #2
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	61fb      	str	r3, [r7, #28]
			break;
 8004752:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	e030      	b.n	80047bc <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 800475a:	8b3a      	ldrh	r2, [r7, #24]
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	4413      	add	r3, r2
 8004764:	3b01      	subs	r3, #1
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	461a      	mov	r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <DrawChar+0x148>)
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <DrawChar+0x14c>)
 800477c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800477e:	89ba      	ldrh	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	461c      	mov	r4, r3
 800478a:	89fa      	ldrh	r2, [r7, #14]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	4413      	add	r3, r2
 8004790:	4423      	add	r3, r4
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	440b      	add	r3, r1
 8004796:	b282      	uxth	r2, r0
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	e00c      	b.n	80047b6 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d109      	bne.n	80047b6 <DrawChar+0x116>
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	4413      	add	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	89ba      	ldrh	r2, [r7, #12]
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fe75 	bl	80044a0 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	3301      	adds	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	8b3b      	ldrh	r3, [r7, #24]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3ca      	bcc.n	800475a <DrawChar+0xba>
			}
		}
		Ypos++;
 80047c4:	89bb      	ldrh	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3301      	adds	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	8b7b      	ldrh	r3, [r7, #26]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d38a      	bcc.n	80046ee <DrawChar+0x4e>
	}

	__CleanDCache();
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	372c      	adds	r7, #44	; 0x2c
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000374 	.word	0x20000374
 80047e8:	20000368 	.word	0x20000368
 80047ec:	2000a1b0 	.word	0x2000a1b0

080047f0 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <LL_FillBuffer+0x68>)
 8004800:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004804:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <LL_FillBuffer+0x68>)
 8004808:	2202      	movs	r2, #2
 800480a:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <LL_FillBuffer+0x68>)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <LL_FillBuffer+0x68>)
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <LL_FillBuffer+0x6c>)
 8004816:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004818:	480f      	ldr	r0, [pc, #60]	; (8004858 <LL_FillBuffer+0x68>)
 800481a:	f002 fe8f 	bl	800753c <HAL_DMA2D_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d115      	bne.n	8004850 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004824:	2100      	movs	r1, #0
 8004826:	480c      	ldr	r0, [pc, #48]	; (8004858 <LL_FillBuffer+0x68>)
 8004828:	f003 f8f6 	bl	8007a18 <HAL_DMA2D_ConfigLayer>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10e      	bne.n	8004850 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	4806      	ldr	r0, [pc, #24]	; (8004858 <LL_FillBuffer+0x68>)
 800483e:	f002 fec7 	bl	80075d0 <HAL_DMA2D_Start>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004848:	210a      	movs	r1, #10
 800484a:	4803      	ldr	r0, [pc, #12]	; (8004858 <LL_FillBuffer+0x68>)
 800484c:	f002 feeb 	bl	8007626 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	2000a4c4 	.word	0x2000a4c4
 800485c:	4002b000 	.word	0x4002b000

08004860 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004878:	7d7b      	ldrb	r3, [r7, #21]
 800487a:	08db      	lsrs	r3, r3, #3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8004886:	7dbb      	ldrb	r3, [r7, #22]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	b2db      	uxtb	r3, r3
 800488c:	015b      	lsls	r3, r3, #5
 800488e:	b29b      	uxth	r3, r3
 8004890:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004894:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	02db      	lsls	r3, r3, #11
 800489e:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	8a3b      	ldrh	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	8a7b      	ldrh	r3, [r7, #18]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b29b      	uxth	r3, r3
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b090      	sub	sp, #64	; 0x40
 80048c0:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80048c8:	23eb      	movs	r3, #235	; 0xeb
 80048ca:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80048cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80048d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048d6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048d8:	2300      	movs	r3, #0
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80048e2:	230a      	movs	r3, #10
 80048e4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048ea:	2300      	movs	r3, #0
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80048fa:	463a      	mov	r2, r7
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	4806      	ldr	r0, [pc, #24]	; (800491c <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004904:	f006 ff6c 	bl	800b7e0 <HAL_QSPI_MemoryMapped>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3740      	adds	r7, #64	; 0x40
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2000a5d0 	.word	0x2000a5d0

08004920 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b090      	sub	sp, #64	; 0x40
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800492c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800492e:	2366      	movs	r3, #102	; 0x66
 8004930:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004936:	2300      	movs	r3, #0
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004946:	2300      	movs	r3, #0
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800494a:	2300      	movs	r3, #0
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f006 fd33 	bl	800b3c4 <HAL_QSPI_Command>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e019      	b.n	800499c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8004968:	2399      	movs	r3, #153	; 0x99
 800496a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f006 fd24 	bl	800b3c4 <HAL_QSPI_Command>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e00a      	b.n	800499c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004986:	f241 3188 	movw	r1, #5000	; 0x1388
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8c7 	bl	8004b1e <QSPI_AutoPollingMemReady>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3740      	adds	r7, #64	; 0x40
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b094      	sub	sp, #80	; 0x50
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80049b2:	2385      	movs	r3, #133	; 0x85
 80049b4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80049be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80049c8:	2301      	movs	r3, #1
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049d0:	2300      	movs	r3, #0
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049d4:	2300      	movs	r3, #0
 80049d6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049d8:	f107 0310 	add.w	r3, r7, #16
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f006 fcee 	bl	800b3c4 <HAL_QSPI_Command>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e048      	b.n	8004a84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049f2:	f107 030f 	add.w	r3, r7, #15
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f006 fdd6 	bl	800b5ae <HAL_QSPI_Receive>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e03b      	b.n	8004a84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f83d 	bl	8004a8c <QSPI_WriteEnable>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e033      	b.n	8004a84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004a1c:	2381      	movs	r3, #129	; 0x81
 8004a1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	b25a      	sxtb	r2, r3
 8004a2a:	23f0      	movs	r3, #240	; 0xf0
 8004a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	230a      	movs	r3, #10
 8004a42:	408b      	lsls	r3, r1
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f006 fcb3 	bl	800b3c4 <HAL_QSPI_Command>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e00d      	b.n	8004a84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a68:	f107 030f 	add.w	r3, r7, #15
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f006 fd04 	bl	800b480 <HAL_QSPI_Transmit>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3750      	adds	r7, #80	; 0x50
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b096      	sub	sp, #88	; 0x58
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a98:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004aba:	f107 0320 	add.w	r3, r7, #32
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f006 fc7d 	bl	800b3c4 <HAL_QSPI_Command>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e020      	b.n	8004b16 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004ae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aec:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004aee:	2305      	movs	r3, #5
 8004af0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004af8:	f107 0208 	add.w	r2, r7, #8
 8004afc:	f107 0120 	add.w	r1, r7, #32
 8004b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f006 fdf4 	bl	800b6f2 <HAL_QSPI_AutoPolling>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3758      	adds	r7, #88	; 0x58
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b096      	sub	sp, #88	; 0x58
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004b2e:	2305      	movs	r3, #5
 8004b30:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004b54:	2301      	movs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004b60:	2310      	movs	r3, #16
 8004b62:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004b64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b68:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004b6a:	f107 0208 	add.w	r2, r7, #8
 8004b6e:	f107 0120 	add.w	r1, r7, #32
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f006 fdbc 	bl	800b6f2 <HAL_QSPI_AutoPolling>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3758      	adds	r7, #88	; 0x58
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba4:	d005      	beq.n	8004bb2 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d001      	beq.n	8004bb2 <start_Audio_Processing+0x22>
		Error_Handler();
 8004bae:	f7fe f839 	bl	8002c24 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <start_Audio_Processing+0xb4>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	4a23      	ldr	r2, [pc, #140]	; (8004c44 <start_Audio_Processing+0xb4>)
 8004bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <start_Audio_Processing+0xb4>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004bca:	2034      	movs	r0, #52	; 0x34
 8004bcc:	f001 f820 	bl	8005c10 <wm8994_ReadID>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f648 1294 	movw	r2, #35220	; 0x8994
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d001      	beq.n	8004bde <start_Audio_Processing+0x4e>
 8004bda:	f7fe f823 	bl	8002c24 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004bde:	2034      	movs	r0, #52	; 0x34
 8004be0:	f001 f998 	bl	8005f14 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004be4:	887b      	ldrh	r3, [r7, #2]
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	b299      	uxth	r1, r3
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2264      	movs	r2, #100	; 0x64
 8004bf0:	2034      	movs	r0, #52	; 0x34
 8004bf2:	f000 f953 	bl	8004e9c <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d104      	bne.n	8004c08 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8004bfe:	214b      	movs	r1, #75	; 0x4b
 8004c00:	2034      	movs	r0, #52	; 0x34
 8004c02:	f001 f815 	bl	8005c30 <wm8994_SetVolume>
 8004c06:	e007      	b.n	8004c18 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d103      	bne.n	8004c18 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004c10:	21c8      	movs	r1, #200	; 0xc8
 8004c12:	2034      	movs	r0, #52	; 0x34
 8004c14:	f001 f80c 	bl	8005c30 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2034      	movs	r0, #52	; 0x34
 8004c1c:	f001 f92c 	bl	8005e78 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4807      	ldr	r0, [pc, #28]	; (8004c48 <start_Audio_Processing+0xb8>)
 8004c2a:	f009 f939 	bl	800dea0 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	4805      	ldr	r0, [pc, #20]	; (8004c4c <start_Audio_Processing+0xbc>)
 8004c38:	f009 f882 	bl	800dd40 <HAL_SAI_Transmit_DMA>

}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	20009d10 	.word	0x20009d10
 8004c4c:	20009f3c 	.word	0x20009f3c

08004c50 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <HAL_SAI_ErrorCallback+0x30>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <HAL_SAI_ErrorCallback+0x34>)
 8004c8a:	f014 fecb 	bl	8019a24 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004c8e:	e006      	b.n	8004c9e <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <HAL_SAI_ErrorCallback+0x38>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d102      	bne.n	8004c9e <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004c98:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <HAL_SAI_ErrorCallback+0x3c>)
 8004c9a:	f014 fec3 	bl	8019a24 <puts>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20009f3c 	.word	0x20009f3c
 8004cac:	0801b230 	.word	0x0801b230
 8004cb0:	20009d10 	.word	0x20009d10
 8004cb4:	0801b240 	.word	0x0801b240

08004cb8 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ccc:	2210      	movs	r2, #16
 8004cce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004cd0:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce0:	4923      	ldr	r1, [pc, #140]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ce2:	4824      	ldr	r0, [pc, #144]	; (8004d74 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004ce4:	f00a fb59 	bl	800f39a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f001 f9a1 	bl	8006030 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d0a:	4919      	ldr	r1, [pc, #100]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d0c:	4819      	ldr	r0, [pc, #100]	; (8004d74 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d0e:	f00a fb44 	bl	800f39a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d14:	2203      	movs	r2, #3
 8004d16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d20:	2208      	movs	r2, #8
 8004d22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d24:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d2e:	4910      	ldr	r1, [pc, #64]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d30:	4810      	ldr	r0, [pc, #64]	; (8004d74 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d32:	f00a fb32 	bl	800f39a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004d36:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004d3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d3e:	2204      	movs	r2, #4
 8004d40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d44:	2210      	movs	r2, #16
 8004d46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d58:	4905      	ldr	r1, [pc, #20]	; (8004d70 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d5a:	4806      	ldr	r0, [pc, #24]	; (8004d74 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d5c:	f00a fb1d 	bl	800f39a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4804      	ldr	r0, [pc, #16]	; (8004d74 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d64:	f00a fb44 	bl	800f3f0 <HAL_SDRAM_ProgramRefreshRate>
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000378 	.word	0x20000378
 8004d74:	2000a59c 	.word	0x2000a59c

08004d78 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004d7c:	20c8      	movs	r0, #200	; 0xc8
 8004d7e:	f001 f957 	bl	8006030 <HAL_Delay>

	TS_DisableIT();
 8004d82:	f000 f802 	bl	8004d8a <TS_DisableIT>

}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004d94:	2300      	movs	r3, #0
 8004d96:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	20a4      	movs	r0, #164	; 0xa4
 8004d9e:	f7ff faa3 	bl	80042e8 <TS_I2C_Write>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8004db0:	f001 fcfe 	bl	80067b0 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004db8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004dbc:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8004dbe:	231b      	movs	r3, #27
 8004dc0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004de2:	463b      	mov	r3, r7
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 fd1b 	bl	8006820 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004dee:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004df2:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8004df4:	2317      	movs	r3, #23
 8004df6:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e10:	2300      	movs	r3, #0
 8004e12:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e18:	463b      	mov	r3, r7
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fd00 	bl	8006820 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8004e24:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004e28:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8004e2a:	2316      	movs	r3, #22
 8004e2c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e46:	2300      	movs	r3, #0
 8004e48:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e4e:	463b      	mov	r3, r7
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fce5 	bl	8006820 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8004e5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004e5e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004e60:	2312      	movs	r3, #18
 8004e62:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e64:	2303      	movs	r3, #3
 8004e66:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004e74:	2301      	movs	r3, #1
 8004e76:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e84:	463b      	mov	r3, r7
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fcca 	bl	8006820 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004e8c:	2004      	movs	r0, #4
 8004e8e:	f001 fca7 	bl	80067e0 <HAL_MPU_Enable>

}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	81fb      	strh	r3, [r7, #14]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	81bb      	strh	r3, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004eb4:	89bb      	ldrh	r3, [r7, #12]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004eba:	89bb      	ldrh	r3, [r7, #12]
 8004ebc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ec0:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004ec6:	89fb      	ldrh	r3, [r7, #14]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2203      	movs	r2, #3
 8004ecc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 f83f 	bl	8005f54 <CODEC_IO_Write>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f640 0117 	movw	r1, #2071	; 0x817
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f832 	bl	8005f54 <CODEC_IO_Write>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f825 	bl	8005f54 <CODEC_IO_Write>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	226c      	movs	r2, #108	; 0x6c
 8004f1a:	2139      	movs	r1, #57	; 0x39
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 f819 	bl	8005f54 <CODEC_IO_Write>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004f2c:	8afb      	ldrh	r3, [r7, #22]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004f32:	89fb      	ldrh	r3, [r7, #14]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2213      	movs	r2, #19
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 f80a 	bl	8005f54 <CODEC_IO_Write>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e00b      	b.n	8004f64 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004f4c:	89fb      	ldrh	r3, [r7, #14]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2203      	movs	r2, #3
 8004f52:	2101      	movs	r1, #1
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fffd 	bl	8005f54 <CODEC_IO_Write>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004f64:	2032      	movs	r0, #50	; 0x32
 8004f66:	f001 f863 	bl	8006030 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004f6a:	8b3b      	ldrh	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 815f 	beq.w	8005230 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8004f72:	4bae      	ldr	r3, [pc, #696]	; (800522c <wm8994_Init+0x390>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004f78:	8b3b      	ldrh	r3, [r7, #24]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	f000 808c 	beq.w	8005098 <wm8994_Init+0x1fc>
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	f300 8111 	bgt.w	80051a8 <wm8994_Init+0x30c>
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d002      	beq.n	8004f90 <wm8994_Init+0xf4>
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d042      	beq.n	8005014 <wm8994_Init+0x178>
 8004f8e:	e10b      	b.n	80051a8 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004f98:	2105      	movs	r1, #5
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 ffda 	bl	8005f54 <CODEC_IO_Write>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004faa:	89fb      	ldrh	r3, [r7, #14]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f240 6101 	movw	r1, #1537	; 0x601
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 ffcd 	bl	8005f54 <CODEC_IO_Write>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004fc4:	89fb      	ldrh	r3, [r7, #14]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f240 6102 	movw	r1, #1538	; 0x602
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 ffc0 	bl	8005f54 <CODEC_IO_Write>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004fde:	89fb      	ldrh	r3, [r7, #14]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f240 6104 	movw	r1, #1540	; 0x604
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 ffb3 	bl	8005f54 <CODEC_IO_Write>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f240 6105 	movw	r1, #1541	; 0x605
 8005002:	4618      	mov	r0, r3
 8005004:	f000 ffa6 	bl	8005f54 <CODEC_IO_Write>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	61fb      	str	r3, [r7, #28]
      break;
 8005012:	e110      	b.n	8005236 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005014:	89fb      	ldrh	r3, [r7, #14]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f240 3203 	movw	r2, #771	; 0x303
 800501c:	2105      	movs	r1, #5
 800501e:	4618      	mov	r0, r3
 8005020:	f000 ff98 	bl	8005f54 <CODEC_IO_Write>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2201      	movs	r2, #1
 8005034:	f240 6101 	movw	r1, #1537	; 0x601
 8005038:	4618      	mov	r0, r3
 800503a:	f000 ff8b 	bl	8005f54 <CODEC_IO_Write>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2201      	movs	r2, #1
 800504e:	f240 6102 	movw	r1, #1538	; 0x602
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ff7e 	bl	8005f54 <CODEC_IO_Write>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2200      	movs	r2, #0
 8005068:	f240 6104 	movw	r1, #1540	; 0x604
 800506c:	4618      	mov	r0, r3
 800506e:	f000 ff71 	bl	8005f54 <CODEC_IO_Write>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2200      	movs	r2, #0
 8005082:	f240 6105 	movw	r1, #1541	; 0x605
 8005086:	4618      	mov	r0, r3
 8005088:	f000 ff64 	bl	8005f54 <CODEC_IO_Write>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	61fb      	str	r3, [r7, #28]
      break;
 8005096:	e0ce      	b.n	8005236 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005098:	8afb      	ldrh	r3, [r7, #22]
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d141      	bne.n	8005124 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80050a0:	89fb      	ldrh	r3, [r7, #14]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80050a8:	2105      	movs	r1, #5
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff52 	bl	8005f54 <CODEC_IO_Write>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2203      	movs	r2, #3
 80050c0:	f240 6101 	movw	r1, #1537	; 0x601
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 ff45 	bl	8005f54 <CODEC_IO_Write>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2203      	movs	r2, #3
 80050da:	f240 6102 	movw	r1, #1538	; 0x602
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 ff38 	bl	8005f54 <CODEC_IO_Write>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2203      	movs	r2, #3
 80050f4:	f240 6104 	movw	r1, #1540	; 0x604
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 ff2b 	bl	8005f54 <CODEC_IO_Write>
 80050fe:	4603      	mov	r3, r0
 8005100:	461a      	mov	r2, r3
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2203      	movs	r2, #3
 800510e:	f240 6105 	movw	r1, #1541	; 0x605
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ff1e 	bl	8005f54 <CODEC_IO_Write>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8005122:	e088      	b.n	8005236 <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005124:	89fb      	ldrh	r3, [r7, #14]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f640 720f 	movw	r2, #3855	; 0xf0f
 800512c:	2105      	movs	r1, #5
 800512e:	4618      	mov	r0, r3
 8005130:	f000 ff10 	bl	8005f54 <CODEC_IO_Write>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800513e:	89fb      	ldrh	r3, [r7, #14]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2201      	movs	r2, #1
 8005144:	f240 6101 	movw	r1, #1537	; 0x601
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ff03 	bl	8005f54 <CODEC_IO_Write>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2201      	movs	r2, #1
 800515e:	f240 6102 	movw	r1, #1538	; 0x602
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fef6 	bl	8005f54 <CODEC_IO_Write>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2202      	movs	r2, #2
 8005178:	f240 6104 	movw	r1, #1540	; 0x604
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fee9 	bl	8005f54 <CODEC_IO_Write>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800518c:	89fb      	ldrh	r3, [r7, #14]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2202      	movs	r2, #2
 8005192:	f240 6105 	movw	r1, #1541	; 0x605
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fedc 	bl	8005f54 <CODEC_IO_Write>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	61fb      	str	r3, [r7, #28]
      break;
 80051a6:	e046      	b.n	8005236 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80051a8:	89fb      	ldrh	r3, [r7, #14]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f240 3203 	movw	r2, #771	; 0x303
 80051b0:	2105      	movs	r1, #5
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fece 	bl	8005f54 <CODEC_IO_Write>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2201      	movs	r2, #1
 80051c8:	f240 6101 	movw	r1, #1537	; 0x601
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fec1 	bl	8005f54 <CODEC_IO_Write>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80051dc:	89fb      	ldrh	r3, [r7, #14]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2201      	movs	r2, #1
 80051e2:	f240 6102 	movw	r1, #1538	; 0x602
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 feb4 	bl	8005f54 <CODEC_IO_Write>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2200      	movs	r2, #0
 80051fc:	f240 6104 	movw	r1, #1540	; 0x604
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fea7 	bl	8005f54 <CODEC_IO_Write>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005210:	89fb      	ldrh	r3, [r7, #14]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2200      	movs	r2, #0
 8005216:	f240 6105 	movw	r1, #1541	; 0x605
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fe9a 	bl	8005f54 <CODEC_IO_Write>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	61fb      	str	r3, [r7, #28]
      break;
 800522a:	e004      	b.n	8005236 <wm8994_Init+0x39a>
 800522c:	20000388 	.word	0x20000388
    }
  }
  else
  {
    outputEnabled = 0;
 8005230:	4b99      	ldr	r3, [pc, #612]	; (8005498 <wm8994_Init+0x5fc>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8005236:	8afb      	ldrh	r3, [r7, #22]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 81ab 	beq.w	8005594 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 800523e:	4b97      	ldr	r3, [pc, #604]	; (800549c <wm8994_Init+0x600>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524a:	f000 8129 	beq.w	80054a0 <wm8994_Init+0x604>
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005252:	f300 819b 	bgt.w	800558c <wm8994_Init+0x6f0>
 8005256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525a:	d05a      	beq.n	8005312 <wm8994_Init+0x476>
 800525c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005260:	f300 8194 	bgt.w	800558c <wm8994_Init+0x6f0>
 8005264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005268:	f000 80c6 	beq.w	80053f8 <wm8994_Init+0x55c>
 800526c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005270:	f040 818c 	bne.w	800558c <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8005274:	89fb      	ldrh	r3, [r7, #14]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800527c:	2104      	movs	r1, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fe68 	bl	8005f54 <CODEC_IO_Write>
 8005284:	4603      	mov	r3, r0
 8005286:	461a      	mov	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800528e:	89fb      	ldrh	r3, [r7, #14]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	22db      	movs	r2, #219	; 0xdb
 8005294:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe5b 	bl	8005f54 <CODEC_IO_Write>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80052b0:	2102      	movs	r1, #2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fe4e 	bl	8005f54 <CODEC_IO_Write>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2202      	movs	r2, #2
 80052c8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fe41 	bl	8005f54 <CODEC_IO_Write>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2202      	movs	r2, #2
 80052e2:	f240 6109 	movw	r1, #1545	; 0x609
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fe34 	bl	8005f54 <CODEC_IO_Write>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	220e      	movs	r2, #14
 80052fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fe27 	bl	8005f54 <CODEC_IO_Write>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]
      break;
 8005310:	e143      	b.n	800559a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2211      	movs	r2, #17
 8005318:	2128      	movs	r1, #40	; 0x28
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe1a 	bl	8005f54 <CODEC_IO_Write>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800532a:	89fb      	ldrh	r3, [r7, #14]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2220      	movs	r2, #32
 8005330:	2129      	movs	r1, #41	; 0x29
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fe0e 	bl	8005f54 <CODEC_IO_Write>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2220      	movs	r2, #32
 8005348:	212a      	movs	r1, #42	; 0x2a
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fe02 	bl	8005f54 <CODEC_IO_Write>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800535a:	89fb      	ldrh	r3, [r7, #14]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f240 3203 	movw	r2, #771	; 0x303
 8005362:	2104      	movs	r1, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fdf5 	bl	8005f54 <CODEC_IO_Write>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	22db      	movs	r2, #219	; 0xdb
 800537a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fde8 	bl	8005f54 <CODEC_IO_Write>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800538e:	89fb      	ldrh	r3, [r7, #14]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f246 3250 	movw	r2, #25424	; 0x6350
 8005396:	2102      	movs	r1, #2
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fddb 	bl	8005f54 <CODEC_IO_Write>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2202      	movs	r2, #2
 80053ae:	f240 6106 	movw	r1, #1542	; 0x606
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fdce 	bl	8005f54 <CODEC_IO_Write>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80053c2:	89fb      	ldrh	r3, [r7, #14]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2202      	movs	r2, #2
 80053c8:	f240 6107 	movw	r1, #1543	; 0x607
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fdc1 	bl	8005f54 <CODEC_IO_Write>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	220d      	movs	r2, #13
 80053e2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fdb4 	bl	8005f54 <CODEC_IO_Write>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	61fb      	str	r3, [r7, #28]
      break;
 80053f6:	e0d0      	b.n	800559a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005400:	2104      	movs	r1, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fda6 	bl	8005f54 <CODEC_IO_Write>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005412:	89fb      	ldrh	r3, [r7, #14]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	22db      	movs	r2, #219	; 0xdb
 8005418:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fd99 	bl	8005f54 <CODEC_IO_Write>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f246 3250 	movw	r2, #25424	; 0x6350
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fd8c 	bl	8005f54 <CODEC_IO_Write>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2202      	movs	r2, #2
 800544c:	f240 6106 	movw	r1, #1542	; 0x606
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fd7f 	bl	8005f54 <CODEC_IO_Write>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2202      	movs	r2, #2
 8005466:	f240 6107 	movw	r1, #1543	; 0x607
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd72 	bl	8005f54 <CODEC_IO_Write>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800547a:	89fb      	ldrh	r3, [r7, #14]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	220d      	movs	r2, #13
 8005480:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fd65 	bl	8005f54 <CODEC_IO_Write>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
      break;
 8005494:	e081      	b.n	800559a <wm8994_Init+0x6fe>
 8005496:	bf00      	nop
 8005498:	20000388 	.word	0x20000388
 800549c:	2000038c 	.word	0x2000038c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f640 723c 	movw	r2, #3900	; 0xf3c
 80054a8:	2104      	movs	r1, #4
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fd52 	bl	8005f54 <CODEC_IO_Write>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80054ba:	89fb      	ldrh	r3, [r7, #14]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	22db      	movs	r2, #219	; 0xdb
 80054c0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fd45 	bl	8005f54 <CODEC_IO_Write>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80054d4:	89fb      	ldrh	r3, [r7, #14]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	22db      	movs	r2, #219	; 0xdb
 80054da:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd38 	bl	8005f54 <CODEC_IO_Write>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80054f6:	2102      	movs	r1, #2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fd2b 	bl	8005f54 <CODEC_IO_Write>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2202      	movs	r2, #2
 800550e:	f240 6106 	movw	r1, #1542	; 0x606
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fd1e 	bl	8005f54 <CODEC_IO_Write>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2202      	movs	r2, #2
 8005528:	f240 6107 	movw	r1, #1543	; 0x607
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fd11 	bl	8005f54 <CODEC_IO_Write>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2202      	movs	r2, #2
 8005542:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fd04 	bl	8005f54 <CODEC_IO_Write>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005556:	89fb      	ldrh	r3, [r7, #14]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2202      	movs	r2, #2
 800555c:	f240 6109 	movw	r1, #1545	; 0x609
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fcf7 	bl	8005f54 <CODEC_IO_Write>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	220d      	movs	r2, #13
 8005576:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fcea 	bl	8005f54 <CODEC_IO_Write>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	61fb      	str	r3, [r7, #28]
      break;
 800558a:	e006      	b.n	800559a <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      break;
 8005592:	e002      	b.n	800559a <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8005594:	4ba4      	ldr	r3, [pc, #656]	; (8005828 <wm8994_Init+0x98c>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4aa3      	ldr	r2, [pc, #652]	; (800582c <wm8994_Init+0x990>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d079      	beq.n	8005696 <wm8994_Init+0x7fa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4aa1      	ldr	r2, [pc, #644]	; (800582c <wm8994_Init+0x990>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	f200 80ad 	bhi.w	8005706 <wm8994_Init+0x86a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d061      	beq.n	800567a <wm8994_Init+0x7de>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80055bc:	4293      	cmp	r3, r2
 80055be:	f200 80a2 	bhi.w	8005706 <wm8994_Init+0x86a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f000 808e 	beq.w	80056ea <wm8994_Init+0x84e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80055d4:	4293      	cmp	r3, r2
 80055d6:	f200 8096 	bhi.w	8005706 <wm8994_Init+0x86a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80055e0:	d03d      	beq.n	800565e <wm8994_Init+0x7c2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80055e8:	f200 808d 	bhi.w	8005706 <wm8994_Init+0x86a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f245 6222 	movw	r2, #22050	; 0x5622
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d06b      	beq.n	80056ce <wm8994_Init+0x832>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f245 6222 	movw	r2, #22050	; 0x5622
 80055fc:	4293      	cmp	r3, r2
 80055fe:	f200 8082 	bhi.w	8005706 <wm8994_Init+0x86a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005608:	d01b      	beq.n	8005642 <wm8994_Init+0x7a6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005610:	d879      	bhi.n	8005706 <wm8994_Init+0x86a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005618:	d005      	beq.n	8005626 <wm8994_Init+0x78a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005620:	4293      	cmp	r3, r2
 8005622:	d046      	beq.n	80056b2 <wm8994_Init+0x816>
 8005624:	e06f      	b.n	8005706 <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005626:	89fb      	ldrh	r3, [r7, #14]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2203      	movs	r2, #3
 800562c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc8f 	bl	8005f54 <CODEC_IO_Write>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]
    break;
 8005640:	e06f      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2233      	movs	r2, #51	; 0x33
 8005648:	f44f 7104 	mov.w	r1, #528	; 0x210
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fc81 	bl	8005f54 <CODEC_IO_Write>
 8005652:	4603      	mov	r3, r0
 8005654:	461a      	mov	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	61fb      	str	r3, [r7, #28]
    break;
 800565c:	e061      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2263      	movs	r2, #99	; 0x63
 8005664:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fc73 	bl	8005f54 <CODEC_IO_Write>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	61fb      	str	r3, [r7, #28]
    break;
 8005678:	e053      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800567a:	89fb      	ldrh	r3, [r7, #14]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2283      	movs	r2, #131	; 0x83
 8005680:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fc65 	bl	8005f54 <CODEC_IO_Write>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]
    break;
 8005694:	e045      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005696:	89fb      	ldrh	r3, [r7, #14]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	22a3      	movs	r2, #163	; 0xa3
 800569c:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fc57 	bl	8005f54 <CODEC_IO_Write>
 80056a6:	4603      	mov	r3, r0
 80056a8:	461a      	mov	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
    break;
 80056b0:	e037      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2213      	movs	r2, #19
 80056b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fc49 	bl	8005f54 <CODEC_IO_Write>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	61fb      	str	r3, [r7, #28]
    break;
 80056cc:	e029      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2243      	movs	r2, #67	; 0x43
 80056d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc3b 	bl	8005f54 <CODEC_IO_Write>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]
    break;
 80056e8:	e01b      	b.n	8005722 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2273      	movs	r2, #115	; 0x73
 80056f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fc2d 	bl	8005f54 <CODEC_IO_Write>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]
    break;
 8005704:	e00d      	b.n	8005722 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005706:	89fb      	ldrh	r3, [r7, #14]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2283      	movs	r2, #131	; 0x83
 800570c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fc1f 	bl	8005f54 <CODEC_IO_Write>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
    break;
 8005720:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005728:	d10e      	bne.n	8005748 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 800572a:	89fb      	ldrh	r3, [r7, #14]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f244 0218 	movw	r2, #16408	; 0x4018
 8005732:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fc0c 	bl	8005f54 <CODEC_IO_Write>
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e00d      	b.n	8005764 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f244 0210 	movw	r2, #16400	; 0x4010
 8005750:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fbfd 	bl	8005f54 <CODEC_IO_Write>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2200      	movs	r2, #0
 800576a:	f240 3102 	movw	r1, #770	; 0x302
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fbf0 	bl	8005f54 <CODEC_IO_Write>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	220a      	movs	r2, #10
 8005784:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fbe3 	bl	8005f54 <CODEC_IO_Write>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8005798:	89fb      	ldrh	r3, [r7, #14]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2201      	movs	r2, #1
 800579e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fbd6 	bl	8005f54 <CODEC_IO_Write>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80057b2:	8b3b      	ldrh	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 817b 	beq.w	8005ab0 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80057ba:	8b3b      	ldrh	r3, [r7, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d157      	bne.n	8005870 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c8:	212d      	movs	r1, #45	; 0x2d
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fbc2 	bl	8005f54 <CODEC_IO_Write>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 80057da:	89fb      	ldrh	r3, [r7, #14]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057e2:	212e      	movs	r1, #46	; 0x2e
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fbb5 	bl	8005f54 <CODEC_IO_Write>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <wm8994_Init+0x994>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8005804:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fba3 	bl	8005f54 <CODEC_IO_Write>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <wm8994_Init+0x994>)
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 800581e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005822:	f000 fc05 	bl	8006030 <HAL_Delay>
 8005826:	e016      	b.n	8005856 <wm8994_Init+0x9ba>
 8005828:	2000038c 	.word	0x2000038c
 800582c:	00017700 	.word	0x00017700
 8005830:	20000010 	.word	0x20000010
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8005834:	89fb      	ldrh	r3, [r7, #14]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f248 1208 	movw	r2, #33032	; 0x8108
 800583c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fb87 	bl	8005f54 <CODEC_IO_Write>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8005850:	2032      	movs	r0, #50	; 0x32
 8005852:	f000 fbed 	bl	8006030 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8005856:	89fb      	ldrh	r3, [r7, #14]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2200      	movs	r2, #0
 800585c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fb77 	bl	8005f54 <CODEC_IO_Write>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005878:	2103      	movs	r1, #3
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fb6a 	bl	8005f54 <CODEC_IO_Write>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800588a:	89fb      	ldrh	r3, [r7, #14]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2200      	movs	r2, #0
 8005890:	2122      	movs	r1, #34	; 0x22
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb5e 	bl	8005f54 <CODEC_IO_Write>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80058a2:	89fb      	ldrh	r3, [r7, #14]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2200      	movs	r2, #0
 80058a8:	2123      	movs	r1, #35	; 0x23
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb52 	bl	8005f54 <CODEC_IO_Write>
 80058b0:	4603      	mov	r3, r0
 80058b2:	461a      	mov	r2, r3
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80058c2:	2136      	movs	r1, #54	; 0x36
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fb45 	bl	8005f54 <CODEC_IO_Write>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f243 0203 	movw	r2, #12291	; 0x3003
 80058dc:	2101      	movs	r1, #1
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb38 	bl	8005f54 <CODEC_IO_Write>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f4:	d10d      	bne.n	8005912 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80058f6:	89fb      	ldrh	r3, [r7, #14]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f240 2205 	movw	r2, #517	; 0x205
 80058fe:	2151      	movs	r1, #81	; 0x51
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb27 	bl	8005f54 <CODEC_IO_Write>
 8005906:	4603      	mov	r3, r0
 8005908:	461a      	mov	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e00b      	b.n	800592a <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 8005912:	89fb      	ldrh	r3, [r7, #14]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2205      	movs	r2, #5
 8005918:	2151      	movs	r1, #81	; 0x51
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fb1a 	bl	8005f54 <CODEC_IO_Write>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800592a:	8b7b      	ldrh	r3, [r7, #26]
 800592c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005930:	f043 0303 	orr.w	r3, r3, #3
 8005934:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	8b7a      	ldrh	r2, [r7, #26]
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fb08 	bl	8005f54 <CODEC_IO_Write>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2222      	movs	r2, #34	; 0x22
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fafc 	bl	8005f54 <CODEC_IO_Write>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f649 7225 	movw	r2, #40741	; 0x9f25
 800596e:	214c      	movs	r1, #76	; 0x4c
 8005970:	4618      	mov	r0, r3
 8005972:	f000 faef 	bl	8005f54 <CODEC_IO_Write>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8005980:	200f      	movs	r0, #15
 8005982:	f000 fb55 	bl	8006030 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2201      	movs	r2, #1
 800598c:	212d      	movs	r1, #45	; 0x2d
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fae0 	bl	8005f54 <CODEC_IO_Write>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2201      	movs	r2, #1
 80059a4:	212e      	movs	r1, #46	; 0x2e
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fad4 	bl	8005f54 <CODEC_IO_Write>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f44f 724c 	mov.w	r2, #816	; 0x330
 80059be:	2103      	movs	r1, #3
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fac7 	bl	8005f54 <CODEC_IO_Write>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80059d0:	89fb      	ldrh	r3, [r7, #14]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2233      	movs	r2, #51	; 0x33
 80059d6:	2154      	movs	r1, #84	; 0x54
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fabb 	bl	8005f54 <CODEC_IO_Write>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 80059e8:	f240 1001 	movw	r0, #257	; 0x101
 80059ec:	f000 fb20 	bl	8006030 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	22ee      	movs	r2, #238	; 0xee
 80059f6:	2160      	movs	r1, #96	; 0x60
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 faab 	bl	8005f54 <CODEC_IO_Write>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	22c0      	movs	r2, #192	; 0xc0
 8005a0e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fa9e 	bl	8005f54 <CODEC_IO_Write>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8005a22:	89fb      	ldrh	r3, [r7, #14]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	22c0      	movs	r2, #192	; 0xc0
 8005a28:	f240 6111 	movw	r1, #1553	; 0x611
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fa91 	bl	8005f54 <CODEC_IO_Write>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005a3c:	89fb      	ldrh	r3, [r7, #14]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2210      	movs	r2, #16
 8005a42:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fa84 	bl	8005f54 <CODEC_IO_Write>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	22c0      	movs	r2, #192	; 0xc0
 8005a5c:	f240 6112 	movw	r1, #1554	; 0x612
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fa77 	bl	8005f54 <CODEC_IO_Write>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8005a70:	89fb      	ldrh	r3, [r7, #14]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	22c0      	movs	r2, #192	; 0xc0
 8005a76:	f240 6113 	movw	r1, #1555	; 0x613
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa6a 	bl	8005f54 <CODEC_IO_Write>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005a8a:	89fb      	ldrh	r3, [r7, #14]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2210      	movs	r2, #16
 8005a90:	f240 4122 	movw	r1, #1058	; 0x422
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fa5d 	bl	8005f54 <CODEC_IO_Write>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005aa4:	7afa      	ldrb	r2, [r7, #11]
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f8c0 	bl	8005c30 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80a6 	beq.w	8005c04 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abe:	d003      	beq.n	8005ac8 <wm8994_Init+0xc2c>
 8005ac0:	8afb      	ldrh	r3, [r7, #22]
 8005ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac6:	d12b      	bne.n	8005b20 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005ac8:	8b7b      	ldrh	r3, [r7, #26]
 8005aca:	f043 0313 	orr.w	r3, r3, #19
 8005ace:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005ad0:	89fb      	ldrh	r3, [r7, #14]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	8b7a      	ldrh	r2, [r7, #26]
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fa3b 	bl	8005f54 <CODEC_IO_Write>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2202      	movs	r2, #2
 8005aee:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fa2e 	bl	8005f54 <CODEC_IO_Write>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b0a:	f240 4111 	movw	r1, #1041	; 0x411
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fa20 	bl	8005f54 <CODEC_IO_Write>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e06b      	b.n	8005bf8 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005b20:	8afb      	ldrh	r3, [r7, #22]
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d139      	bne.n	8005b9c <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005b28:	8b7b      	ldrh	r3, [r7, #26]
 8005b2a:	f043 0313 	orr.w	r3, r3, #19
 8005b2e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	8b7a      	ldrh	r2, [r7, #26]
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa0b 	bl	8005f54 <CODEC_IO_Write>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005b48:	89fb      	ldrh	r3, [r7, #14]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f9fe 	bl	8005f54 <CODEC_IO_Write>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005b62:	89fb      	ldrh	r3, [r7, #14]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005b6a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f9f0 	bl	8005f54 <CODEC_IO_Write>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005b86:	f240 4111 	movw	r1, #1041	; 0x411
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f9e2 	bl	8005f54 <CODEC_IO_Write>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e02d      	b.n	8005bf8 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba2:	d003      	beq.n	8005bac <wm8994_Init+0xd10>
 8005ba4:	8afb      	ldrh	r3, [r7, #22]
 8005ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005baa:	d125      	bne.n	8005bf8 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	220b      	movs	r2, #11
 8005bb2:	2118      	movs	r1, #24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f9cd 	bl	8005f54 <CODEC_IO_Write>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	220b      	movs	r2, #11
 8005bca:	211a      	movs	r1, #26
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f9c1 	bl	8005f54 <CODEC_IO_Write>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005bdc:	89fb      	ldrh	r3, [r7, #14]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005be4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f9b3 	bl	8005f54 <CODEC_IO_Write>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005bf8:	7afa      	ldrb	r2, [r7, #11]
 8005bfa:	89fb      	ldrh	r3, [r7, #14]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f816 	bl	8005c30 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005c04:	69fb      	ldr	r3, [r7, #28]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop

08005c10 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fb35 	bl	8004290 <AUDIO_I2C_Read>
 8005c26:	4603      	mov	r3, r0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	460a      	mov	r2, r1
 8005c3a:	80fb      	strh	r3, [r7, #6]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005c44:	797b      	ldrb	r3, [r7, #5]
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d80b      	bhi.n	8005c62 <wm8994_SetVolume+0x32>
 8005c4a:	797a      	ldrb	r2, [r7, #5]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	019b      	lsls	r3, r3, #6
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	4a86      	ldr	r2, [pc, #536]	; (8005e6c <wm8994_SetVolume+0x23c>)
 8005c54:	fb82 1203 	smull	r1, r2, r2, r3
 8005c58:	1152      	asrs	r2, r2, #5
 8005c5a:	17db      	asrs	r3, r3, #31
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e000      	b.n	8005c64 <wm8994_SetVolume+0x34>
 8005c62:	2364      	movs	r3, #100	; 0x64
 8005c64:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005c66:	4b82      	ldr	r3, [pc, #520]	; (8005e70 <wm8994_SetVolume+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 809b 	beq.w	8005da6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	2b3e      	cmp	r3, #62	; 0x3e
 8005c74:	d93d      	bls.n	8005cf2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f8fc 	bl	8005e78 <wm8994_SetMute>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f240 127f 	movw	r2, #383	; 0x17f
 8005c90:	211c      	movs	r1, #28
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f95e 	bl	8005f54 <CODEC_IO_Write>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f240 127f 	movw	r2, #383	; 0x17f
 8005caa:	211d      	movs	r1, #29
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f951 	bl	8005f54 <CODEC_IO_Write>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f240 127f 	movw	r2, #383	; 0x17f
 8005cc4:	2126      	movs	r1, #38	; 0x26
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f944 	bl	8005f54 <CODEC_IO_Write>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f240 127f 	movw	r2, #383	; 0x17f
 8005cde:	2127      	movs	r1, #39	; 0x27
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f937 	bl	8005f54 <CODEC_IO_Write>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e059      	b.n	8005da6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005cf2:	797b      	ldrb	r3, [r7, #5]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f8bb 	bl	8005e78 <wm8994_SetMute>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e04c      	b.n	8005da6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f8b1 	bl	8005e78 <wm8994_SetMute>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	b2d8      	uxtb	r0, r3
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d2a:	b21b      	sxth	r3, r3
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	211c      	movs	r1, #28
 8005d32:	f000 f90f 	bl	8005f54 <CODEC_IO_Write>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	b2d8      	uxtb	r0, r3
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	211d      	movs	r1, #29
 8005d54:	f000 f8fe 	bl	8005f54 <CODEC_IO_Write>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	b2d8      	uxtb	r0, r3
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	2126      	movs	r1, #38	; 0x26
 8005d76:	f000 f8ed 	bl	8005f54 <CODEC_IO_Write>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	b2d8      	uxtb	r0, r3
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	2127      	movs	r1, #39	; 0x27
 8005d98:	f000 f8dc 	bl	8005f54 <CODEC_IO_Write>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005da6:	4b33      	ldr	r3, [pc, #204]	; (8005e74 <wm8994_SetVolume+0x244>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d059      	beq.n	8005e62 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005dae:	797b      	ldrb	r3, [r7, #5]
 8005db0:	2b63      	cmp	r3, #99	; 0x63
 8005db2:	d80c      	bhi.n	8005dce <wm8994_SetVolume+0x19e>
 8005db4:	797a      	ldrb	r2, [r7, #5]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	4a2b      	ldr	r2, [pc, #172]	; (8005e6c <wm8994_SetVolume+0x23c>)
 8005dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8005dc4:	1152      	asrs	r2, r2, #5
 8005dc6:	17db      	asrs	r3, r3, #31
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e000      	b.n	8005dd0 <wm8994_SetVolume+0x1a0>
 8005dce:	23ef      	movs	r3, #239	; 0xef
 8005dd0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	b2d8      	uxtb	r0, r3
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005de8:	f000 f8b4 	bl	8005f54 <CODEC_IO_Write>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	b2d8      	uxtb	r0, r3
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	b21b      	sxth	r3, r3
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	f240 4101 	movw	r1, #1025	; 0x401
 8005e0c:	f000 f8a2 	bl	8005f54 <CODEC_IO_Write>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	b2d8      	uxtb	r0, r3
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f240 4104 	movw	r1, #1028	; 0x404
 8005e30:	f000 f890 	bl	8005f54 <CODEC_IO_Write>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	b2d8      	uxtb	r0, r3
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f240 4105 	movw	r1, #1029	; 0x405
 8005e54:	f000 f87e 	bl	8005f54 <CODEC_IO_Write>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005e62:	68fb      	ldr	r3, [r7, #12]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	51eb851f 	.word	0x51eb851f
 8005e70:	20000388 	.word	0x20000388
 8005e74:	2000038c 	.word	0x2000038c

08005e78 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005e88:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <wm8994_SetMute+0x98>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d039      	beq.n	8005f04 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d11c      	bne.n	8005ed0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f856 	bl	8005f54 <CODEC_IO_Write>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eba:	f240 4122 	movw	r1, #1058	; 0x422
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f848 	bl	8005f54 <CODEC_IO_Write>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e019      	b.n	8005f04 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f83a 	bl	8005f54 <CODEC_IO_Write>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2210      	movs	r2, #16
 8005ef0:	f240 4122 	movw	r1, #1058	; 0x422
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f82d 	bl	8005f54 <CODEC_IO_Write>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005f04:	68fb      	ldr	r3, [r7, #12]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000388 	.word	0x20000388

08005f14 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2200      	movs	r2, #0
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f812 	bl	8005f54 <CODEC_IO_Write>
 8005f30:	4603      	mov	r3, r0
 8005f32:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <wm8994_Reset+0x38>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <wm8994_Reset+0x3c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

  return counter;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000388 	.word	0x20000388
 8005f50:	2000038c 	.word	0x2000038c

08005f54 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	80bb      	strh	r3, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8005f6a:	887a      	ldrh	r2, [r7, #2]
 8005f6c:	88b9      	ldrh	r1, [r7, #4]
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe f963 	bl	800423c <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b2db      	uxtb	r3, r3
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f88:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f8a:	490e      	ldr	r1, [pc, #56]	; (8005fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	; (8005fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f90:	e002      	b.n	8005f98 <LoopCopyDataInit>

08005f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f96:	3304      	adds	r3, #4

08005f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f9c:	d3f9      	bcc.n	8005f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f9e:	4a0b      	ldr	r2, [pc, #44]	; (8005fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fa0:	4c0b      	ldr	r4, [pc, #44]	; (8005fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fa4:	e001      	b.n	8005faa <LoopFillZerobss>

08005fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fa8:	3204      	adds	r2, #4

08005faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fac:	d3fb      	bcc.n	8005fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005fae:	f7fd ffcf 	bl	8003f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fb2:	f013 fba7 	bl	8019704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fb6:	f7fb faa9 	bl	800150c <main>
  bx  lr    
 8005fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005fbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fc4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8005fc8:	08030704 	.word	0x08030704
  ldr r2, =_sbss
 8005fcc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005fd0:	2004add0 	.word	0x2004add0

08005fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fd4:	e7fe      	b.n	8005fd4 <ADC_IRQHandler>

08005fd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fda:	2003      	movs	r0, #3
 8005fdc:	f000 fba5 	bl	800672a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f7fd fe41 	bl	8003c68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005fe6:	f7fc fe25 	bl	8002c34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_IncTick+0x20>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_IncTick+0x24>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4413      	add	r3, r2
 8006000:	4a04      	ldr	r2, [pc, #16]	; (8006014 <HAL_IncTick+0x24>)
 8006002:	6013      	str	r3, [r2, #0]
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000028 	.word	0x20000028
 8006014:	2004a268 	.word	0x2004a268

08006018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return uwTick;
 800601c:	4b03      	ldr	r3, [pc, #12]	; (800602c <HAL_GetTick+0x14>)
 800601e:	681b      	ldr	r3, [r3, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	2004a268 	.word	0x2004a268

08006030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006038:	f7ff ffee 	bl	8006018 <HAL_GetTick>
 800603c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006048:	d005      	beq.n	8006056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_Delay+0x44>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006056:	bf00      	nop
 8006058:	f7ff ffde 	bl	8006018 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	429a      	cmp	r2, r3
 8006066:	d8f7      	bhi.n	8006058 <HAL_Delay+0x28>
  {
  }
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000028 	.word	0x20000028

08006078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e031      	b.n	80060f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc fdf4 	bl	8002c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d116      	bne.n	80060e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <HAL_ADC_Init+0x84>)
 80060bc:	4013      	ands	r3, r2
 80060be:	f043 0202 	orr.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f964 	bl	8006394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
 80060e2:	e001      	b.n	80060e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	ffffeefd 	.word	0xffffeefd

08006100 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e12a      	b.n	8006372 <HAL_ADC_ConfigChannel+0x272>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b09      	cmp	r3, #9
 800612a:	d93a      	bls.n	80061a2 <HAL_ADC_ConfigChannel+0xa2>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006134:	d035      	beq.n	80061a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	3b1e      	subs	r3, #30
 800614c:	2207      	movs	r2, #7
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	400a      	ands	r2, r1
 800615a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a87      	ldr	r2, [pc, #540]	; (8006380 <HAL_ADC_ConfigChannel+0x280>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10a      	bne.n	800617c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68d9      	ldr	r1, [r3, #12]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	061a      	lsls	r2, r3, #24
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800617a:	e035      	b.n	80061e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68d9      	ldr	r1, [r3, #12]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	4618      	mov	r0, r3
 800618e:	4603      	mov	r3, r0
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4403      	add	r3, r0
 8006194:	3b1e      	subs	r3, #30
 8006196:	409a      	lsls	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061a0:	e022      	b.n	80061e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6919      	ldr	r1, [r3, #16]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	2207      	movs	r2, #7
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43da      	mvns	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	400a      	ands	r2, r1
 80061c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6919      	ldr	r1, [r3, #16]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4618      	mov	r0, r3
 80061d8:	4603      	mov	r3, r0
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4403      	add	r3, r0
 80061de:	409a      	lsls	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b06      	cmp	r3, #6
 80061ee:	d824      	bhi.n	800623a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	3b05      	subs	r3, #5
 8006202:	221f      	movs	r2, #31
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43da      	mvns	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	400a      	ands	r2, r1
 8006210:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	4618      	mov	r0, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	3b05      	subs	r3, #5
 800622c:	fa00 f203 	lsl.w	r2, r0, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	635a      	str	r2, [r3, #52]	; 0x34
 8006238:	e04c      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d824      	bhi.n	800628c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	3b23      	subs	r3, #35	; 0x23
 8006254:	221f      	movs	r2, #31
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	400a      	ands	r2, r1
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	4618      	mov	r0, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	3b23      	subs	r3, #35	; 0x23
 800627e:	fa00 f203 	lsl.w	r2, r0, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
 800628a:	e023      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	3b41      	subs	r3, #65	; 0x41
 800629e:	221f      	movs	r2, #31
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43da      	mvns	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	400a      	ands	r2, r1
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4618      	mov	r0, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	3b41      	subs	r3, #65	; 0x41
 80062c8:	fa00 f203 	lsl.w	r2, r0, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_ADC_ConfigChannel+0x284>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10a      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x1f4>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e6:	d105      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80062e8:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a26      	ldr	r2, [pc, #152]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 80062ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80062f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_ADC_ConfigChannel+0x284>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d109      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x212>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b12      	cmp	r3, #18
 8006304:	d105      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 800630c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006310:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <HAL_ADC_ConfigChannel+0x284>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d125      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x268>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <HAL_ADC_ConfigChannel+0x280>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <HAL_ADC_ConfigChannel+0x22e>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b11      	cmp	r3, #17
 800632c:	d11c      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800632e:	4b16      	ldr	r3, [pc, #88]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <HAL_ADC_ConfigChannel+0x288>)
 8006334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006338:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <HAL_ADC_ConfigChannel+0x280>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d111      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <HAL_ADC_ConfigChannel+0x28c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a11      	ldr	r2, [pc, #68]	; (8006390 <HAL_ADC_ConfigChannel+0x290>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0c9a      	lsrs	r2, r3, #18
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800635a:	e002      	b.n	8006362 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3b01      	subs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f9      	bne.n	800635c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	10000012 	.word	0x10000012
 8006384:	40012000 	.word	0x40012000
 8006388:	40012300 	.word	0x40012300
 800638c:	20000008 	.word	0x20000008
 8006390:	431bde83 	.word	0x431bde83

08006394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800639c:	4b78      	ldr	r3, [pc, #480]	; (8006580 <ADC_Init+0x1ec>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a77      	ldr	r2, [pc, #476]	; (8006580 <ADC_Init+0x1ec>)
 80063a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80063a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80063a8:	4b75      	ldr	r3, [pc, #468]	; (8006580 <ADC_Init+0x1ec>)
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4973      	ldr	r1, [pc, #460]	; (8006580 <ADC_Init+0x1ec>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6859      	ldr	r1, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	021a      	lsls	r2, r3, #8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6859      	ldr	r1, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6899      	ldr	r1, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	4a58      	ldr	r2, [pc, #352]	; (8006584 <ADC_Init+0x1f0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006436:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6899      	ldr	r1, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6899      	ldr	r1, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	e00f      	b.n	800648e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800647c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800648c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0202 	bic.w	r2, r2, #2
 800649c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6899      	ldr	r1, [r3, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	005a      	lsls	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	3b01      	subs	r3, #1
 80064e8:	035a      	lsls	r2, r3, #13
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	e007      	b.n	8006504 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006502:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	3b01      	subs	r3, #1
 8006520:	051a      	lsls	r2, r3, #20
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6899      	ldr	r1, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006546:	025a      	lsls	r2, r3, #9
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	029a      	lsls	r2, r3, #10
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40012300 	.word	0x40012300
 8006584:	0f000001 	.word	0x0f000001

08006588 <__NVIC_SetPriorityGrouping>:
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006598:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <__NVIC_SetPriorityGrouping+0x40>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065a4:	4013      	ands	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <__NVIC_SetPriorityGrouping+0x44>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <__NVIC_SetPriorityGrouping+0x40>)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	60d3      	str	r3, [r2, #12]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	e000ed00 	.word	0xe000ed00
 80065cc:	05fa0000 	.word	0x05fa0000

080065d0 <__NVIC_GetPriorityGrouping>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <__NVIC_GetPriorityGrouping+0x18>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	f003 0307 	and.w	r3, r3, #7
}
 80065de:	4618      	mov	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	e000ed00 	.word	0xe000ed00

080065ec <__NVIC_EnableIRQ>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	db0b      	blt.n	8006616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	f003 021f 	and.w	r2, r3, #31
 8006604:	4907      	ldr	r1, [pc, #28]	; (8006624 <__NVIC_EnableIRQ+0x38>)
 8006606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2001      	movs	r0, #1
 800660e:	fa00 f202 	lsl.w	r2, r0, r2
 8006612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	e000e100 	.word	0xe000e100

08006628 <__NVIC_DisableIRQ>:
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006636:	2b00      	cmp	r3, #0
 8006638:	db12      	blt.n	8006660 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	f003 021f 	and.w	r2, r3, #31
 8006640:	490a      	ldr	r1, [pc, #40]	; (800666c <__NVIC_DisableIRQ+0x44>)
 8006642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2001      	movs	r0, #1
 800664a:	fa00 f202 	lsl.w	r2, r0, r2
 800664e:	3320      	adds	r3, #32
 8006650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006654:	f3bf 8f4f 	dsb	sy
}
 8006658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800665a:	f3bf 8f6f 	isb	sy
}
 800665e:	bf00      	nop
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000e100 	.word	0xe000e100

08006670 <__NVIC_SetPriority>:
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	6039      	str	r1, [r7, #0]
 800667a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006680:	2b00      	cmp	r3, #0
 8006682:	db0a      	blt.n	800669a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	490c      	ldr	r1, [pc, #48]	; (80066bc <__NVIC_SetPriority+0x4c>)
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	0112      	lsls	r2, r2, #4
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	440b      	add	r3, r1
 8006694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006698:	e00a      	b.n	80066b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	4908      	ldr	r1, [pc, #32]	; (80066c0 <__NVIC_SetPriority+0x50>)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	3b04      	subs	r3, #4
 80066a8:	0112      	lsls	r2, r2, #4
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	440b      	add	r3, r1
 80066ae:	761a      	strb	r2, [r3, #24]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	e000e100 	.word	0xe000e100
 80066c0:	e000ed00 	.word	0xe000ed00

080066c4 <NVIC_EncodePriority>:
{
 80066c4:	b480      	push	{r7}
 80066c6:	b089      	sub	sp, #36	; 0x24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	bf28      	it	cs
 80066e2:	2304      	movcs	r3, #4
 80066e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d902      	bls.n	80066f4 <NVIC_EncodePriority+0x30>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3b03      	subs	r3, #3
 80066f2:	e000      	b.n	80066f6 <NVIC_EncodePriority+0x32>
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43da      	mvns	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	401a      	ands	r2, r3
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800670c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	fa01 f303 	lsl.w	r3, r1, r3
 8006716:	43d9      	mvns	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800671c:	4313      	orrs	r3, r2
}
 800671e:	4618      	mov	r0, r3
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff ff28 	bl	8006588 <__NVIC_SetPriorityGrouping>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006752:	f7ff ff3d 	bl	80065d0 <__NVIC_GetPriorityGrouping>
 8006756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	6978      	ldr	r0, [r7, #20]
 800675e:	f7ff ffb1 	bl	80066c4 <NVIC_EncodePriority>
 8006762:	4602      	mov	r2, r0
 8006764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006768:	4611      	mov	r1, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff ff80 	bl	8006670 <__NVIC_SetPriority>
}
 8006770:	bf00      	nop
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff30 	bl	80065ec <__NVIC_EnableIRQ>
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800679e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff ff40 	bl	8006628 <__NVIC_DisableIRQ>
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80067b4:	f3bf 8f5f 	dmb	sy
}
 80067b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80067ba:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <HAL_MPU_Disable+0x28>)
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <HAL_MPU_Disable+0x28>)
 80067c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_MPU_Disable+0x2c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	e000ed00 	.word	0xe000ed00
 80067dc:	e000ed90 	.word	0xe000ed90

080067e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80067e8:	4a0b      	ldr	r2, [pc, #44]	; (8006818 <HAL_MPU_Enable+0x38>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <HAL_MPU_Enable+0x3c>)
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <HAL_MPU_Enable+0x3c>)
 80067f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80067fe:	f3bf 8f4f 	dsb	sy
}
 8006802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006804:	f3bf 8f6f 	isb	sy
}
 8006808:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000ed90 	.word	0xe000ed90
 800681c:	e000ed00 	.word	0xe000ed00

08006820 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	785a      	ldrb	r2, [r3, #1]
 800682c:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <HAL_MPU_ConfigRegion+0x84>)
 800682e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d029      	beq.n	800688c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <HAL_MPU_ConfigRegion+0x84>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7b1b      	ldrb	r3, [r3, #12]
 8006844:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7adb      	ldrb	r3, [r3, #11]
 800684a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800684c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7a9b      	ldrb	r3, [r3, #10]
 8006852:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7b5b      	ldrb	r3, [r3, #13]
 800685a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800685c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7b9b      	ldrb	r3, [r3, #14]
 8006862:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7bdb      	ldrb	r3, [r3, #15]
 800686a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800686c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7a5b      	ldrb	r3, [r3, #9]
 8006872:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7a1b      	ldrb	r3, [r3, #8]
 800687a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800687c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006884:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006886:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006888:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800688a:	e005      	b.n	8006898 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_MPU_ConfigRegion+0x84>)
 800688e:	2200      	movs	r2, #0
 8006890:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <HAL_MPU_ConfigRegion+0x84>)
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	e000ed90 	.word	0xe000ed90

080068a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e054      	b.n	8006964 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7f5b      	ldrb	r3, [r3, #29]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d105      	bne.n	80068d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fc fa34 	bl	8002d38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10c      	bne.n	80068f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a22      	ldr	r2, [pc, #136]	; (800696c <HAL_CRC_Init+0xc4>)
 80068e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0218 	bic.w	r2, r2, #24
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	e00c      	b.n	8006912 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6899      	ldr	r1, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	461a      	mov	r2, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f834 	bl	8006970 <HAL_CRCEx_Polynomial_Set>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e028      	b.n	8006964 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	795b      	ldrb	r3, [r3, #5]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d105      	bne.n	8006926 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006922:	611a      	str	r2, [r3, #16]
 8006924:	e004      	b.n	8006930 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6912      	ldr	r2, [r2, #16]
 800692e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	04c11db7 	.word	0x04c11db7

08006970 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006980:	231f      	movs	r3, #31
 8006982:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006984:	bf00      	nop
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1e5a      	subs	r2, r3, #1
 800698a:	613a      	str	r2, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d009      	beq.n	80069a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_CRCEx_Polynomial_Set+0x16>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	d846      	bhi.n	8006a38 <HAL_CRCEx_Polynomial_Set+0xc8>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	08006a3f 	.word	0x08006a3f
 80069b4:	08006a39 	.word	0x08006a39
 80069b8:	08006a39 	.word	0x08006a39
 80069bc:	08006a39 	.word	0x08006a39
 80069c0:	08006a39 	.word	0x08006a39
 80069c4:	08006a39 	.word	0x08006a39
 80069c8:	08006a39 	.word	0x08006a39
 80069cc:	08006a39 	.word	0x08006a39
 80069d0:	08006a2d 	.word	0x08006a2d
 80069d4:	08006a39 	.word	0x08006a39
 80069d8:	08006a39 	.word	0x08006a39
 80069dc:	08006a39 	.word	0x08006a39
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a39 	.word	0x08006a39
 80069f0:	08006a21 	.word	0x08006a21
 80069f4:	08006a39 	.word	0x08006a39
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a39 	.word	0x08006a39
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a15 	.word	0x08006a15
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d913      	bls.n	8006a42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a1e:	e010      	b.n	8006a42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b07      	cmp	r3, #7
 8006a24:	d90f      	bls.n	8006a46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a2a:	e00c      	b.n	8006a46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b0f      	cmp	r3, #15
 8006a30:	d90b      	bls.n	8006a4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a36:	e008      	b.n	8006a4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	e006      	b.n	8006a4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a3e:	bf00      	nop
 8006a40:	e004      	b.n	8006a4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 0118 	bic.w	r1, r3, #24
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e069      	b.n	8006b62 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fc f96c 	bl	8002d78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b2a      	ldr	r3, [pc, #168]	; (8006b6c <HAL_DCMI_Init+0xf0>)
 8006ac2:	400b      	ands	r3, r1
 8006ac4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6819      	ldr	r1, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ada:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ae6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006af2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006afe:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b0a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d112      	bne.n	8006b42 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7f1b      	ldrb	r3, [r3, #28]
 8006b20:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7f5b      	ldrb	r3, [r3, #29]
 8006b26:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b28:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7f9b      	ldrb	r3, [r3, #30]
 8006b2e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006b30:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7fdb      	ldrb	r3, [r3, #31]
 8006b38:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006b3e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b40:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 021e 	orr.w	r2, r2, #30
 8006b50:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	ffe0f007 	.word	0xffe0f007

08006b70 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	f043 0202 	orr.w	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	4a35      	ldr	r2, [pc, #212]	; (8006c80 <HAL_DCMI_IRQHandler+0x110>)
 8006bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fa2a 	bl	800700c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01e      	beq.n	8006c00 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	f043 0201 	orr.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be2:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <HAL_DCMI_IRQHandler+0x110>)
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fa0e 	bl	800700c <HAL_DMA_Abort_IT>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f86a 	bl	8006cd4 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2210      	movs	r2, #16
 8006c10:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f840 	bl	8006c98 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2208      	movs	r2, #8
 8006c28:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f83e 	bl	8006cac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01d      	beq.n	8006c76 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d107      	bne.n	8006c58 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 021e 	bic.w	r2, r2, #30
 8006c56:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f825 	bl	8006cc0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006cd5 	.word	0x08006cd5

08006c84 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d009      	beq.n	8006d00 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff ffbf 	bl	8006c84 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d1c:	f7ff f97c 	bl	8006018 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e099      	b.n	8006e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d4c:	e00f      	b.n	8006d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d4e:	f7ff f963 	bl	8006018 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	d908      	bls.n	8006d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e078      	b.n	8006e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e8      	bne.n	8006d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4b38      	ldr	r3, [pc, #224]	; (8006e68 <HAL_DMA_Init+0x158>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d107      	bne.n	8006dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d117      	bne.n	8006e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb15 	bl	8007444 <DMA_CheckFifoParam>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e016      	b.n	8006e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 facc 	bl	80073d8 <DMA_CalcBaseAndBitshift>
 8006e40:	4603      	mov	r3, r0
 8006e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e48:	223f      	movs	r2, #63	; 0x3f
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	f010803f 	.word	0xf010803f

08006e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_DMA_Start_IT+0x26>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e048      	b.n	8006f24 <HAL_DMA_Start_IT+0xb8>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d137      	bne.n	8006f16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa5e 	bl	800737c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec4:	223f      	movs	r2, #63	; 0x3f
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0216 	orr.w	r2, r2, #22
 8006eda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695a      	ldr	r2, [r3, #20]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006eea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0208 	orr.w	r2, r2, #8
 8006f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e005      	b.n	8006f22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f3a:	f7ff f86d 	bl	8006018 <HAL_GetTick>
 8006f3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d008      	beq.n	8006f5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2280      	movs	r2, #128	; 0x80
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e052      	b.n	8007004 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0216 	bic.w	r2, r2, #22
 8006f6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <HAL_DMA_Abort+0x62>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0208 	bic.w	r2, r2, #8
 8006f9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fae:	e013      	b.n	8006fd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb0:	f7ff f832 	bl	8006018 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d90c      	bls.n	8006fd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e015      	b.n	8007004 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e4      	bne.n	8006fb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fea:	223f      	movs	r2, #63	; 0x3f
 8006fec:	409a      	lsls	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d004      	beq.n	800702a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2280      	movs	r2, #128	; 0x80
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e00c      	b.n	8007044 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2205      	movs	r2, #5
 800702e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800705c:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <HAL_DMA_IRQHandler+0x258>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a92      	ldr	r2, [pc, #584]	; (80072ac <HAL_DMA_IRQHandler+0x25c>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	0a9b      	lsrs	r3, r3, #10
 8007068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707a:	2208      	movs	r2, #8
 800707c:	409a      	lsls	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01a      	beq.n	80070bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d013      	beq.n	80070bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0204 	bic.w	r2, r2, #4
 80070a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	2208      	movs	r2, #8
 80070aa:	409a      	lsls	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f043 0201 	orr.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	2201      	movs	r2, #1
 80070c2:	409a      	lsls	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070de:	2201      	movs	r2, #1
 80070e0:	409a      	lsls	r2, r3
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f043 0202 	orr.w	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	2204      	movs	r2, #4
 80070f8:	409a      	lsls	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d012      	beq.n	8007128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	2204      	movs	r2, #4
 8007116:	409a      	lsls	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007120:	f043 0204 	orr.w	r2, r3, #4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	2210      	movs	r2, #16
 800712e:	409a      	lsls	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d043      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d03c      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714a:	2210      	movs	r2, #16
 800714c:	409a      	lsls	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d018      	beq.n	8007192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d108      	bne.n	8007180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d024      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
 800717e:	e01f      	b.n	80071c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
 8007190:	e016      	b.n	80071c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0208 	bic.w	r2, r2, #8
 80071ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c4:	2220      	movs	r2, #32
 80071c6:	409a      	lsls	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 808e 	beq.w	80072ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8086 	beq.w	80072ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e6:	2220      	movs	r2, #32
 80071e8:	409a      	lsls	r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d136      	bne.n	8007268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0216 	bic.w	r2, r2, #22
 8007208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <HAL_DMA_IRQHandler+0x1da>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0208 	bic.w	r2, r2, #8
 8007238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	223f      	movs	r2, #63	; 0x3f
 8007240:	409a      	lsls	r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725a:	2b00      	cmp	r3, #0
 800725c:	d07d      	beq.n	800735a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
        }
        return;
 8007266:	e078      	b.n	800735a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01c      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d108      	bne.n	8007296 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	2b00      	cmp	r3, #0
 800728a:	d030      	beq.n	80072ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
 8007294:	e02b      	b.n	80072ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d027      	beq.n	80072ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
 80072a6:	e022      	b.n	80072ee <HAL_DMA_IRQHandler+0x29e>
 80072a8:	20000008 	.word	0x20000008
 80072ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10f      	bne.n	80072de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0210 	bic.w	r2, r2, #16
 80072cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d032      	beq.n	800735c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d022      	beq.n	8007348 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2205      	movs	r2, #5
 8007306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0201 	bic.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3301      	adds	r3, #1
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	429a      	cmp	r2, r3
 8007324:	d307      	bcc.n	8007336 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f2      	bne.n	800731a <HAL_DMA_IRQHandler+0x2ca>
 8007334:	e000      	b.n	8007338 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007336:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	e000      	b.n	800735c <HAL_DMA_IRQHandler+0x30c>
        return;
 800735a:	bf00      	nop
    }
  }
}
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop

08007364 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007398:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d108      	bne.n	80073bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073ba:	e007      	b.n	80073cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	3b10      	subs	r3, #16
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <DMA_CalcBaseAndBitshift+0x60>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073f2:	4a12      	ldr	r2, [pc, #72]	; (800743c <DMA_CalcBaseAndBitshift+0x64>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b03      	cmp	r3, #3
 8007404:	d908      	bls.n	8007418 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <DMA_CalcBaseAndBitshift+0x68>)
 800740e:	4013      	ands	r3, r2
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	659a      	str	r2, [r3, #88]	; 0x58
 8007416:	e006      	b.n	8007426 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	4b08      	ldr	r3, [pc, #32]	; (8007440 <DMA_CalcBaseAndBitshift+0x68>)
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	aaaaaaab 	.word	0xaaaaaaab
 800743c:	0801d1e8 	.word	0x0801d1e8
 8007440:	fffffc00 	.word	0xfffffc00

08007444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d11f      	bne.n	800749e <DMA_CheckFifoParam+0x5a>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d856      	bhi.n	8007512 <DMA_CheckFifoParam+0xce>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <DMA_CheckFifoParam+0x28>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	0800747d 	.word	0x0800747d
 8007470:	0800748f 	.word	0x0800748f
 8007474:	0800747d 	.word	0x0800747d
 8007478:	08007513 	.word	0x08007513
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d046      	beq.n	8007516 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800748c:	e043      	b.n	8007516 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007496:	d140      	bne.n	800751a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800749c:	e03d      	b.n	800751a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	d121      	bne.n	80074ec <DMA_CheckFifoParam+0xa8>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d837      	bhi.n	800751e <DMA_CheckFifoParam+0xda>
 80074ae:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <DMA_CheckFifoParam+0x70>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	080074c5 	.word	0x080074c5
 80074b8:	080074cb 	.word	0x080074cb
 80074bc:	080074c5 	.word	0x080074c5
 80074c0:	080074dd 	.word	0x080074dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e030      	b.n	800752c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d025      	beq.n	8007522 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074da:	e022      	b.n	8007522 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e4:	d11f      	bne.n	8007526 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074ea:	e01c      	b.n	8007526 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d903      	bls.n	80074fa <DMA_CheckFifoParam+0xb6>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d003      	beq.n	8007500 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074f8:	e018      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e015      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
      break;
 8007510:	e00b      	b.n	800752a <DMA_CheckFifoParam+0xe6>
      break;
 8007512:	bf00      	nop
 8007514:	e00a      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;
 8007516:	bf00      	nop
 8007518:	e008      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;
 800751a:	bf00      	nop
 800751c:	e006      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;
 800751e:	bf00      	nop
 8007520:	e004      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;
 8007522:	bf00      	nop
 8007524:	e002      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;   
 8007526:	bf00      	nop
 8007528:	e000      	b.n	800752c <DMA_CheckFifoParam+0xe8>
      break;
 800752a:	bf00      	nop
    }
  } 
  
  return status; 
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop

0800753c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e039      	b.n	80075c2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fb fd02 	bl	8002f6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	f023 0107 	bic.w	r1, r3, #7
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <HAL_DMA2D_Init+0x90>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	68d1      	ldr	r1, [r2, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	ffffc000 	.word	0xffffc000

080075d0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_DMA2D_Start+0x1c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e018      	b.n	800761e <HAL_DMA2D_Start+0x4e>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fa98 	bl	8007b3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d056      	beq.n	80076f0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007642:	f7fe fce9 	bl	8006018 <HAL_GetTick>
 8007646:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007648:	e04b      	b.n	80076e2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007658:	2b00      	cmp	r3, #0
 800765a:	d023      	beq.n	80076a4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	f043 0202 	orr.w	r2, r3, #2
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2221      	movs	r2, #33	; 0x21
 800768e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2204      	movs	r2, #4
 8007694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0a5      	b.n	80077f0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076aa:	d01a      	beq.n	80076e2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076ac:	f7fe fcb4 	bl	8006018 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <HAL_DMA2D_PollForTransfer+0x9c>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10f      	bne.n	80076e2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	f043 0220 	orr.w	r2, r3, #32
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2203      	movs	r2, #3
 80076d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e086      	b.n	80077f0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0ac      	beq.n	800764a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d061      	beq.n	80077d6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007712:	f7fe fc81 	bl	8006018 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007718:	e056      	b.n	80077c8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007728:	2b00      	cmp	r3, #0
 800772a:	d02e      	beq.n	800778a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	f043 0204 	orr.w	r2, r3, #4
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	f043 0202 	orr.w	r2, r3, #2
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007766:	f043 0201 	orr.w	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2229      	movs	r2, #41	; 0x29
 8007774:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2204      	movs	r2, #4
 800777a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e032      	b.n	80077f0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007790:	d01a      	beq.n	80077c8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007792:	f7fe fc41 	bl	8006018 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d302      	bcc.n	80077a8 <HAL_DMA2D_PollForTransfer+0x182>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10f      	bne.n	80077c8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	f043 0220 	orr.w	r2, r3, #32
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2203      	movs	r2, #3
 80077b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e013      	b.n	80077f0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0a1      	beq.n	800771a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2212      	movs	r2, #18
 80077dc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d026      	beq.n	8007868 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d021      	beq.n	8007868 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007832:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	f043 0201 	orr.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2201      	movs	r2, #1
 8007846:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2204      	movs	r2, #4
 800784c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d026      	beq.n	80078c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d021      	beq.n	80078c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800788a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2220      	movs	r2, #32
 8007892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007898:	f043 0202 	orr.w	r2, r3, #2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2204      	movs	r2, #4
 80078a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d026      	beq.n	8007918 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d021      	beq.n	8007918 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2208      	movs	r2, #8
 80078ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	f043 0204 	orr.w	r2, r3, #4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2204      	movs	r2, #4
 80078fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00e      	beq.n	800794a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800793a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2204      	movs	r2, #4
 8007942:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f853 	bl	80079f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d024      	beq.n	800799e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01f      	beq.n	800799e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2202      	movs	r2, #2
 8007974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01f      	beq.n	80079e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01a      	beq.n	80079e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2210      	movs	r2, #16
 80079c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f80e 	bl	8007a04 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_DMA2D_ConfigLayer+0x20>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e079      	b.n	8007b2c <HAL_DMA2D_ConfigLayer+0x114>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	3318      	adds	r3, #24
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	4413      	add	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007a62:	4b35      	ldr	r3, [pc, #212]	; (8007b38 <HAL_DMA2D_ConfigLayer+0x120>)
 8007a64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	d003      	beq.n	8007a76 <HAL_DMA2D_ConfigLayer+0x5e>
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	d107      	bne.n	8007a86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e005      	b.n	8007a92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	061b      	lsls	r3, r3, #24
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d120      	bne.n	8007ada <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	ea02 0103 	and.w	r1, r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b0a      	cmp	r3, #10
 8007ac0:	d003      	beq.n	8007aca <HAL_DMA2D_ConfigLayer+0xb2>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d127      	bne.n	8007b1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad8:	e01f      	b.n	8007b1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	ea02 0103 	and.w	r1, r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b0a      	cmp	r3, #10
 8007b02:	d003      	beq.n	8007b0c <HAL_DMA2D_ConfigLayer+0xf4>
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	d106      	bne.n	8007b1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007b18:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	ff03000f 	.word	0xff03000f

08007b3c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b08b      	sub	sp, #44	; 0x2c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	041a      	lsls	r2, r3, #16
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b74:	d174      	bne.n	8007c60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d108      	bne.n	8007bae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bac:	e053      	b.n	8007c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d106      	bne.n	8007bc4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	e048      	b.n	8007c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d111      	bne.n	8007bf0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	0cdb      	lsrs	r3, r3, #19
 8007bd0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	0a9b      	lsrs	r3, r3, #10
 8007bd6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	08db      	lsrs	r3, r3, #3
 8007bdc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	02db      	lsls	r3, r3, #11
 8007be6:	4313      	orrs	r3, r2
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
 8007bee:	e032      	b.n	8007c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d117      	bne.n	8007c28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	0fdb      	lsrs	r3, r3, #31
 8007bfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	0cdb      	lsrs	r3, r3, #19
 8007c02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	0adb      	lsrs	r3, r3, #11
 8007c08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	08db      	lsrs	r3, r3, #3
 8007c0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	029b      	lsls	r3, r3, #10
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	03db      	lsls	r3, r3, #15
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
 8007c26:	e016      	b.n	8007c56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	0f1b      	lsrs	r3, r3, #28
 8007c2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	0d1b      	lsrs	r3, r3, #20
 8007c32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	0b1b      	lsrs	r3, r3, #12
 8007c38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	091b      	lsrs	r3, r3, #4
 8007c3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	011a      	lsls	r2, r3, #4
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007c5e:	e003      	b.n	8007c68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	60da      	str	r2, [r3, #12]
}
 8007c68:	bf00      	nop
 8007c6a:	372c      	adds	r7, #44	; 0x2c
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e175      	b.n	8007f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007c94:	2201      	movs	r2, #1
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	f040 8164 	bne.w	8007f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d00b      	beq.n	8007cd2 <HAL_GPIO_Init+0x5e>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d007      	beq.n	8007cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cc6:	2b11      	cmp	r3, #17
 8007cc8:	d003      	beq.n	8007cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b12      	cmp	r3, #18
 8007cd0:	d130      	bne.n	8007d34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	2203      	movs	r2, #3
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d08:	2201      	movs	r2, #1
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	f003 0201 	and.w	r2, r3, #1
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	2203      	movs	r2, #3
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	43db      	mvns	r3, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d003      	beq.n	8007d74 <HAL_GPIO_Init+0x100>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b12      	cmp	r3, #18
 8007d72:	d123      	bne.n	8007dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	08da      	lsrs	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3208      	adds	r2, #8
 8007d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	220f      	movs	r2, #15
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	08da      	lsrs	r2, r3, #3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3208      	adds	r2, #8
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 0203 	and.w	r2, r3, #3
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80be 	beq.w	8007f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dfe:	4b66      	ldr	r3, [pc, #408]	; (8007f98 <HAL_GPIO_Init+0x324>)
 8007e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e02:	4a65      	ldr	r2, [pc, #404]	; (8007f98 <HAL_GPIO_Init+0x324>)
 8007e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e08:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0a:	4b63      	ldr	r3, [pc, #396]	; (8007f98 <HAL_GPIO_Init+0x324>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007e16:	4a61      	ldr	r2, [pc, #388]	; (8007f9c <HAL_GPIO_Init+0x328>)
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	220f      	movs	r2, #15
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4013      	ands	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a58      	ldr	r2, [pc, #352]	; (8007fa0 <HAL_GPIO_Init+0x32c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d037      	beq.n	8007eb2 <HAL_GPIO_Init+0x23e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a57      	ldr	r2, [pc, #348]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d031      	beq.n	8007eae <HAL_GPIO_Init+0x23a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a56      	ldr	r2, [pc, #344]	; (8007fa8 <HAL_GPIO_Init+0x334>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02b      	beq.n	8007eaa <HAL_GPIO_Init+0x236>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a55      	ldr	r2, [pc, #340]	; (8007fac <HAL_GPIO_Init+0x338>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d025      	beq.n	8007ea6 <HAL_GPIO_Init+0x232>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a54      	ldr	r2, [pc, #336]	; (8007fb0 <HAL_GPIO_Init+0x33c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01f      	beq.n	8007ea2 <HAL_GPIO_Init+0x22e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a53      	ldr	r2, [pc, #332]	; (8007fb4 <HAL_GPIO_Init+0x340>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d019      	beq.n	8007e9e <HAL_GPIO_Init+0x22a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a52      	ldr	r2, [pc, #328]	; (8007fb8 <HAL_GPIO_Init+0x344>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_GPIO_Init+0x226>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a51      	ldr	r2, [pc, #324]	; (8007fbc <HAL_GPIO_Init+0x348>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00d      	beq.n	8007e96 <HAL_GPIO_Init+0x222>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a50      	ldr	r2, [pc, #320]	; (8007fc0 <HAL_GPIO_Init+0x34c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <HAL_GPIO_Init+0x21e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a4f      	ldr	r2, [pc, #316]	; (8007fc4 <HAL_GPIO_Init+0x350>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <HAL_GPIO_Init+0x21a>
 8007e8a:	2309      	movs	r3, #9
 8007e8c:	e012      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e010      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007e92:	2308      	movs	r3, #8
 8007e94:	e00e      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007e96:	2307      	movs	r3, #7
 8007e98:	e00c      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007e9a:	2306      	movs	r3, #6
 8007e9c:	e00a      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007e9e:	2305      	movs	r3, #5
 8007ea0:	e008      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	e006      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e004      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e002      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <HAL_GPIO_Init+0x240>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	f002 0203 	and.w	r2, r2, #3
 8007eba:	0092      	lsls	r2, r2, #2
 8007ebc:	4093      	lsls	r3, r2
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ec4:	4935      	ldr	r1, [pc, #212]	; (8007f9c <HAL_GPIO_Init+0x328>)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	089b      	lsrs	r3, r3, #2
 8007eca:	3302      	adds	r3, #2
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ed2:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ef6:	4a34      	ldr	r2, [pc, #208]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007efc:	4b32      	ldr	r3, [pc, #200]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f20:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f26:	4b28      	ldr	r3, [pc, #160]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f50:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f74:	4a14      	ldr	r2, [pc, #80]	; (8007fc8 <HAL_GPIO_Init+0x354>)
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b0f      	cmp	r3, #15
 8007f84:	f67f ae86 	bls.w	8007c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	3724      	adds	r7, #36	; 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	40013800 	.word	0x40013800
 8007fa0:	40020000 	.word	0x40020000
 8007fa4:	40020400 	.word	0x40020400
 8007fa8:	40020800 	.word	0x40020800
 8007fac:	40020c00 	.word	0x40020c00
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	40021400 	.word	0x40021400
 8007fb8:	40021800 	.word	0x40021800
 8007fbc:	40021c00 	.word	0x40021c00
 8007fc0:	40022000 	.word	0x40022000
 8007fc4:	40022400 	.word	0x40022400
 8007fc8:	40013c00 	.word	0x40013c00

08007fcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	e0d9      	b.n	800819c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007fe8:	2201      	movs	r2, #1
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	f040 80c9 	bne.w	8008196 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008004:	4a6b      	ldr	r2, [pc, #428]	; (80081b4 <HAL_GPIO_DeInit+0x1e8>)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	089b      	lsrs	r3, r3, #2
 800800a:	3302      	adds	r3, #2
 800800c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008010:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	220f      	movs	r2, #15
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	4013      	ands	r3, r2
 8008024:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a63      	ldr	r2, [pc, #396]	; (80081b8 <HAL_GPIO_DeInit+0x1ec>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d037      	beq.n	800809e <HAL_GPIO_DeInit+0xd2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a62      	ldr	r2, [pc, #392]	; (80081bc <HAL_GPIO_DeInit+0x1f0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d031      	beq.n	800809a <HAL_GPIO_DeInit+0xce>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a61      	ldr	r2, [pc, #388]	; (80081c0 <HAL_GPIO_DeInit+0x1f4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d02b      	beq.n	8008096 <HAL_GPIO_DeInit+0xca>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a60      	ldr	r2, [pc, #384]	; (80081c4 <HAL_GPIO_DeInit+0x1f8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d025      	beq.n	8008092 <HAL_GPIO_DeInit+0xc6>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a5f      	ldr	r2, [pc, #380]	; (80081c8 <HAL_GPIO_DeInit+0x1fc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01f      	beq.n	800808e <HAL_GPIO_DeInit+0xc2>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a5e      	ldr	r2, [pc, #376]	; (80081cc <HAL_GPIO_DeInit+0x200>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d019      	beq.n	800808a <HAL_GPIO_DeInit+0xbe>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a5d      	ldr	r2, [pc, #372]	; (80081d0 <HAL_GPIO_DeInit+0x204>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <HAL_GPIO_DeInit+0xba>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a5c      	ldr	r2, [pc, #368]	; (80081d4 <HAL_GPIO_DeInit+0x208>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00d      	beq.n	8008082 <HAL_GPIO_DeInit+0xb6>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a5b      	ldr	r2, [pc, #364]	; (80081d8 <HAL_GPIO_DeInit+0x20c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <HAL_GPIO_DeInit+0xb2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a5a      	ldr	r2, [pc, #360]	; (80081dc <HAL_GPIO_DeInit+0x210>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d101      	bne.n	800807a <HAL_GPIO_DeInit+0xae>
 8008076:	2309      	movs	r3, #9
 8008078:	e012      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800807a:	230a      	movs	r3, #10
 800807c:	e010      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800807e:	2308      	movs	r3, #8
 8008080:	e00e      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 8008082:	2307      	movs	r3, #7
 8008084:	e00c      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 8008086:	2306      	movs	r3, #6
 8008088:	e00a      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800808a:	2305      	movs	r3, #5
 800808c:	e008      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800808e:	2304      	movs	r3, #4
 8008090:	e006      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 8008092:	2303      	movs	r3, #3
 8008094:	e004      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 8008096:	2302      	movs	r3, #2
 8008098:	e002      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <HAL_GPIO_DeInit+0xd4>
 800809e:	2300      	movs	r3, #0
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	f002 0203 	and.w	r2, r2, #3
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	4093      	lsls	r3, r2
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d132      	bne.n	8008116 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80080b0:	4b4b      	ldr	r3, [pc, #300]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	4949      	ldr	r1, [pc, #292]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80080be:	4b48      	ldr	r3, [pc, #288]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	4946      	ldr	r1, [pc, #280]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80080cc:	4b44      	ldr	r3, [pc, #272]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	43db      	mvns	r3, r3
 80080d4:	4942      	ldr	r1, [pc, #264]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80080da:	4b41      	ldr	r3, [pc, #260]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	493f      	ldr	r1, [pc, #252]	; (80081e0 <HAL_GPIO_DeInit+0x214>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	220f      	movs	r2, #15
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80080f8:	4a2e      	ldr	r2, [pc, #184]	; (80081b4 <HAL_GPIO_DeInit+0x1e8>)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	089b      	lsrs	r3, r3, #2
 80080fe:	3302      	adds	r3, #2
 8008100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	43da      	mvns	r2, r3
 8008108:	482a      	ldr	r0, [pc, #168]	; (80081b4 <HAL_GPIO_DeInit+0x1e8>)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	089b      	lsrs	r3, r3, #2
 800810e:	400a      	ands	r2, r1
 8008110:	3302      	adds	r3, #2
 8008112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	2103      	movs	r1, #3
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	401a      	ands	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	08da      	lsrs	r2, r3, #3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3208      	adds	r2, #8
 8008134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	220f      	movs	r2, #15
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	08d2      	lsrs	r2, r2, #3
 800814c:	4019      	ands	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3208      	adds	r2, #8
 8008152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	2103      	movs	r1, #3
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	43db      	mvns	r3, r3
 8008166:	401a      	ands	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	2101      	movs	r1, #1
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	fa01 f303 	lsl.w	r3, r1, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	401a      	ands	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	2103      	movs	r1, #3
 800818a:	fa01 f303 	lsl.w	r3, r1, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	401a      	ands	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	3301      	adds	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b0f      	cmp	r3, #15
 80081a0:	f67f af22 	bls.w	8007fe8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40013800 	.word	0x40013800
 80081b8:	40020000 	.word	0x40020000
 80081bc:	40020400 	.word	0x40020400
 80081c0:	40020800 	.word	0x40020800
 80081c4:	40020c00 	.word	0x40020c00
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40021400 	.word	0x40021400
 80081d0:	40021800 	.word	0x40021800
 80081d4:	40021c00 	.word	0x40021c00
 80081d8:	40022000 	.word	0x40022000
 80081dc:	40022400 	.word	0x40022400
 80081e0:	40013c00 	.word	0x40013c00

080081e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	4013      	ands	r3, r2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
 8008200:	e001      	b.n	8008206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
 8008220:	4613      	mov	r3, r2
 8008222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008224:	787b      	ldrb	r3, [r7, #1]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008230:	e003      	b.n	800823a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008232:	887b      	ldrh	r3, [r7, #2]
 8008234:	041a      	lsls	r2, r3, #16
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	619a      	str	r2, [r3, #24]
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008258:	887a      	ldrh	r2, [r7, #2]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4013      	ands	r3, r2
 800825e:	041a      	lsls	r2, r3, #16
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	43d9      	mvns	r1, r3
 8008264:	887b      	ldrh	r3, [r7, #2]
 8008266:	400b      	ands	r3, r1
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	619a      	str	r2, [r3, #24]
}
 800826e:	bf00      	nop
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008286:	4b08      	ldr	r3, [pc, #32]	; (80082a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008288:	695a      	ldr	r2, [r3, #20]
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	4013      	ands	r3, r2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d006      	beq.n	80082a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008292:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f806 	bl	80082ac <HAL_GPIO_EXTI_Callback>
  }
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40013c00 	.word	0x40013c00

080082ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80082c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c4:	b08f      	sub	sp, #60	; 0x3c
 80082c6:	af0a      	add	r7, sp, #40	; 0x28
 80082c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e054      	b.n	800837e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f00f fe6e 	bl	8017fd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2203      	movs	r2, #3
 80082f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f009 fd7d 	bl	8011e12 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	687e      	ldr	r6, [r7, #4]
 8008320:	466d      	mov	r5, sp
 8008322:	f106 0410 	add.w	r4, r6, #16
 8008326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800832a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800832c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800832e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008332:	e885 0003 	stmia.w	r5, {r0, r1}
 8008336:	1d33      	adds	r3, r6, #4
 8008338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800833a:	6838      	ldr	r0, [r7, #0]
 800833c:	f009 fd00 	bl	8011d40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f009 fd74 	bl	8011e34 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	687e      	ldr	r6, [r7, #4]
 8008354:	466d      	mov	r5, sp
 8008356:	f106 0410 	add.w	r4, r6, #16
 800835a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800835c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800835e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008366:	e885 0003 	stmia.w	r5, {r0, r1}
 800836a:	1d33      	adds	r3, r6, #4
 800836c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800836e:	6838      	ldr	r0, [r7, #0]
 8008370:	f009 fe86 	bl	8012080 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008386 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8008386:	b590      	push	{r4, r7, lr}
 8008388:	b089      	sub	sp, #36	; 0x24
 800838a:	af04      	add	r7, sp, #16
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	4608      	mov	r0, r1
 8008390:	4611      	mov	r1, r2
 8008392:	461a      	mov	r2, r3
 8008394:	4603      	mov	r3, r0
 8008396:	70fb      	strb	r3, [r7, #3]
 8008398:	460b      	mov	r3, r1
 800839a:	70bb      	strb	r3, [r7, #2]
 800839c:	4613      	mov	r3, r2
 800839e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_HCD_HC_Init+0x28>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e076      	b.n	800849c <HAL_HCD_HC_Init+0x116>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	212c      	movs	r1, #44	; 0x2c
 80083bc:	fb01 f303 	mul.w	r3, r1, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	333d      	adds	r3, #61	; 0x3d
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	212c      	movs	r1, #44	; 0x2c
 80083ce:	fb01 f303 	mul.w	r3, r1, r3
 80083d2:	4413      	add	r3, r2
 80083d4:	3338      	adds	r3, #56	; 0x38
 80083d6:	787a      	ldrb	r2, [r7, #1]
 80083d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	212c      	movs	r1, #44	; 0x2c
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	4413      	add	r3, r2
 80083e6:	3340      	adds	r3, #64	; 0x40
 80083e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	212c      	movs	r1, #44	; 0x2c
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	4413      	add	r3, r2
 80083f8:	3339      	adds	r3, #57	; 0x39
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	212c      	movs	r1, #44	; 0x2c
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	4413      	add	r3, r2
 800840a:	333f      	adds	r3, #63	; 0x3f
 800840c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008410:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	78ba      	ldrb	r2, [r7, #2]
 8008416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800841a:	b2d0      	uxtb	r0, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	212c      	movs	r1, #44	; 0x2c
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	4413      	add	r3, r2
 8008426:	333a      	adds	r3, #58	; 0x3a
 8008428:	4602      	mov	r2, r0
 800842a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800842c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da09      	bge.n	8008448 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	212c      	movs	r1, #44	; 0x2c
 800843a:	fb01 f303 	mul.w	r3, r1, r3
 800843e:	4413      	add	r3, r2
 8008440:	333b      	adds	r3, #59	; 0x3b
 8008442:	2201      	movs	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e008      	b.n	800845a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	212c      	movs	r1, #44	; 0x2c
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	4413      	add	r3, r2
 8008454:	333b      	adds	r3, #59	; 0x3b
 8008456:	2200      	movs	r2, #0
 8008458:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	212c      	movs	r1, #44	; 0x2c
 8008460:	fb01 f303 	mul.w	r3, r1, r3
 8008464:	4413      	add	r3, r2
 8008466:	333c      	adds	r3, #60	; 0x3c
 8008468:	f897 2020 	ldrb.w	r2, [r7, #32]
 800846c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	787c      	ldrb	r4, [r7, #1]
 8008474:	78ba      	ldrb	r2, [r7, #2]
 8008476:	78f9      	ldrb	r1, [r7, #3]
 8008478:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800847a:	9302      	str	r3, [sp, #8]
 800847c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4623      	mov	r3, r4
 800848a:	f009 ff6f 	bl	801236c <USB_HC_Init>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}

080084a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_HCD_HC_Halt+0x1e>
 80084be:	2302      	movs	r3, #2
 80084c0:	e00f      	b.n	80084e2 <HAL_HCD_HC_Halt+0x3e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	78fa      	ldrb	r2, [r7, #3]
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00a f9ab 	bl	801282e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	70fb      	strb	r3, [r7, #3]
 80084fe:	460b      	mov	r3, r1
 8008500:	70bb      	strb	r3, [r7, #2]
 8008502:	4613      	mov	r3, r2
 8008504:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	212c      	movs	r1, #44	; 0x2c
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	4413      	add	r3, r2
 8008512:	333b      	adds	r3, #59	; 0x3b
 8008514:	78ba      	ldrb	r2, [r7, #2]
 8008516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	212c      	movs	r1, #44	; 0x2c
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	4413      	add	r3, r2
 8008524:	333f      	adds	r3, #63	; 0x3f
 8008526:	787a      	ldrb	r2, [r7, #1]
 8008528:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800852a:	7c3b      	ldrb	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d112      	bne.n	8008556 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	212c      	movs	r1, #44	; 0x2c
 8008536:	fb01 f303 	mul.w	r3, r1, r3
 800853a:	4413      	add	r3, r2
 800853c:	3342      	adds	r3, #66	; 0x42
 800853e:	2203      	movs	r2, #3
 8008540:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	212c      	movs	r1, #44	; 0x2c
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	4413      	add	r3, r2
 800854e:	333d      	adds	r3, #61	; 0x3d
 8008550:	7f3a      	ldrb	r2, [r7, #28]
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e008      	b.n	8008568 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	212c      	movs	r1, #44	; 0x2c
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	4413      	add	r3, r2
 8008562:	3342      	adds	r3, #66	; 0x42
 8008564:	2202      	movs	r2, #2
 8008566:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008568:	787b      	ldrb	r3, [r7, #1]
 800856a:	2b03      	cmp	r3, #3
 800856c:	f200 80c6 	bhi.w	80086fc <HAL_HCD_HC_SubmitRequest+0x210>
 8008570:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	08008589 	.word	0x08008589
 800857c:	080086e9 	.word	0x080086e9
 8008580:	080085ed 	.word	0x080085ed
 8008584:	0800866b 	.word	0x0800866b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008588:	7c3b      	ldrb	r3, [r7, #16]
 800858a:	2b01      	cmp	r3, #1
 800858c:	f040 80b8 	bne.w	8008700 <HAL_HCD_HC_SubmitRequest+0x214>
 8008590:	78bb      	ldrb	r3, [r7, #2]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 80b4 	bne.w	8008700 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008598:	8b3b      	ldrh	r3, [r7, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	212c      	movs	r1, #44	; 0x2c
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	4413      	add	r3, r2
 80085aa:	3355      	adds	r3, #85	; 0x55
 80085ac:	2201      	movs	r2, #1
 80085ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	212c      	movs	r1, #44	; 0x2c
 80085b6:	fb01 f303 	mul.w	r3, r1, r3
 80085ba:	4413      	add	r3, r2
 80085bc:	3355      	adds	r3, #85	; 0x55
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	212c      	movs	r1, #44	; 0x2c
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	3342      	adds	r3, #66	; 0x42
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80085d6:	e093      	b.n	8008700 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	212c      	movs	r1, #44	; 0x2c
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	3342      	adds	r3, #66	; 0x42
 80085e6:	2202      	movs	r2, #2
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e089      	b.n	8008700 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80085ec:	78bb      	ldrb	r3, [r7, #2]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11d      	bne.n	800862e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	212c      	movs	r1, #44	; 0x2c
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	3355      	adds	r3, #85	; 0x55
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	212c      	movs	r1, #44	; 0x2c
 800860c:	fb01 f303 	mul.w	r3, r1, r3
 8008610:	4413      	add	r3, r2
 8008612:	3342      	adds	r3, #66	; 0x42
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008618:	e073      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	212c      	movs	r1, #44	; 0x2c
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	4413      	add	r3, r2
 8008626:	3342      	adds	r3, #66	; 0x42
 8008628:	2202      	movs	r2, #2
 800862a:	701a      	strb	r2, [r3, #0]
      break;
 800862c:	e069      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	212c      	movs	r1, #44	; 0x2c
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	3354      	adds	r3, #84	; 0x54
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d109      	bne.n	8008656 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	212c      	movs	r1, #44	; 0x2c
 8008648:	fb01 f303 	mul.w	r3, r1, r3
 800864c:	4413      	add	r3, r2
 800864e:	3342      	adds	r3, #66	; 0x42
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]
      break;
 8008654:	e055      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	212c      	movs	r1, #44	; 0x2c
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	3342      	adds	r3, #66	; 0x42
 8008664:	2202      	movs	r2, #2
 8008666:	701a      	strb	r2, [r3, #0]
      break;
 8008668:	e04b      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800866a:	78bb      	ldrb	r3, [r7, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d11d      	bne.n	80086ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	212c      	movs	r1, #44	; 0x2c
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	4413      	add	r3, r2
 800867c:	3355      	adds	r3, #85	; 0x55
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	212c      	movs	r1, #44	; 0x2c
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	4413      	add	r3, r2
 8008690:	3342      	adds	r3, #66	; 0x42
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008696:	e034      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	212c      	movs	r1, #44	; 0x2c
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	3342      	adds	r3, #66	; 0x42
 80086a6:	2202      	movs	r2, #2
 80086a8:	701a      	strb	r2, [r3, #0]
      break;
 80086aa:	e02a      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	212c      	movs	r1, #44	; 0x2c
 80086b2:	fb01 f303 	mul.w	r3, r1, r3
 80086b6:	4413      	add	r3, r2
 80086b8:	3354      	adds	r3, #84	; 0x54
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	212c      	movs	r1, #44	; 0x2c
 80086c6:	fb01 f303 	mul.w	r3, r1, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	3342      	adds	r3, #66	; 0x42
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
      break;
 80086d2:	e016      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	212c      	movs	r1, #44	; 0x2c
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	4413      	add	r3, r2
 80086e0:	3342      	adds	r3, #66	; 0x42
 80086e2:	2202      	movs	r2, #2
 80086e4:	701a      	strb	r2, [r3, #0]
      break;
 80086e6:	e00c      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	212c      	movs	r1, #44	; 0x2c
 80086ee:	fb01 f303 	mul.w	r3, r1, r3
 80086f2:	4413      	add	r3, r2
 80086f4:	3342      	adds	r3, #66	; 0x42
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
      break;
 80086fa:	e002      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008700:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	212c      	movs	r1, #44	; 0x2c
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	3344      	adds	r3, #68	; 0x44
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	8b3a      	ldrh	r2, [r7, #24]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	202c      	movs	r0, #44	; 0x2c
 800871c:	fb00 f303 	mul.w	r3, r0, r3
 8008720:	440b      	add	r3, r1
 8008722:	334c      	adds	r3, #76	; 0x4c
 8008724:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	212c      	movs	r1, #44	; 0x2c
 800872c:	fb01 f303 	mul.w	r3, r1, r3
 8008730:	4413      	add	r3, r2
 8008732:	3360      	adds	r3, #96	; 0x60
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	212c      	movs	r1, #44	; 0x2c
 800873e:	fb01 f303 	mul.w	r3, r1, r3
 8008742:	4413      	add	r3, r2
 8008744:	3350      	adds	r3, #80	; 0x50
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	212c      	movs	r1, #44	; 0x2c
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	4413      	add	r3, r2
 8008756:	3339      	adds	r3, #57	; 0x39
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	212c      	movs	r1, #44	; 0x2c
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	4413      	add	r3, r2
 8008768:	3361      	adds	r3, #97	; 0x61
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	222c      	movs	r2, #44	; 0x2c
 8008776:	fb02 f303 	mul.w	r3, r2, r3
 800877a:	3338      	adds	r3, #56	; 0x38
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	18d1      	adds	r1, r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	f009 fefe 	bl	8012588 <USB_HC_StartXfer>
 800878c:	4603      	mov	r3, r0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop

08008798 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f009 fc23 	bl	8011ffa <USB_GetMode>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	f040 80ef 	bne.w	800899a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f009 fc07 	bl	8011fd4 <USB_ReadInterrupts>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80e5 	beq.w	8008998 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f009 fbfe 	bl	8011fd4 <USB_ReadInterrupts>
 80087d8:	4603      	mov	r3, r0
 80087da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e2:	d104      	bne.n	80087ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f009 fbee 	bl	8011fd4 <USB_ReadInterrupts>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008802:	d104      	bne.n	800880e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800880c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f009 fbde 	bl	8011fd4 <USB_ReadInterrupts>
 8008818:	4603      	mov	r3, r0
 800881a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800881e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008822:	d104      	bne.n	800882e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800882c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f009 fbce 	bl	8011fd4 <USB_ReadInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b02      	cmp	r3, #2
 8008840:	d103      	bne.n	800884a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2202      	movs	r2, #2
 8008848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f009 fbc0 	bl	8011fd4 <USB_ReadInterrupts>
 8008854:	4603      	mov	r3, r0
 8008856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800885a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885e:	d115      	bne.n	800888c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008868:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d108      	bne.n	800888c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f00f fc1a 	bl	80180b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2101      	movs	r1, #1
 8008886:	4618      	mov	r0, r3
 8008888:	f009 fcaa 	bl	80121e0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f009 fb9f 	bl	8011fd4 <USB_ReadInterrupts>
 8008896:	4603      	mov	r3, r0
 8008898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800889c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088a0:	d102      	bne.n	80088a8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f9ff 	bl	8009ca6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f009 fb91 	bl	8011fd4 <USB_ReadInterrupts>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d106      	bne.n	80088ca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f00f fbdd 	bl	801807c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2208      	movs	r2, #8
 80088c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f009 fb80 	bl	8011fd4 <USB_ReadInterrupts>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b10      	cmp	r3, #16
 80088dc:	d101      	bne.n	80088e2 <HAL_HCD_IRQHandler+0x14a>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <HAL_HCD_IRQHandler+0x14c>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d012      	beq.n	800890e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0210 	bic.w	r2, r2, #16
 80088f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f902 	bl	8009b02 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f042 0210 	orr.w	r2, r2, #16
 800890c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f009 fb5e 	bl	8011fd4 <USB_ReadInterrupts>
 8008918:	4603      	mov	r3, r0
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008922:	d13a      	bne.n	800899a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f009 ff6f 	bl	801280c <USB_HC_ReadInterrupt>
 800892e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e025      	b.n	8008982 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008960:	d106      	bne.n	8008970 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f8ab 	bl	8008ac4 <HCD_HC_IN_IRQHandler>
 800896e:	e005      	b.n	800897c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fcc6 	bl	8009308 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3301      	adds	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	429a      	cmp	r2, r3
 800898a:	d3d4      	bcc.n	8008936 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008994:	615a      	str	r2, [r3, #20]
 8008996:	e000      	b.n	800899a <HAL_HCD_IRQHandler+0x202>
      return;
 8008998:	bf00      	nop
    }
  }
}
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_HCD_Start+0x16>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e013      	b.n	80089de <HAL_HCD_Start+0x3e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f009 fa14 	bl	8011df0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f009 fc6a 	bl	80122a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_HCD_Stop+0x16>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e00d      	b.n	8008a18 <HAL_HCD_Stop+0x32>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00a f869 	bl	8012ae0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f009 fc11 	bl	8012254 <USB_ResetPort>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	212c      	movs	r1, #44	; 0x2c
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	3360      	adds	r3, #96	; 0x60
 8008a56:	781b      	ldrb	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	212c      	movs	r1, #44	; 0x2c
 8008a76:	fb01 f303 	mul.w	r3, r1, r3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3350      	adds	r3, #80	; 0x50
 8008a7e:	681b      	ldr	r3, [r3, #0]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f009 fc55 	bl	8012348 <USB_GetCurrentFrame>
 8008a9e:	4603      	mov	r3, r0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f009 fc30 	bl	801231a <USB_GetHostSpeed>
 8008aba:	4603      	mov	r3, r0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d119      	bne.n	8008b28 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b00:	461a      	mov	r2, r3
 8008b02:	2304      	movs	r3, #4
 8008b04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b20:	f043 0302 	orr.w	r3, r3, #2
 8008b24:	60d3      	str	r3, [r2, #12]
 8008b26:	e101      	b.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3e:	d12b      	bne.n	8008b98 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	212c      	movs	r1, #44	; 0x2c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	4413      	add	r3, r2
 8008b60:	3361      	adds	r3, #97	; 0x61
 8008b62:	2207      	movs	r2, #7
 8008b64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b80:	f043 0302 	orr.w	r3, r3, #2
 8008b84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	b2d2      	uxtb	r2, r2
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f009 fe4c 	bl	801282e <USB_HC_Halt>
 8008b96:	e0c9      	b.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	d109      	bne.n	8008bc2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	6093      	str	r3, [r2, #8]
 8008bc0:	e0b4      	b.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d133      	bne.n	8008c40 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf2:	f043 0302 	orr.w	r3, r3, #2
 8008bf6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	212c      	movs	r1, #44	; 0x2c
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	3361      	adds	r3, #97	; 0x61
 8008c06:	2205      	movs	r2, #5
 8008c08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c16:	461a      	mov	r2, r3
 8008c18:	2310      	movs	r3, #16
 8008c1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2308      	movs	r3, #8
 8008c2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	4611      	mov	r1, r2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f009 fdf8 	bl	801282e <USB_HC_Halt>
 8008c3e:	e075      	b.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c56:	d134      	bne.n	8008cc2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	0151      	lsls	r1, r2, #5
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	440a      	add	r2, r1
 8008c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c72:	f043 0302 	orr.w	r3, r3, #2
 8008c76:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	212c      	movs	r1, #44	; 0x2c
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	3361      	adds	r3, #97	; 0x61
 8008c86:	2208      	movs	r2, #8
 8008c88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c96:	461a      	mov	r2, r3
 8008c98:	2310      	movs	r3, #16
 8008c9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f009 fdb7 	bl	801282e <USB_HC_Halt>
 8008cc0:	e034      	b.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	2b80      	cmp	r3, #128	; 0x80
 8008cd6:	d129      	bne.n	8008d2c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	212c      	movs	r1, #44	; 0x2c
 8008cfe:	fb01 f303 	mul.w	r3, r1, r3
 8008d02:	4413      	add	r3, r2
 8008d04:	3361      	adds	r3, #97	; 0x61
 8008d06:	2206      	movs	r2, #6
 8008d08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	4611      	mov	r1, r2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f009 fd8a 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d26:	461a      	mov	r2, r3
 8008d28:	2380      	movs	r3, #128	; 0x80
 8008d2a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d42:	d122      	bne.n	8008d8a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d5e:	f043 0302 	orr.w	r3, r3, #2
 8008d62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f009 fd5d 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d80:	461a      	mov	r2, r3
 8008d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d86:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008d88:	e2ba      	b.n	8009300 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	f040 811b 	bne.w	8008fd8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d019      	beq.n	8008dde <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	212c      	movs	r1, #44	; 0x2c
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	3348      	adds	r3, #72	; 0x48
 8008db8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	0159      	lsls	r1, r3, #5
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	202c      	movs	r0, #44	; 0x2c
 8008dd4:	fb00 f303 	mul.w	r3, r0, r3
 8008dd8:	440b      	add	r3, r1
 8008dda:	3350      	adds	r3, #80	; 0x50
 8008ddc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	212c      	movs	r1, #44	; 0x2c
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	3361      	adds	r3, #97	; 0x61
 8008dec:	2201      	movs	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	212c      	movs	r1, #44	; 0x2c
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	335c      	adds	r3, #92	; 0x5c
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2301      	movs	r3, #1
 8008e12:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	212c      	movs	r1, #44	; 0x2c
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	333f      	adds	r3, #63	; 0x3f
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d009      	beq.n	8008e3c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	212c      	movs	r1, #44	; 0x2c
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	4413      	add	r3, r2
 8008e34:	333f      	adds	r3, #63	; 0x3f
 8008e36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d121      	bne.n	8008e80 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e56:	f043 0302 	orr.w	r3, r3, #2
 8008e5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f009 fce1 	bl	801282e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e78:	461a      	mov	r2, r3
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	6093      	str	r3, [r2, #8]
 8008e7e:	e066      	b.n	8008f4e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	212c      	movs	r1, #44	; 0x2c
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	4413      	add	r3, r2
 8008e8c:	333f      	adds	r3, #63	; 0x3f
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d127      	bne.n	8008ee4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eb2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	212c      	movs	r1, #44	; 0x2c
 8008eba:	fb01 f303 	mul.w	r3, r1, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3360      	adds	r3, #96	; 0x60
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	b2d9      	uxtb	r1, r3
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	202c      	movs	r0, #44	; 0x2c
 8008ed0:	fb00 f303 	mul.w	r3, r0, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3360      	adds	r3, #96	; 0x60
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f00f f8f7 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008ee2:	e034      	b.n	8008f4e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	212c      	movs	r1, #44	; 0x2c
 8008eea:	fb01 f303 	mul.w	r3, r1, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	333f      	adds	r3, #63	; 0x3f
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d12a      	bne.n	8008f4e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	212c      	movs	r1, #44	; 0x2c
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	4413      	add	r3, r2
 8008f04:	3360      	adds	r3, #96	; 0x60
 8008f06:	2201      	movs	r2, #1
 8008f08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	212c      	movs	r1, #44	; 0x2c
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	4413      	add	r3, r2
 8008f16:	3354      	adds	r3, #84	; 0x54
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	f083 0301 	eor.w	r3, r3, #1
 8008f1e:	b2d8      	uxtb	r0, r3
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	212c      	movs	r1, #44	; 0x2c
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3354      	adds	r3, #84	; 0x54
 8008f2e:	4602      	mov	r2, r0
 8008f30:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	b2d9      	uxtb	r1, r3
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	202c      	movs	r0, #44	; 0x2c
 8008f3c:	fb00 f303 	mul.w	r3, r0, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	3360      	adds	r3, #96	; 0x60
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f00f f8c1 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d12b      	bne.n	8008fae <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	212c      	movs	r1, #44	; 0x2c
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	3348      	adds	r3, #72	; 0x48
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	202c      	movs	r0, #44	; 0x2c
 8008f6c:	fb00 f202 	mul.w	r2, r0, r2
 8008f70:	440a      	add	r2, r1
 8008f72:	3240      	adds	r2, #64	; 0x40
 8008f74:	8812      	ldrh	r2, [r2, #0]
 8008f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 81be 	beq.w	8009300 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	212c      	movs	r1, #44	; 0x2c
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	3354      	adds	r3, #84	; 0x54
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f083 0301 	eor.w	r3, r3, #1
 8008f98:	b2d8      	uxtb	r0, r3
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	212c      	movs	r1, #44	; 0x2c
 8008fa0:	fb01 f303 	mul.w	r3, r1, r3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3354      	adds	r3, #84	; 0x54
 8008fa8:	4602      	mov	r2, r0
 8008faa:	701a      	strb	r2, [r3, #0]
}
 8008fac:	e1a8      	b.n	8009300 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	212c      	movs	r1, #44	; 0x2c
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	3354      	adds	r3, #84	; 0x54
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	f083 0301 	eor.w	r3, r3, #1
 8008fc2:	b2d8      	uxtb	r0, r3
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	212c      	movs	r1, #44	; 0x2c
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	3354      	adds	r3, #84	; 0x54
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	701a      	strb	r2, [r3, #0]
}
 8008fd6:	e193      	b.n	8009300 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	f040 8106 	bne.w	80091fc <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	0151      	lsls	r1, r2, #5
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	440a      	add	r2, r1
 8009006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800900a:	f023 0302 	bic.w	r3, r3, #2
 800900e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	212c      	movs	r1, #44	; 0x2c
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	4413      	add	r3, r2
 800901c:	3361      	adds	r3, #97	; 0x61
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d109      	bne.n	8009038 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	212c      	movs	r1, #44	; 0x2c
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	3360      	adds	r3, #96	; 0x60
 8009032:	2201      	movs	r2, #1
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e0c9      	b.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	212c      	movs	r1, #44	; 0x2c
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	4413      	add	r3, r2
 8009044:	3361      	adds	r3, #97	; 0x61
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b05      	cmp	r3, #5
 800904a:	d109      	bne.n	8009060 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	212c      	movs	r1, #44	; 0x2c
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	3360      	adds	r3, #96	; 0x60
 800905a:	2205      	movs	r2, #5
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e0b5      	b.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	212c      	movs	r1, #44	; 0x2c
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	3361      	adds	r3, #97	; 0x61
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b06      	cmp	r3, #6
 8009072:	d009      	beq.n	8009088 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3361      	adds	r3, #97	; 0x61
 8009082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009084:	2b08      	cmp	r3, #8
 8009086:	d150      	bne.n	800912a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	335c      	adds	r3, #92	; 0x5c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	202c      	movs	r0, #44	; 0x2c
 80090a0:	fb00 f303 	mul.w	r3, r0, r3
 80090a4:	440b      	add	r3, r1
 80090a6:	335c      	adds	r3, #92	; 0x5c
 80090a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	212c      	movs	r1, #44	; 0x2c
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	335c      	adds	r3, #92	; 0x5c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d912      	bls.n	80090e4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	212c      	movs	r1, #44	; 0x2c
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	335c      	adds	r3, #92	; 0x5c
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	212c      	movs	r1, #44	; 0x2c
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	4413      	add	r3, r2
 80090dc:	3360      	adds	r3, #96	; 0x60
 80090de:	2204      	movs	r2, #4
 80090e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090e2:	e073      	b.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	212c      	movs	r1, #44	; 0x2c
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	3360      	adds	r3, #96	; 0x60
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800910c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009114:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	4413      	add	r3, r2
 800911e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009122:	461a      	mov	r2, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009128:	e050      	b.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	212c      	movs	r1, #44	; 0x2c
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	4413      	add	r3, r2
 8009136:	3361      	adds	r3, #97	; 0x61
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d122      	bne.n	8009184 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	212c      	movs	r1, #44	; 0x2c
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	3360      	adds	r3, #96	; 0x60
 800914c:	2202      	movs	r2, #2
 800914e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009166:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800916e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4413      	add	r3, r2
 8009178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917c:	461a      	mov	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	e023      	b.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	212c      	movs	r1, #44	; 0x2c
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	4413      	add	r3, r2
 8009190:	3361      	adds	r3, #97	; 0x61
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b07      	cmp	r3, #7
 8009196:	d119      	bne.n	80091cc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	212c      	movs	r1, #44	; 0x2c
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	4413      	add	r3, r2
 80091a4:	335c      	adds	r3, #92	; 0x5c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	202c      	movs	r0, #44	; 0x2c
 80091b0:	fb00 f303 	mul.w	r3, r0, r3
 80091b4:	440b      	add	r3, r1
 80091b6:	335c      	adds	r3, #92	; 0x5c
 80091b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	212c      	movs	r1, #44	; 0x2c
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	4413      	add	r3, r2
 80091c6:	3360      	adds	r3, #96	; 0x60
 80091c8:	2204      	movs	r2, #4
 80091ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d8:	461a      	mov	r2, r3
 80091da:	2302      	movs	r3, #2
 80091dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	b2d9      	uxtb	r1, r3
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	202c      	movs	r0, #44	; 0x2c
 80091e8:	fb00 f303 	mul.w	r3, r0, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	3360      	adds	r3, #96	; 0x60
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f00e ff6b 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80091fa:	e081      	b.n	8009300 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d176      	bne.n	8009300 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	212c      	movs	r1, #44	; 0x2c
 8009218:	fb01 f303 	mul.w	r3, r1, r3
 800921c:	4413      	add	r3, r2
 800921e:	333f      	adds	r3, #63	; 0x3f
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d121      	bne.n	800926a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	212c      	movs	r1, #44	; 0x2c
 800922c:	fb01 f303 	mul.w	r3, r1, r3
 8009230:	4413      	add	r3, r2
 8009232:	335c      	adds	r3, #92	; 0x5c
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	440a      	add	r2, r1
 800924e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009252:	f043 0302 	orr.w	r3, r3, #2
 8009256:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f009 fae3 	bl	801282e <USB_HC_Halt>
 8009268:	e041      	b.n	80092ee <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	212c      	movs	r1, #44	; 0x2c
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	4413      	add	r3, r2
 8009276:	333f      	adds	r3, #63	; 0x3f
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	212c      	movs	r1, #44	; 0x2c
 8009284:	fb01 f303 	mul.w	r3, r1, r3
 8009288:	4413      	add	r3, r2
 800928a:	333f      	adds	r3, #63	; 0x3f
 800928c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800928e:	2b02      	cmp	r3, #2
 8009290:	d12d      	bne.n	80092ee <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	212c      	movs	r1, #44	; 0x2c
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	335c      	adds	r3, #92	; 0x5c
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d120      	bne.n	80092ee <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	212c      	movs	r1, #44	; 0x2c
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	3361      	adds	r3, #97	; 0x61
 80092ba:	2203      	movs	r2, #3
 80092bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	4611      	mov	r1, r2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f009 faa0 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fa:	461a      	mov	r2, r3
 80092fc:	2310      	movs	r3, #16
 80092fe:	6093      	str	r3, [r2, #8]
}
 8009300:	bf00      	nop
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	4413      	add	r3, r2
 800932a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b04      	cmp	r3, #4
 8009336:	d119      	bne.n	800936c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	461a      	mov	r2, r3
 8009346:	2304      	movs	r3, #4
 8009348:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	4413      	add	r3, r2
 8009352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	440a      	add	r2, r1
 8009360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009364:	f043 0302 	orr.w	r3, r3, #2
 8009368:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800936a:	e3c6      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b20      	cmp	r3, #32
 8009380:	d13e      	bne.n	8009400 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	4413      	add	r3, r2
 800938a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800938e:	461a      	mov	r2, r3
 8009390:	2320      	movs	r3, #32
 8009392:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	212c      	movs	r1, #44	; 0x2c
 800939a:	fb01 f303 	mul.w	r3, r1, r3
 800939e:	4413      	add	r3, r2
 80093a0:	333d      	adds	r3, #61	; 0x3d
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	f040 83a8 	bne.w	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	212c      	movs	r1, #44	; 0x2c
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	333d      	adds	r3, #61	; 0x3d
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	212c      	movs	r1, #44	; 0x2c
 80093c2:	fb01 f303 	mul.w	r3, r1, r3
 80093c6:	4413      	add	r3, r2
 80093c8:	3360      	adds	r3, #96	; 0x60
 80093ca:	2202      	movs	r2, #2
 80093cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e8:	f043 0302 	orr.w	r3, r3, #2
 80093ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f009 fa18 	bl	801282e <USB_HC_Halt>
}
 80093fe:	e37c      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	4413      	add	r3, r2
 8009408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009416:	d122      	bne.n	800945e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	440a      	add	r2, r1
 800942e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009432:	f043 0302 	orr.w	r3, r3, #2
 8009436:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f009 f9f3 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	4413      	add	r3, r2
 8009450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009454:	461a      	mov	r2, r3
 8009456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800945a:	6093      	str	r3, [r2, #8]
}
 800945c:	e34d      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	4413      	add	r3, r2
 8009466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b01      	cmp	r3, #1
 8009472:	d150      	bne.n	8009516 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	212c      	movs	r1, #44	; 0x2c
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	335c      	adds	r3, #92	; 0x5c
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b40      	cmp	r3, #64	; 0x40
 800949a:	d111      	bne.n	80094c0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	212c      	movs	r1, #44	; 0x2c
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	333d      	adds	r3, #61	; 0x3d
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ba:	461a      	mov	r2, r3
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094da:	f043 0302 	orr.w	r3, r3, #2
 80094de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f009 f99f 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fc:	461a      	mov	r2, r3
 80094fe:	2301      	movs	r3, #1
 8009500:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	212c      	movs	r1, #44	; 0x2c
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	4413      	add	r3, r2
 800950e:	3361      	adds	r3, #97	; 0x61
 8009510:	2201      	movs	r2, #1
 8009512:	701a      	strb	r2, [r3, #0]
}
 8009514:	e2f1      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	4413      	add	r3, r2
 800951e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b40      	cmp	r3, #64	; 0x40
 800952a:	d13c      	bne.n	80095a6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	212c      	movs	r1, #44	; 0x2c
 8009532:	fb01 f303 	mul.w	r3, r1, r3
 8009536:	4413      	add	r3, r2
 8009538:	3361      	adds	r3, #97	; 0x61
 800953a:	2204      	movs	r2, #4
 800953c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	212c      	movs	r1, #44	; 0x2c
 8009544:	fb01 f303 	mul.w	r3, r1, r3
 8009548:	4413      	add	r3, r2
 800954a:	333d      	adds	r3, #61	; 0x3d
 800954c:	2201      	movs	r2, #1
 800954e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	212c      	movs	r1, #44	; 0x2c
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	4413      	add	r3, r2
 800955c:	335c      	adds	r3, #92	; 0x5c
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	4413      	add	r3, r2
 800956a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	440a      	add	r2, r1
 8009578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f009 f94e 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	4413      	add	r3, r2
 800959a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959e:	461a      	mov	r2, r3
 80095a0:	2340      	movs	r3, #64	; 0x40
 80095a2:	6093      	str	r3, [r2, #8]
}
 80095a4:	e2a9      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d12a      	bne.n	8009612 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c8:	461a      	mov	r2, r3
 80095ca:	2308      	movs	r3, #8
 80095cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e8:	f043 0302 	orr.w	r3, r3, #2
 80095ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f009 f918 	bl	801282e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	212c      	movs	r1, #44	; 0x2c
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	4413      	add	r3, r2
 800960a:	3361      	adds	r3, #97	; 0x61
 800960c:	2205      	movs	r2, #5
 800960e:	701a      	strb	r2, [r3, #0]
}
 8009610:	e273      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	4413      	add	r3, r2
 800961a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b10      	cmp	r3, #16
 8009626:	d150      	bne.n	80096ca <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	212c      	movs	r1, #44	; 0x2c
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	335c      	adds	r3, #92	; 0x5c
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	212c      	movs	r1, #44	; 0x2c
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	3361      	adds	r3, #97	; 0x61
 8009648:	2203      	movs	r2, #3
 800964a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	212c      	movs	r1, #44	; 0x2c
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	4413      	add	r3, r2
 8009658:	333d      	adds	r3, #61	; 0x3d
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d112      	bne.n	8009686 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	212c      	movs	r1, #44	; 0x2c
 8009666:	fb01 f303 	mul.w	r3, r1, r3
 800966a:	4413      	add	r3, r2
 800966c:	333c      	adds	r3, #60	; 0x3c
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d108      	bne.n	8009686 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	212c      	movs	r1, #44	; 0x2c
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	4413      	add	r3, r2
 8009680:	333d      	adds	r3, #61	; 0x3d
 8009682:	2201      	movs	r2, #1
 8009684:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	4413      	add	r3, r2
 800968e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	440a      	add	r2, r1
 800969c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a0:	f043 0302 	orr.w	r3, r3, #2
 80096a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	b2d2      	uxtb	r2, r2
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f009 f8bc 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c2:	461a      	mov	r2, r3
 80096c4:	2310      	movs	r3, #16
 80096c6:	6093      	str	r3, [r2, #8]
}
 80096c8:	e217      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096dc:	2b80      	cmp	r3, #128	; 0x80
 80096de:	d174      	bne.n	80097ca <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d121      	bne.n	800972c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	212c      	movs	r1, #44	; 0x2c
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3361      	adds	r3, #97	; 0x61
 80096f6:	2206      	movs	r2, #6
 80096f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	4413      	add	r3, r2
 8009702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	440a      	add	r2, r1
 8009710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009714:	f043 0302 	orr.w	r3, r3, #2
 8009718:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f009 f882 	bl	801282e <USB_HC_Halt>
 800972a:	e044      	b.n	80097b6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	212c      	movs	r1, #44	; 0x2c
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	335c      	adds	r3, #92	; 0x5c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	202c      	movs	r0, #44	; 0x2c
 8009744:	fb00 f303 	mul.w	r3, r0, r3
 8009748:	440b      	add	r3, r1
 800974a:	335c      	adds	r3, #92	; 0x5c
 800974c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	212c      	movs	r1, #44	; 0x2c
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	4413      	add	r3, r2
 800975a:	335c      	adds	r3, #92	; 0x5c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d920      	bls.n	80097a4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	212c      	movs	r1, #44	; 0x2c
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	335c      	adds	r3, #92	; 0x5c
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	212c      	movs	r1, #44	; 0x2c
 800977a:	fb01 f303 	mul.w	r3, r1, r3
 800977e:	4413      	add	r3, r2
 8009780:	3360      	adds	r3, #96	; 0x60
 8009782:	2204      	movs	r2, #4
 8009784:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	b2d9      	uxtb	r1, r3
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	202c      	movs	r0, #44	; 0x2c
 8009790:	fb00 f303 	mul.w	r3, r0, r3
 8009794:	4413      	add	r3, r2
 8009796:	3360      	adds	r3, #96	; 0x60
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f00e fc97 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80097a2:	e008      	b.n	80097b6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	212c      	movs	r1, #44	; 0x2c
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	3360      	adds	r3, #96	; 0x60
 80097b2:	2202      	movs	r2, #2
 80097b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c2:	461a      	mov	r2, r3
 80097c4:	2380      	movs	r3, #128	; 0x80
 80097c6:	6093      	str	r3, [r2, #8]
}
 80097c8:	e197      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e0:	d134      	bne.n	800984c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f009 f80e 	bl	801282e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	4413      	add	r3, r2
 800981a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800981e:	461a      	mov	r2, r3
 8009820:	2310      	movs	r3, #16
 8009822:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009830:	461a      	mov	r2, r3
 8009832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009836:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	212c      	movs	r1, #44	; 0x2c
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	3361      	adds	r3, #97	; 0x61
 8009846:	2208      	movs	r2, #8
 8009848:	701a      	strb	r2, [r3, #0]
}
 800984a:	e156      	b.n	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	4413      	add	r3, r2
 8009854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	f040 814b 	bne.w	8009afa <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	4413      	add	r3, r2
 800986c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	440a      	add	r2, r1
 800987a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800987e:	f023 0302 	bic.w	r3, r3, #2
 8009882:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	212c      	movs	r1, #44	; 0x2c
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	4413      	add	r3, r2
 8009890:	3361      	adds	r3, #97	; 0x61
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d179      	bne.n	800998c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	212c      	movs	r1, #44	; 0x2c
 800989e:	fb01 f303 	mul.w	r3, r1, r3
 80098a2:	4413      	add	r3, r2
 80098a4:	3360      	adds	r3, #96	; 0x60
 80098a6:	2201      	movs	r2, #1
 80098a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	212c      	movs	r1, #44	; 0x2c
 80098b0:	fb01 f303 	mul.w	r3, r1, r3
 80098b4:	4413      	add	r3, r2
 80098b6:	333f      	adds	r3, #63	; 0x3f
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d00a      	beq.n	80098d4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	212c      	movs	r1, #44	; 0x2c
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	333f      	adds	r3, #63	; 0x3f
 80098cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	f040 80fc 	bne.w	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d142      	bne.n	8009962 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	212c      	movs	r1, #44	; 0x2c
 80098e2:	fb01 f303 	mul.w	r3, r1, r3
 80098e6:	4413      	add	r3, r2
 80098e8:	334c      	adds	r3, #76	; 0x4c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80ed 	beq.w	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	212c      	movs	r1, #44	; 0x2c
 80098f8:	fb01 f303 	mul.w	r3, r1, r3
 80098fc:	4413      	add	r3, r2
 80098fe:	334c      	adds	r3, #76	; 0x4c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	202c      	movs	r0, #44	; 0x2c
 8009908:	fb00 f202 	mul.w	r2, r0, r2
 800990c:	440a      	add	r2, r1
 800990e:	3240      	adds	r2, #64	; 0x40
 8009910:	8812      	ldrh	r2, [r2, #0]
 8009912:	4413      	add	r3, r2
 8009914:	3b01      	subs	r3, #1
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	202c      	movs	r0, #44	; 0x2c
 800991c:	fb00 f202 	mul.w	r2, r0, r2
 8009920:	440a      	add	r2, r1
 8009922:	3240      	adds	r2, #64	; 0x40
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	fbb3 f3f2 	udiv	r3, r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80ca 	beq.w	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	212c      	movs	r1, #44	; 0x2c
 800993e:	fb01 f303 	mul.w	r3, r1, r3
 8009942:	4413      	add	r3, r2
 8009944:	3355      	adds	r3, #85	; 0x55
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f083 0301 	eor.w	r3, r3, #1
 800994c:	b2d8      	uxtb	r0, r3
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	212c      	movs	r1, #44	; 0x2c
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	4413      	add	r3, r2
 800995a:	3355      	adds	r3, #85	; 0x55
 800995c:	4602      	mov	r2, r0
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e0b4      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	212c      	movs	r1, #44	; 0x2c
 8009968:	fb01 f303 	mul.w	r3, r1, r3
 800996c:	4413      	add	r3, r2
 800996e:	3355      	adds	r3, #85	; 0x55
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f083 0301 	eor.w	r3, r3, #1
 8009976:	b2d8      	uxtb	r0, r3
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	212c      	movs	r1, #44	; 0x2c
 800997e:	fb01 f303 	mul.w	r3, r1, r3
 8009982:	4413      	add	r3, r2
 8009984:	3355      	adds	r3, #85	; 0x55
 8009986:	4602      	mov	r2, r0
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e09f      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	212c      	movs	r1, #44	; 0x2c
 8009992:	fb01 f303 	mul.w	r3, r1, r3
 8009996:	4413      	add	r3, r2
 8009998:	3361      	adds	r3, #97	; 0x61
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b03      	cmp	r3, #3
 800999e:	d109      	bne.n	80099b4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	212c      	movs	r1, #44	; 0x2c
 80099a6:	fb01 f303 	mul.w	r3, r1, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	3360      	adds	r3, #96	; 0x60
 80099ae:	2202      	movs	r2, #2
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e08b      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	212c      	movs	r1, #44	; 0x2c
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3361      	adds	r3, #97	; 0x61
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d109      	bne.n	80099dc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	212c      	movs	r1, #44	; 0x2c
 80099ce:	fb01 f303 	mul.w	r3, r1, r3
 80099d2:	4413      	add	r3, r2
 80099d4:	3360      	adds	r3, #96	; 0x60
 80099d6:	2202      	movs	r2, #2
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e077      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	212c      	movs	r1, #44	; 0x2c
 80099e2:	fb01 f303 	mul.w	r3, r1, r3
 80099e6:	4413      	add	r3, r2
 80099e8:	3361      	adds	r3, #97	; 0x61
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b05      	cmp	r3, #5
 80099ee:	d109      	bne.n	8009a04 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	212c      	movs	r1, #44	; 0x2c
 80099f6:	fb01 f303 	mul.w	r3, r1, r3
 80099fa:	4413      	add	r3, r2
 80099fc:	3360      	adds	r3, #96	; 0x60
 80099fe:	2205      	movs	r2, #5
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	e063      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	212c      	movs	r1, #44	; 0x2c
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	3361      	adds	r3, #97	; 0x61
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b06      	cmp	r3, #6
 8009a16:	d009      	beq.n	8009a2c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	212c      	movs	r1, #44	; 0x2c
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	3361      	adds	r3, #97	; 0x61
 8009a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d14f      	bne.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	212c      	movs	r1, #44	; 0x2c
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	335c      	adds	r3, #92	; 0x5c
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	202c      	movs	r0, #44	; 0x2c
 8009a44:	fb00 f303 	mul.w	r3, r0, r3
 8009a48:	440b      	add	r3, r1
 8009a4a:	335c      	adds	r3, #92	; 0x5c
 8009a4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	212c      	movs	r1, #44	; 0x2c
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	335c      	adds	r3, #92	; 0x5c
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d912      	bls.n	8009a88 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	212c      	movs	r1, #44	; 0x2c
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	335c      	adds	r3, #92	; 0x5c
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	212c      	movs	r1, #44	; 0x2c
 8009a7a:	fb01 f303 	mul.w	r3, r1, r3
 8009a7e:	4413      	add	r3, r2
 8009a80:	3360      	adds	r3, #96	; 0x60
 8009a82:	2204      	movs	r2, #4
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	e021      	b.n	8009acc <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	212c      	movs	r1, #44	; 0x2c
 8009a8e:	fb01 f303 	mul.w	r3, r1, r3
 8009a92:	4413      	add	r3, r2
 8009a94:	3360      	adds	r3, #96	; 0x60
 8009a96:	2202      	movs	r2, #2
 8009a98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ab0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ab8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad8:	461a      	mov	r2, r3
 8009ada:	2302      	movs	r3, #2
 8009adc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	b2d9      	uxtb	r1, r3
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	202c      	movs	r0, #44	; 0x2c
 8009ae8:	fb00 f303 	mul.w	r3, r0, r3
 8009aec:	4413      	add	r3, r2
 8009aee:	3360      	adds	r3, #96	; 0x60
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f00e faeb 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009afa:	bf00      	nop
 8009afc:	3720      	adds	r7, #32
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b08a      	sub	sp, #40	; 0x28
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	0c5b      	lsrs	r3, r3, #17
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	091b      	lsrs	r3, r3, #4
 8009b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b36:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d004      	beq.n	8009b48 <HCD_RXQLVL_IRQHandler+0x46>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b05      	cmp	r3, #5
 8009b42:	f000 80a9 	beq.w	8009c98 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009b46:	e0aa      	b.n	8009c9e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 80a6 	beq.w	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	212c      	movs	r1, #44	; 0x2c
 8009b56:	fb01 f303 	mul.w	r3, r1, r3
 8009b5a:	4413      	add	r3, r2
 8009b5c:	3344      	adds	r3, #68	; 0x44
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 809b 	beq.w	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	212c      	movs	r1, #44	; 0x2c
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	3350      	adds	r3, #80	; 0x50
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	441a      	add	r2, r3
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	202c      	movs	r0, #44	; 0x2c
 8009b80:	fb00 f303 	mul.w	r3, r0, r3
 8009b84:	440b      	add	r3, r1
 8009b86:	334c      	adds	r3, #76	; 0x4c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d87a      	bhi.n	8009c84 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	212c      	movs	r1, #44	; 0x2c
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3344      	adds	r3, #68	; 0x44
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	b292      	uxth	r2, r2
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f008 f9eb 	bl	8011f82 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	212c      	movs	r1, #44	; 0x2c
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3344      	adds	r3, #68	; 0x44
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	441a      	add	r2, r3
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	202c      	movs	r0, #44	; 0x2c
 8009bc6:	fb00 f303 	mul.w	r3, r0, r3
 8009bca:	440b      	add	r3, r1
 8009bcc:	3344      	adds	r3, #68	; 0x44
 8009bce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	212c      	movs	r1, #44	; 0x2c
 8009bd6:	fb01 f303 	mul.w	r3, r1, r3
 8009bda:	4413      	add	r3, r2
 8009bdc:	3350      	adds	r3, #80	; 0x50
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	441a      	add	r2, r3
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	202c      	movs	r0, #44	; 0x2c
 8009bea:	fb00 f303 	mul.w	r3, r0, r3
 8009bee:	440b      	add	r3, r1
 8009bf0:	3350      	adds	r3, #80	; 0x50
 8009bf2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	0cdb      	lsrs	r3, r3, #19
 8009c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c08:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	212c      	movs	r1, #44	; 0x2c
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	3340      	adds	r3, #64	; 0x40
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d13c      	bne.n	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d039      	beq.n	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c3e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c46:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c54:	461a      	mov	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	212c      	movs	r1, #44	; 0x2c
 8009c60:	fb01 f303 	mul.w	r3, r1, r3
 8009c64:	4413      	add	r3, r2
 8009c66:	3354      	adds	r3, #84	; 0x54
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f083 0301 	eor.w	r3, r3, #1
 8009c6e:	b2d8      	uxtb	r0, r3
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	212c      	movs	r1, #44	; 0x2c
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3354      	adds	r3, #84	; 0x54
 8009c7e:	4602      	mov	r2, r0
 8009c80:	701a      	strb	r2, [r3, #0]
      break;
 8009c82:	e00b      	b.n	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	212c      	movs	r1, #44	; 0x2c
 8009c8a:	fb01 f303 	mul.w	r3, r1, r3
 8009c8e:	4413      	add	r3, r2
 8009c90:	3360      	adds	r3, #96	; 0x60
 8009c92:	2204      	movs	r2, #4
 8009c94:	701a      	strb	r2, [r3, #0]
      break;
 8009c96:	e001      	b.n	8009c9c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009c9c:	bf00      	nop
  }
}
 8009c9e:	bf00      	nop
 8009ca0:	3728      	adds	r7, #40	; 0x28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b086      	sub	sp, #24
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009cd2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d10b      	bne.n	8009cf6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d102      	bne.n	8009cee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f00e f9d5 	bl	8018098 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f043 0302 	orr.w	r3, r3, #2
 8009cf4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d132      	bne.n	8009d66 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f043 0308 	orr.w	r3, r3, #8
 8009d06:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f003 0304 	and.w	r3, r3, #4
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d126      	bne.n	8009d60 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d113      	bne.n	8009d42 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d24:	d106      	bne.n	8009d34 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f008 fa57 	bl	80121e0 <USB_InitFSLSPClkSel>
 8009d32:	e011      	b.n	8009d58 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f008 fa50 	bl	80121e0 <USB_InitFSLSPClkSel>
 8009d40:	e00a      	b.n	8009d58 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d106      	bne.n	8009d58 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d50:	461a      	mov	r2, r3
 8009d52:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009d56:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f00e f9cb 	bl	80180f4 <HAL_HCD_PortEnabled_Callback>
 8009d5e:	e002      	b.n	8009d66 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f00e f9d5 	bl	8018110 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b20      	cmp	r3, #32
 8009d6e:	d103      	bne.n	8009d78 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f043 0320 	orr.w	r3, r3, #32
 8009d76:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d7e:	461a      	mov	r2, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	6013      	str	r3, [r2, #0]
}
 8009d84:	bf00      	nop
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e07f      	b.n	8009e9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f9 f900 	bl	8002fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2224      	movs	r2, #36	; 0x24
 8009dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0201 	bic.w	r2, r2, #1
 8009dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d107      	bne.n	8009e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e02:	609a      	str	r2, [r3, #8]
 8009e04:	e006      	b.n	8009e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d104      	bne.n	8009e26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6859      	ldr	r1, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <HAL_I2C_Init+0x11c>)
 8009e32:	430b      	orrs	r3, r1
 8009e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691a      	ldr	r2, [r3, #16]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	ea42 0103 	orr.w	r1, r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	021a      	lsls	r2, r3, #8
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	69d9      	ldr	r1, [r3, #28]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	02008000 	.word	0x02008000

08009eac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e021      	b.n	8009f02 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2224      	movs	r2, #36	; 0x24
 8009ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0201 	bic.w	r2, r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f9 f8e6 	bl	80030a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	4608      	mov	r0, r1
 8009f16:	4611      	mov	r1, r2
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	817b      	strh	r3, [r7, #10]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	813b      	strh	r3, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b20      	cmp	r3, #32
 8009f30:	f040 80f9 	bne.w	800a126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <HAL_I2C_Mem_Write+0x34>
 8009f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d105      	bne.n	8009f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e0ed      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_I2C_Mem_Write+0x4e>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e0e6      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f62:	f7fc f859 	bl	8006018 <HAL_GetTick>
 8009f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	2319      	movs	r3, #25
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fac3 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e0d1      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2221      	movs	r2, #33	; 0x21
 8009f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a3a      	ldr	r2, [r7, #32]
 8009f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fac:	88f8      	ldrh	r0, [r7, #6]
 8009fae:	893a      	ldrh	r2, [r7, #8]
 8009fb0:	8979      	ldrh	r1, [r7, #10]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	4603      	mov	r3, r0
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f9d3 	bl	800a368 <I2C_RequestMemoryWrite>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e0a9      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2bff      	cmp	r3, #255	; 0xff
 8009fdc:	d90e      	bls.n	8009ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	8979      	ldrh	r1, [r7, #10]
 8009fec:	2300      	movs	r3, #0
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fba5 	bl	800a744 <I2C_TransferConfig>
 8009ffa:	e00f      	b.n	800a01c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a000:	b29a      	uxth	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	8979      	ldrh	r1, [r7, #10]
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fb94 	bl	800a744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 faad 	bl	800a580 <I2C_WaitOnTXISFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e07b      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	781a      	ldrb	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	3b01      	subs	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a058:	3b01      	subs	r3, #1
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d034      	beq.n	800a0d4 <HAL_I2C_Mem_Write+0x1c8>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d130      	bne.n	800a0d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	2200      	movs	r2, #0
 800a07a:	2180      	movs	r1, #128	; 0x80
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fa3f 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e04d      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a090:	b29b      	uxth	r3, r3
 800a092:	2bff      	cmp	r3, #255	; 0xff
 800a094:	d90e      	bls.n	800a0b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	8979      	ldrh	r1, [r7, #10]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 fb49 	bl	800a744 <I2C_TransferConfig>
 800a0b2:	e00f      	b.n	800a0d4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	8979      	ldrh	r1, [r7, #10]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 fb38 	bl	800a744 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d19e      	bne.n	800a01c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fa8c 	bl	800a600 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e01a      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6859      	ldr	r1, [r3, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <HAL_I2C_Mem_Write+0x224>)
 800a106:	400b      	ands	r3, r1
 800a108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	e000      	b.n	800a128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a126:	2302      	movs	r3, #2
  }
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	fe00e800 	.word	0xfe00e800

0800a134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af02      	add	r7, sp, #8
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	4608      	mov	r0, r1
 800a13e:	4611      	mov	r1, r2
 800a140:	461a      	mov	r2, r3
 800a142:	4603      	mov	r3, r0
 800a144:	817b      	strh	r3, [r7, #10]
 800a146:	460b      	mov	r3, r1
 800a148:	813b      	strh	r3, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b20      	cmp	r3, #32
 800a158:	f040 80fd 	bne.w	800a356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <HAL_I2C_Mem_Read+0x34>
 800a162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d105      	bne.n	800a174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e0f1      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_I2C_Mem_Read+0x4e>
 800a17e:	2302      	movs	r3, #2
 800a180:	e0ea      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a18a:	f7fb ff45 	bl	8006018 <HAL_GetTick>
 800a18e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	2319      	movs	r3, #25
 800a196:	2201      	movs	r2, #1
 800a198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f9af 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0d5      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2222      	movs	r2, #34	; 0x22
 800a1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2240      	movs	r2, #64	; 0x40
 800a1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a3a      	ldr	r2, [r7, #32]
 800a1c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1d4:	88f8      	ldrh	r0, [r7, #6]
 800a1d6:	893a      	ldrh	r2, [r7, #8]
 800a1d8:	8979      	ldrh	r1, [r7, #10]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f913 	bl	800a410 <I2C_RequestMemoryRead>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e0ad      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a200:	b29b      	uxth	r3, r3
 800a202:	2bff      	cmp	r3, #255	; 0xff
 800a204:	d90e      	bls.n	800a224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	22ff      	movs	r2, #255	; 0xff
 800a20a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a210:	b2da      	uxtb	r2, r3
 800a212:	8979      	ldrh	r1, [r7, #10]
 800a214:	4b52      	ldr	r3, [pc, #328]	; (800a360 <HAL_I2C_Mem_Read+0x22c>)
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fa91 	bl	800a744 <I2C_TransferConfig>
 800a222:	e00f      	b.n	800a244 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a232:	b2da      	uxtb	r2, r3
 800a234:	8979      	ldrh	r1, [r7, #10]
 800a236:	4b4a      	ldr	r3, [pc, #296]	; (800a360 <HAL_I2C_Mem_Read+0x22c>)
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fa80 	bl	800a744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	2200      	movs	r2, #0
 800a24c:	2104      	movs	r1, #4
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f956 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e07c      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b01      	subs	r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d034      	beq.n	800a304 <HAL_I2C_Mem_Read+0x1d0>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d130      	bne.n	800a304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2180      	movs	r1, #128	; 0x80
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f927 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e04d      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2bff      	cmp	r3, #255	; 0xff
 800a2c4:	d90e      	bls.n	800a2e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	22ff      	movs	r2, #255	; 0xff
 800a2ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	8979      	ldrh	r1, [r7, #10]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fa31 	bl	800a744 <I2C_TransferConfig>
 800a2e2:	e00f      	b.n	800a304 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	8979      	ldrh	r1, [r7, #10]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 fa20 	bl	800a744 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d19a      	bne.n	800a244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f974 	bl	800a600 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e01a      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2220      	movs	r2, #32
 800a328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	6859      	ldr	r1, [r3, #4]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <HAL_I2C_Mem_Read+0x230>)
 800a336:	400b      	ands	r3, r1
 800a338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	e000      	b.n	800a358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a356:	2302      	movs	r3, #2
  }
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3718      	adds	r7, #24
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	80002400 	.word	0x80002400
 800a364:	fe00e800 	.word	0xfe00e800

0800a368 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	4603      	mov	r3, r0
 800a378:	817b      	strh	r3, [r7, #10]
 800a37a:	460b      	mov	r3, r1
 800a37c:	813b      	strh	r3, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	b2da      	uxtb	r2, r3
 800a386:	8979      	ldrh	r1, [r7, #10]
 800a388:	4b20      	ldr	r3, [pc, #128]	; (800a40c <I2C_RequestMemoryWrite+0xa4>)
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 f9d7 	bl	800a744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	69b9      	ldr	r1, [r7, #24]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f8f0 	bl	800a580 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e02c      	b.n	800a404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d105      	bne.n	800a3bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3b0:	893b      	ldrh	r3, [r7, #8]
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	629a      	str	r2, [r3, #40]	; 0x28
 800a3ba:	e015      	b.n	800a3e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a3bc:	893b      	ldrh	r3, [r7, #8]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	69b9      	ldr	r1, [r7, #24]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f8d6 	bl	800a580 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e012      	b.n	800a404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3de:	893b      	ldrh	r3, [r7, #8]
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2180      	movs	r1, #128	; 0x80
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f884 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	80002000 	.word	0x80002000

0800a410 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af02      	add	r7, sp, #8
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	4608      	mov	r0, r1
 800a41a:	4611      	mov	r1, r2
 800a41c:	461a      	mov	r2, r3
 800a41e:	4603      	mov	r3, r0
 800a420:	817b      	strh	r3, [r7, #10]
 800a422:	460b      	mov	r3, r1
 800a424:	813b      	strh	r3, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a42a:	88fb      	ldrh	r3, [r7, #6]
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	8979      	ldrh	r1, [r7, #10]
 800a430:	4b20      	ldr	r3, [pc, #128]	; (800a4b4 <I2C_RequestMemoryRead+0xa4>)
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 f984 	bl	800a744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a43c:	69fa      	ldr	r2, [r7, #28]
 800a43e:	69b9      	ldr	r1, [r7, #24]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f89d 	bl	800a580 <I2C_WaitOnTXISFlagUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e02c      	b.n	800a4aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d105      	bne.n	800a462 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a456:	893b      	ldrh	r3, [r7, #8]
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28
 800a460:	e015      	b.n	800a48e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a462:	893b      	ldrh	r3, [r7, #8]
 800a464:	0a1b      	lsrs	r3, r3, #8
 800a466:	b29b      	uxth	r3, r3
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	69b9      	ldr	r1, [r7, #24]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 f883 	bl	800a580 <I2C_WaitOnTXISFlagUntilTimeout>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e012      	b.n	800a4aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a484:	893b      	ldrh	r3, [r7, #8]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	2200      	movs	r2, #0
 800a496:	2140      	movs	r1, #64	; 0x40
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f831 	bl	800a500 <I2C_WaitOnFlagUntilTimeout>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	80002000 	.word	0x80002000

0800a4b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d103      	bne.n	800a4d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d007      	beq.n	800a4f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0201 	orr.w	r2, r2, #1
 800a4f2:	619a      	str	r2, [r3, #24]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a510:	e022      	b.n	800a558 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a518:	d01e      	beq.n	800a558 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a51a:	f7fb fd7d 	bl	8006018 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d302      	bcc.n	800a530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d113      	bne.n	800a558 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a534:	f043 0220 	orr.w	r2, r3, #32
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e00f      	b.n	800a578 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699a      	ldr	r2, [r3, #24]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	429a      	cmp	r2, r3
 800a566:	bf0c      	ite	eq
 800a568:	2301      	moveq	r3, #1
 800a56a:	2300      	movne	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	429a      	cmp	r2, r3
 800a574:	d0cd      	beq.n	800a512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a58c:	e02c      	b.n	800a5e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f870 	bl	800a678 <I2C_IsAcknowledgeFailed>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e02a      	b.n	800a5f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a8:	d01e      	beq.n	800a5e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5aa:	f7fb fd35 	bl	8006018 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d113      	bne.n	800a5e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c4:	f043 0220 	orr.w	r2, r3, #32
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e007      	b.n	800a5f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	f003 0302 	and.w	r3, r3, #2
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d1cb      	bne.n	800a58e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a60c:	e028      	b.n	800a660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f830 	bl	800a678 <I2C_IsAcknowledgeFailed>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e026      	b.n	800a670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fb fcf9 	bl	8006018 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d113      	bne.n	800a660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63c:	f043 0220 	orr.w	r2, r3, #32
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2220      	movs	r2, #32
 800a648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e007      	b.n	800a670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d1cf      	bne.n	800a60e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d151      	bne.n	800a736 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a692:	e022      	b.n	800a6da <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a69a:	d01e      	beq.n	800a6da <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a69c:	f7fb fcbc 	bl	8006018 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d302      	bcc.n	800a6b2 <I2C_IsAcknowledgeFailed+0x3a>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d113      	bne.n	800a6da <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b6:	f043 0220 	orr.w	r2, r3, #32
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e02e      	b.n	800a738 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d1d5      	bne.n	800a694 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2210      	movs	r2, #16
 800a6ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fedd 	bl	800a4b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6859      	ldr	r1, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <I2C_IsAcknowledgeFailed+0xc8>)
 800a70a:	400b      	ands	r3, r1
 800a70c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	f043 0204 	orr.w	r2, r3, #4
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	fe00e800 	.word	0xfe00e800

0800a744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	607b      	str	r3, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	817b      	strh	r3, [r7, #10]
 800a752:	4613      	mov	r3, r2
 800a754:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	0d5b      	lsrs	r3, r3, #21
 800a760:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a764:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <I2C_TransferConfig+0x58>)
 800a766:	430b      	orrs	r3, r1
 800a768:	43db      	mvns	r3, r3
 800a76a:	ea02 0103 	and.w	r1, r2, r3
 800a76e:	897b      	ldrh	r3, [r7, #10]
 800a770:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a774:	7a7b      	ldrb	r3, [r7, #9]
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	431a      	orrs	r2, r3
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	431a      	orrs	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	03ff63ff 	.word	0x03ff63ff

0800a7a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b20      	cmp	r3, #32
 800a7b4:	d138      	bne.n	800a828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d101      	bne.n	800a7c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e032      	b.n	800a82a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2224      	movs	r2, #36	; 0x24
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0201 	bic.w	r2, r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a7f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0201 	orr.w	r2, r2, #1
 800a812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	e000      	b.n	800a82a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a828:	2302      	movs	r3, #2
  }
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b20      	cmp	r3, #32
 800a84a:	d139      	bne.n	800a8c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a852:	2b01      	cmp	r3, #1
 800a854:	d101      	bne.n	800a85a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a856:	2302      	movs	r3, #2
 800a858:	e033      	b.n	800a8c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2224      	movs	r2, #36	; 0x24
 800a866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0201 	bic.w	r2, r2, #1
 800a878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0201 	orr.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e000      	b.n	800a8c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8c0:	2302      	movs	r3, #2
  }
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
	...

0800a8d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e0bf      	b.n	800aa62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7f8 fc12 	bl	8003120 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	699a      	ldr	r2, [r3, #24]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a912:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6999      	ldr	r1, [r3, #24]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a928:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6899      	ldr	r1, [r3, #8]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b4a      	ldr	r3, [pc, #296]	; (800aa6c <HAL_LTDC_Init+0x19c>)
 800a944:	400b      	ands	r3, r1
 800a946:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	041b      	lsls	r3, r3, #16
 800a94e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6899      	ldr	r1, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	699a      	ldr	r2, [r3, #24]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68d9      	ldr	r1, [r3, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	4b3e      	ldr	r3, [pc, #248]	; (800aa6c <HAL_LTDC_Init+0x19c>)
 800a972:	400b      	ands	r3, r1
 800a974:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	041b      	lsls	r3, r3, #16
 800a97c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68d9      	ldr	r1, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a1a      	ldr	r2, [r3, #32]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	431a      	orrs	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6919      	ldr	r1, [r3, #16]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b33      	ldr	r3, [pc, #204]	; (800aa6c <HAL_LTDC_Init+0x19c>)
 800a9a0:	400b      	ands	r3, r1
 800a9a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	041b      	lsls	r3, r3, #16
 800a9aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6919      	ldr	r1, [r3, #16]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6959      	ldr	r1, [r3, #20]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b27      	ldr	r3, [pc, #156]	; (800aa6c <HAL_LTDC_Init+0x19c>)
 800a9ce:	400b      	ands	r3, r1
 800a9d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6959      	ldr	r1, [r3, #20]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa26:	431a      	orrs	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0206 	orr.w	r2, r2, #6
 800aa3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0201 	orr.w	r2, r2, #1
 800aa4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	f000f800 	.word	0xf000f800

0800aa70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aa70:	b5b0      	push	{r4, r5, r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d101      	bne.n	800aa8a <HAL_LTDC_ConfigLayer+0x1a>
 800aa86:	2302      	movs	r3, #2
 800aa88:	e02c      	b.n	800aae4 <HAL_LTDC_ConfigLayer+0x74>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2202      	movs	r2, #2
 800aa96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2134      	movs	r1, #52	; 0x34
 800aaa0:	fb01 f303 	mul.w	r3, r1, r3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4614      	mov	r4, r2
 800aaae:	461d      	mov	r5, r3
 800aab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 f847 	bl	800ab58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2201      	movs	r2, #1
 800aad0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bdb0      	pop	{r4, r5, r7, pc}

0800aaec <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <HAL_LTDC_SetAddress+0x1a>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e024      	b.n	800ab50 <HAL_LTDC_SetAddress+0x64>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2202      	movs	r2, #2
 800ab12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2234      	movs	r2, #52	; 0x34
 800ab1a:	fb02 f303 	mul.w	r3, r2, r3
 800ab1e:	3338      	adds	r3, #56	; 0x38
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6979      	ldr	r1, [r7, #20]
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 f811 	bl	800ab58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b089      	sub	sp, #36	; 0x24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab74:	4413      	add	r3, r2
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	01db      	lsls	r3, r3, #7
 800ab84:	4413      	add	r3, r2
 800ab86:	3384      	adds	r3, #132	; 0x84
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	6812      	ldr	r2, [r2, #0]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	01d2      	lsls	r2, r2, #7
 800ab94:	440a      	add	r2, r1
 800ab96:	3284      	adds	r2, #132	; 0x84
 800ab98:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ab9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	0c1b      	lsrs	r3, r3, #16
 800abaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abae:	4413      	add	r3, r2
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4619      	mov	r1, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	01db      	lsls	r3, r3, #7
 800abbc:	440b      	add	r3, r1
 800abbe:	3384      	adds	r3, #132	; 0x84
 800abc0:	4619      	mov	r1, r3
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	68da      	ldr	r2, [r3, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd6:	4413      	add	r3, r2
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	01db      	lsls	r3, r3, #7
 800abe6:	4413      	add	r3, r2
 800abe8:	3384      	adds	r3, #132	; 0x84
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	6812      	ldr	r2, [r2, #0]
 800abf0:	4611      	mov	r1, r2
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	01d2      	lsls	r2, r2, #7
 800abf6:	440a      	add	r2, r1
 800abf8:	3284      	adds	r2, #132	; 0x84
 800abfa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800abfe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac0e:	4413      	add	r3, r2
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4619      	mov	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	01db      	lsls	r3, r3, #7
 800ac1c:	440b      	add	r3, r1
 800ac1e:	3384      	adds	r3, #132	; 0x84
 800ac20:	4619      	mov	r1, r3
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	01db      	lsls	r3, r3, #7
 800ac32:	4413      	add	r3, r2
 800ac34:	3384      	adds	r3, #132	; 0x84
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	01d2      	lsls	r2, r2, #7
 800ac42:	440a      	add	r2, r1
 800ac44:	3284      	adds	r2, #132	; 0x84
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	01db      	lsls	r3, r3, #7
 800ac56:	4413      	add	r3, r2
 800ac58:	3384      	adds	r3, #132	; 0x84
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac72:	041b      	lsls	r3, r3, #16
 800ac74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	061b      	lsls	r3, r3, #24
 800ac7c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	01db      	lsls	r3, r3, #7
 800ac88:	4413      	add	r3, r2
 800ac8a:	3384      	adds	r3, #132	; 0x84
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	01db      	lsls	r3, r3, #7
 800ac98:	4413      	add	r3, r2
 800ac9a:	3384      	adds	r3, #132	; 0x84
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aca8:	461a      	mov	r2, r3
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	431a      	orrs	r2, r3
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4619      	mov	r1, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	01db      	lsls	r3, r3, #7
 800acbc:	440b      	add	r3, r1
 800acbe:	3384      	adds	r3, #132	; 0x84
 800acc0:	4619      	mov	r1, r3
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	461a      	mov	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	01db      	lsls	r3, r3, #7
 800acd2:	4413      	add	r3, r2
 800acd4:	3384      	adds	r3, #132	; 0x84
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	6812      	ldr	r2, [r2, #0]
 800acdc:	4611      	mov	r1, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	01d2      	lsls	r2, r2, #7
 800ace2:	440a      	add	r2, r1
 800ace4:	3284      	adds	r2, #132	; 0x84
 800ace6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	01db      	lsls	r3, r3, #7
 800acf6:	4413      	add	r3, r2
 800acf8:	3384      	adds	r3, #132	; 0x84
 800acfa:	461a      	mov	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	01db      	lsls	r3, r3, #7
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3384      	adds	r3, #132	; 0x84
 800ad10:	69da      	ldr	r2, [r3, #28]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4619      	mov	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	01db      	lsls	r3, r3, #7
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3384      	adds	r3, #132	; 0x84
 800ad20:	4619      	mov	r1, r3
 800ad22:	4b58      	ldr	r3, [pc, #352]	; (800ae84 <LTDC_SetConfig+0x32c>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	69da      	ldr	r2, [r3, #28]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	68f9      	ldr	r1, [r7, #12]
 800ad32:	6809      	ldr	r1, [r1, #0]
 800ad34:	4608      	mov	r0, r1
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	01c9      	lsls	r1, r1, #7
 800ad3a:	4401      	add	r1, r0
 800ad3c:	3184      	adds	r1, #132	; 0x84
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	01db      	lsls	r3, r3, #7
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3384      	adds	r3, #132	; 0x84
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	01db      	lsls	r3, r3, #7
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3384      	adds	r3, #132	; 0x84
 800ad60:	461a      	mov	r2, r3
 800ad62:	2300      	movs	r3, #0
 800ad64:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	01db      	lsls	r3, r3, #7
 800ad70:	4413      	add	r3, r2
 800ad72:	3384      	adds	r3, #132	; 0x84
 800ad74:	461a      	mov	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ad84:	2304      	movs	r3, #4
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	e01b      	b.n	800adc2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d102      	bne.n	800ad98 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ad92:	2303      	movs	r3, #3
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	e014      	b.n	800adc2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d00b      	beq.n	800adb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d007      	beq.n	800adb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800adac:	2b03      	cmp	r3, #3
 800adae:	d003      	beq.n	800adb8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800adb4:	2b07      	cmp	r3, #7
 800adb6:	d102      	bne.n	800adbe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800adb8:	2302      	movs	r3, #2
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e001      	b.n	800adc2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800adbe:	2301      	movs	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	01db      	lsls	r3, r3, #7
 800adcc:	4413      	add	r3, r2
 800adce:	3384      	adds	r3, #132	; 0x84
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	6812      	ldr	r2, [r2, #0]
 800add6:	4611      	mov	r1, r2
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	01d2      	lsls	r2, r2, #7
 800addc:	440a      	add	r2, r1
 800adde:	3284      	adds	r2, #132	; 0x84
 800ade0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ade4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	fb02 f303 	mul.w	r3, r2, r3
 800adf0:	041a      	lsls	r2, r3, #16
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	6859      	ldr	r1, [r3, #4]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	1acb      	subs	r3, r1, r3
 800adfc:	69f9      	ldr	r1, [r7, #28]
 800adfe:	fb01 f303 	mul.w	r3, r1, r3
 800ae02:	3303      	adds	r3, #3
 800ae04:	68f9      	ldr	r1, [r7, #12]
 800ae06:	6809      	ldr	r1, [r1, #0]
 800ae08:	4608      	mov	r0, r1
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	01c9      	lsls	r1, r1, #7
 800ae0e:	4401      	add	r1, r0
 800ae10:	3184      	adds	r1, #132	; 0x84
 800ae12:	4313      	orrs	r3, r2
 800ae14:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	01db      	lsls	r3, r3, #7
 800ae20:	4413      	add	r3, r2
 800ae22:	3384      	adds	r3, #132	; 0x84
 800ae24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	01db      	lsls	r3, r3, #7
 800ae30:	440b      	add	r3, r1
 800ae32:	3384      	adds	r3, #132	; 0x84
 800ae34:	4619      	mov	r1, r3
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <LTDC_SetConfig+0x330>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	01db      	lsls	r3, r3, #7
 800ae46:	4413      	add	r3, r2
 800ae48:	3384      	adds	r3, #132	; 0x84
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	01db      	lsls	r3, r3, #7
 800ae5c:	4413      	add	r3, r2
 800ae5e:	3384      	adds	r3, #132	; 0x84
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	6812      	ldr	r2, [r2, #0]
 800ae66:	4611      	mov	r1, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	01d2      	lsls	r2, r2, #7
 800ae6c:	440a      	add	r2, r1
 800ae6e:	3284      	adds	r2, #132	; 0x84
 800ae70:	f043 0301 	orr.w	r3, r3, #1
 800ae74:	6013      	str	r3, [r2, #0]
}
 800ae76:	bf00      	nop
 800ae78:	3724      	adds	r7, #36	; 0x24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	fffff8f8 	.word	0xfffff8f8
 800ae88:	fffff800 	.word	0xfffff800

0800ae8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a04      	ldr	r2, [pc, #16]	; (800aea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae9a:	6013      	str	r3, [r2, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	40007000 	.word	0x40007000

0800aeac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aeb6:	4b23      	ldr	r3, [pc, #140]	; (800af44 <HAL_PWREx_EnableOverDrive+0x98>)
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	4a22      	ldr	r2, [pc, #136]	; (800af44 <HAL_PWREx_EnableOverDrive+0x98>)
 800aebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec0:	6413      	str	r3, [r2, #64]	; 0x40
 800aec2:	4b20      	ldr	r3, [pc, #128]	; (800af44 <HAL_PWREx_EnableOverDrive+0x98>)
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aece:	4b1e      	ldr	r3, [pc, #120]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a1d      	ldr	r2, [pc, #116]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aed8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aeda:	f7fb f89d 	bl	8006018 <HAL_GetTick>
 800aede:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aee0:	e009      	b.n	800aef6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aee2:	f7fb f899 	bl	8006018 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aef0:	d901      	bls.n	800aef6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e022      	b.n	800af3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aef6:	4b14      	ldr	r3, [pc, #80]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af02:	d1ee      	bne.n	800aee2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800af04:	4b10      	ldr	r3, [pc, #64]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a0f      	ldr	r2, [pc, #60]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af10:	f7fb f882 	bl	8006018 <HAL_GetTick>
 800af14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af16:	e009      	b.n	800af2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af18:	f7fb f87e 	bl	8006018 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af26:	d901      	bls.n	800af2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e007      	b.n	800af3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af38:	d1ee      	bne.n	800af18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	40023800 	.word	0x40023800
 800af48:	40007000 	.word	0x40007000

0800af4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af02      	add	r7, sp, #8
 800af52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800af54:	f7fb f860 	bl	8006018 <HAL_GetTick>
 800af58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e067      	b.n	800b034 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10b      	bne.n	800af88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7f8 f991 	bl	80032a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800af7e:	f241 3188 	movw	r1, #5000	; 0x1388
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fda8 	bl	800bad8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	3b01      	subs	r3, #1
 800af98:	021a      	lsls	r2, r3, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	2120      	movs	r1, #32
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fdd3 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800afb4:	4603      	mov	r3, r0
 800afb6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d135      	bne.n	800b02a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <HAL_QSPI_Init+0xf0>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6852      	ldr	r2, [r2, #4]
 800afcc:	0611      	lsls	r1, r2, #24
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	68d2      	ldr	r2, [r2, #12]
 800afd2:	4311      	orrs	r1, r2
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	69d2      	ldr	r2, [r2, #28]
 800afd8:	4311      	orrs	r1, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6a12      	ldr	r2, [r2, #32]
 800afde:	4311      	orrs	r1, r2
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	4b14      	ldr	r3, [pc, #80]	; (800b040 <HAL_QSPI_Init+0xf4>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6912      	ldr	r2, [r2, #16]
 800aff6:	0411      	lsls	r1, r2, #16
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6952      	ldr	r2, [r2, #20]
 800affc:	4311      	orrs	r1, r2
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	6992      	ldr	r2, [r2, #24]
 800b002:	4311      	orrs	r1, r2
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	6812      	ldr	r2, [r2, #0]
 800b008:	430b      	orrs	r3, r1
 800b00a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0201 	orr.w	r2, r2, #1
 800b01a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b032:	7afb      	ldrb	r3, [r7, #11]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	00ffff2f 	.word	0x00ffff2f
 800b040:	ffe0f8fe 	.word	0xffe0f8fe

0800b044 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f003 0304 	and.w	r3, r3, #4
 800b062:	2b00      	cmp	r3, #0
 800b064:	d064      	beq.n	800b130 <HAL_QSPI_IRQHandler+0xec>
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d05f      	beq.n	800b130 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3320      	adds	r3, #32
 800b076:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b12      	cmp	r3, #18
 800b082:	d125      	bne.n	800b0d0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b084:	e01c      	b.n	800b0c0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00f      	beq.n	800b0ae <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	1e5a      	subs	r2, r3, #1
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	62da      	str	r2, [r3, #44]	; 0x2c
 800b0ac:	e008      	b.n	800b0c0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0bc:	601a      	str	r2, [r3, #0]
          break;
 800b0be:	e033      	b.n	800b128 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 0304 	and.w	r3, r3, #4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1db      	bne.n	800b086 <HAL_QSPI_IRQHandler+0x42>
 800b0ce:	e02b      	b.n	800b128 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b22      	cmp	r3, #34	; 0x22
 800b0da:	d125      	bne.n	800b128 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b0dc:	e01d      	b.n	800b11a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d010      	beq.n	800b108 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	7812      	ldrb	r2, [r2, #0]
 800b0ee:	b2d2      	uxtb	r2, r2
 800b0f0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b100:	1e5a      	subs	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	639a      	str	r2, [r3, #56]	; 0x38
 800b106:	e008      	b.n	800b11a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b116:	601a      	str	r2, [r3, #0]
          break;
 800b118:	e006      	b.n	800b128 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 0304 	and.w	r3, r3, #4
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1da      	bne.n	800b0de <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fbed 	bl	800b908 <HAL_QSPI_FifoThresholdCallback>
 800b12e:	e142      	b.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 80b6 	beq.w	800b2a8 <HAL_QSPI_IRQHandler+0x264>
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 80b0 	beq.w	800b2a8 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2202      	movs	r2, #2
 800b14e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b15e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b12      	cmp	r3, #18
 800b16a:	d123      	bne.n	800b1b4 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d011      	beq.n	800b19e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0204 	bic.w	r2, r2, #4
 800b188:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0201 	bic.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fc3e 	bl	800ba20 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fba1 	bl	800b8f4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b1b2:	e0fd      	b.n	800b3b0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b22      	cmp	r3, #34	; 0x22
 800b1be:	d146      	bne.n	800b24e <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0304 	and.w	r3, r3, #4
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d012      	beq.n	800b1f4 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f022 0204 	bic.w	r2, r2, #4
 800b1dc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0201 	bic.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e021      	b.n	800b238 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3320      	adds	r3, #32
 800b1fa:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b1fc:	e013      	b.n	800b226 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b202:	2b00      	cmp	r3, #0
 800b204:	d017      	beq.n	800b236 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	7812      	ldrb	r2, [r2, #0]
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b220:	1e5a      	subs	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e4      	bne.n	800b1fe <HAL_QSPI_IRQHandler+0x1ba>
 800b234:	e000      	b.n	800b238 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800b236:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fbf1 	bl	800ba20 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fb4a 	bl	800b8e0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b24c:	e0b0      	b.n	800b3b0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b02      	cmp	r3, #2
 800b258:	d107      	bne.n	800b26a <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fb32 	bl	800b8cc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b268:	e0a2      	b.n	800b3b0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b08      	cmp	r3, #8
 800b274:	f040 809c 	bne.w	800b3b0 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	695a      	ldr	r2, [r3, #20]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b286:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b294:	2b00      	cmp	r3, #0
 800b296:	d103      	bne.n	800b2a0 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fb0d 	bl	800b8b8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b29e:	e087      	b.n	800b3b0 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 faff 	bl	800b8a4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b2a6:	e083      	b.n	800b3b0 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01f      	beq.n	800b2f2 <HAL_QSPI_IRQHandler+0x2ae>
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b2e0:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb16 	bl	800b91c <HAL_QSPI_StatusMatchCallback>
 800b2f0:	e061      	b.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d047      	beq.n	800b38c <HAL_QSPI_IRQHandler+0x348>
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d042      	beq.n	800b38c <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b31c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b322:	f043 0202 	orr.w	r2, r3, #2
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d021      	beq.n	800b37c <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f022 0204 	bic.w	r2, r2, #4
 800b346:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	4a1c      	ldr	r2, [pc, #112]	; (800b3c0 <HAL_QSPI_IRQHandler+0x37c>)
 800b34e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b354:	4618      	mov	r0, r3
 800b356:	f7fb fe59 	bl	800700c <HAL_DMA_Abort_IT>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d029      	beq.n	800b3b4 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b364:	f043 0204 	orr.w	r2, r3, #4
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa95 	bl	800b8a4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b37a:	e01b      	b.n	800b3b4 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fa8d 	bl	800b8a4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b38a:	e013      	b.n	800b3b4 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f003 0310 	and.w	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00f      	beq.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00a      	beq.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2210      	movs	r2, #16
 800b3a6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fac1 	bl	800b930 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800b3ae:	e002      	b.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b3b0:	bf00      	nop
 800b3b2:	e000      	b.n	800b3b6 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b3b4:	bf00      	nop
}
 800b3b6:	bf00      	nop
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800baf5 	.word	0x0800baf5

0800b3c4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b3d0:	f7fa fe22 	bl	8006018 <HAL_GetTick>
 800b3d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <HAL_QSPI_Command+0x22>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e048      	b.n	800b478 <HAL_QSPI_Command+0xb4>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d137      	bne.n	800b46a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2200      	movs	r2, #0
 800b410:	2120      	movs	r1, #32
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 fba1 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d125      	bne.n	800b46e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b422:	2200      	movs	r2, #0
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fbce 	bl	800bbc8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	2b00      	cmp	r3, #0
 800b432:	d115      	bne.n	800b460 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2201      	movs	r2, #1
 800b43c:	2102      	movs	r1, #2
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f000 fb8b 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b444:	4603      	mov	r3, r0
 800b446:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10f      	bne.n	800b46e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2202      	movs	r2, #2
 800b454:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b45e:	e006      	b.n	800b46e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b468:	e001      	b.n	800b46e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b46a:	2302      	movs	r3, #2
 800b46c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08a      	sub	sp, #40	; 0x28
 800b484:	af02      	add	r7, sp, #8
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b490:	f7fa fdc2 	bl	8006018 <HAL_GetTick>
 800b494:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3320      	adds	r3, #32
 800b49c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d101      	bne.n	800b4ae <HAL_QSPI_Transmit+0x2e>
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	e07b      	b.n	800b5a6 <HAL_QSPI_Transmit+0x126>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d16a      	bne.n	800b598 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d05b      	beq.n	800b586 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2212      	movs	r2, #18
 800b4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	1c5a      	adds	r2, r3, #1
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	695a      	ldr	r2, [r3, #20]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b502:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b504:	e01b      	b.n	800b53e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	2201      	movs	r2, #1
 800b50e:	2104      	movs	r1, #4
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 fb22 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b516:	4603      	mov	r3, r0
 800b518:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d113      	bne.n	800b548 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	781a      	ldrb	r2, [r3, #0]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1df      	bne.n	800b506 <HAL_QSPI_Transmit+0x86>
 800b546:	e000      	b.n	800b54a <HAL_QSPI_Transmit+0xca>
          break;
 800b548:	bf00      	nop
      }

      if (status == HAL_OK)
 800b54a:	7ffb      	ldrb	r3, [r7, #31]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d115      	bne.n	800b57c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2201      	movs	r2, #1
 800b558:	2102      	movs	r1, #2
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fafd 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b560:	4603      	mov	r3, r0
 800b562:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b564:	7ffb      	ldrb	r3, [r7, #31]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d108      	bne.n	800b57c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2202      	movs	r2, #2
 800b570:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f9e6 	bl	800b944 <HAL_QSPI_Abort>
 800b578:	4603      	mov	r3, r0
 800b57a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b584:	e00a      	b.n	800b59c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58a:	f043 0208 	orr.w	r2, r3, #8
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e001      	b.n	800b59c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b598:	2302      	movs	r3, #2
 800b59a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b08a      	sub	sp, #40	; 0x28
 800b5b2:	af02      	add	r7, sp, #8
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b5be:	f7fa fd2b 	bl	8006018 <HAL_GetTick>
 800b5c2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3320      	adds	r3, #32
 800b5d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d101      	bne.n	800b5e4 <HAL_QSPI_Receive+0x36>
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	e082      	b.n	800b6ea <HAL_QSPI_Receive+0x13c>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d171      	bne.n	800b6dc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d062      	beq.n	800b6ca <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2222      	movs	r2, #34	; 0x22
 800b608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b63c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b646:	e01c      	b.n	800b682 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	2201      	movs	r2, #1
 800b650:	2106      	movs	r1, #6
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 fa81 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b65c:	7ffb      	ldrb	r3, [r7, #31]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d114      	bne.n	800b68c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	7812      	ldrb	r2, [r2, #0]
 800b66a:	b2d2      	uxtb	r2, r2
 800b66c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	1e5a      	subs	r2, r3, #1
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1de      	bne.n	800b648 <HAL_QSPI_Receive+0x9a>
 800b68a:	e000      	b.n	800b68e <HAL_QSPI_Receive+0xe0>
          break;
 800b68c:	bf00      	nop
      }

      if (status == HAL_OK)
 800b68e:	7ffb      	ldrb	r3, [r7, #31]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d115      	bne.n	800b6c0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2201      	movs	r2, #1
 800b69c:	2102      	movs	r1, #2
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 fa5b 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b6a8:	7ffb      	ldrb	r3, [r7, #31]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d108      	bne.n	800b6c0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f944 	bl	800b944 <HAL_QSPI_Abort>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6c8:	e00a      	b.n	800b6e0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ce:	f043 0208 	orr.w	r2, r3, #8
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	77fb      	strb	r3, [r7, #31]
 800b6da:	e001      	b.n	800b6e0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b6dc:	2302      	movs	r3, #2
 800b6de:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b6e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3720      	adds	r7, #32
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b088      	sub	sp, #32
 800b6f6:	af02      	add	r7, sp, #8
 800b6f8:	60f8      	str	r0, [r7, #12]
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	607a      	str	r2, [r7, #4]
 800b6fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b700:	f7fa fc8a 	bl	8006018 <HAL_GetTick>
 800b704:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d101      	bne.n	800b716 <HAL_QSPI_AutoPolling+0x24>
 800b712:	2302      	movs	r3, #2
 800b714:	e060      	b.n	800b7d8 <HAL_QSPI_AutoPolling+0xe6>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b01      	cmp	r3, #1
 800b728:	d14f      	bne.n	800b7ca <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2242      	movs	r2, #66	; 0x42
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2200      	movs	r2, #0
 800b740:	2120      	movs	r1, #32
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 fa09 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b748:	4603      	mov	r3, r0
 800b74a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d13d      	bne.n	800b7ce <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6812      	ldr	r2, [r2, #0]
 800b75a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	6852      	ldr	r2, [r2, #4]
 800b764:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	6892      	ldr	r2, [r2, #8]
 800b76e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	431a      	orrs	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b788:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 fa15 	bl	800bbc8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	2108      	movs	r1, #8
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 f9d6 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2208      	movs	r2, #8
 800b7be:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7c8:	e001      	b.n	800b7ce <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b7ec:	f7fa fc14 	bl	8006018 <HAL_GetTick>
 800b7f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_QSPI_MemoryMapped+0x22>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e04c      	b.n	800b89c <HAL_QSPI_MemoryMapped+0xbc>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b01      	cmp	r3, #1
 800b814:	d13b      	bne.n	800b88e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2282      	movs	r2, #130	; 0x82
 800b820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2200      	movs	r2, #0
 800b82e:	2120      	movs	r1, #32
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f992 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b836:	4603      	mov	r3, r0
 800b838:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d128      	bne.n	800b892 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f023 0108 	bic.w	r1, r3, #8
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	d110      	bne.n	800b880 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	6812      	ldr	r2, [r2, #0]
 800b866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2210      	movs	r2, #16
 800b86e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b87e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b880:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b884:	68b9      	ldr	r1, [r7, #8]
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 f99e 	bl	800bbc8 <QSPI_Config>
 800b88c:	e001      	b.n	800b892 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b88e:	2302      	movs	r3, #2
 800b890:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af02      	add	r7, sp, #8
 800b94a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b950:	f7fa fb62 	bl	8006018 <HAL_GetTick>
 800b954:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d056      	beq.n	800ba14 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d017      	beq.n	800b9ac <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0204 	bic.w	r2, r2, #4
 800b98a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b990:	4618      	mov	r0, r3
 800b992:	f7fb facb 	bl	8006f2c <HAL_DMA_Abort>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a4:	f043 0204 	orr.w	r2, r3, #4
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0202 	orr.w	r2, r2, #2
 800b9ba:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f8c6 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10e      	bne.n	800b9f6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2120      	movs	r1, #32
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f8b4 	bl	800bb5a <QSPI_WaitFlagStateUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	695a      	ldr	r2, [r3, #20]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ba0a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d046      	beq.n	800baca <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2208      	movs	r2, #8
 800ba48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ba5a:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0304 	and.w	r3, r3, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01b      	beq.n	800baa2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 0204 	bic.w	r2, r2, #4
 800ba78:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7e:	4a15      	ldr	r2, [pc, #84]	; (800bad4 <HAL_QSPI_Abort_IT+0xb4>)
 800ba80:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fb fac0 	bl	800700c <HAL_DMA_Abort_IT>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01b      	beq.n	800baca <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff ff0c 	bl	800b8b8 <HAL_QSPI_AbortCpltCallback>
 800baa0:	e013      	b.n	800baca <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2202      	movs	r2, #2
 800baa8:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bab8:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f042 0202 	orr.w	r2, r2, #2
 800bac8:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	0800baf5 	.word	0x0800baf5

0800bad8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb00:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b08      	cmp	r3, #8
 800bb18:	d114      	bne.n	800bb44 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bb30:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f042 0202 	orr.w	r2, r2, #2
 800bb40:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800bb42:	e006      	b.n	800bb52 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7ff fea9 	bl	800b8a4 <HAL_QSPI_ErrorCallback>
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	60b9      	str	r1, [r7, #8]
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	4613      	mov	r3, r2
 800bb68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bb6a:	e01a      	b.n	800bba2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb72:	d016      	beq.n	800bba2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb74:	f7fa fa50 	bl	8006018 <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d302      	bcc.n	800bb8a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10b      	bne.n	800bba2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	f043 0201 	orr.w	r2, r3, #1
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e00e      	b.n	800bbc0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bf14      	ite	ne
 800bbb0:	2301      	movne	r3, #1
 800bbb2:	2300      	moveq	r3, #0
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d1d6      	bne.n	800bb6c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d009      	beq.n	800bbf0 <QSPI_Config+0x28>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bbe2:	d005      	beq.n	800bbf0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3a01      	subs	r2, #1
 800bbee:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80b9 	beq.w	800bd6c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d05f      	beq.n	800bcc2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	6892      	ldr	r2, [r2, #8]
 800bc0a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d031      	beq.n	800bc78 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc22:	431a      	orrs	r2, r3
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	049b      	lsls	r3, r3, #18
 800bc30:	431a      	orrs	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	431a      	orrs	r2, r3
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	431a      	orrs	r2, r3
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	431a      	orrs	r2, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	ea42 0103 	orr.w	r1, r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bc68:	f000 812e 	beq.w	800bec8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	6852      	ldr	r2, [r2, #4]
 800bc74:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800bc76:	e127      	b.n	800bec8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc80:	431a      	orrs	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc86:	431a      	orrs	r2, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	049b      	lsls	r3, r3, #18
 800bc94:	431a      	orrs	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	431a      	orrs	r2, r3
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	69db      	ldr	r3, [r3, #28]
 800bca6:	431a      	orrs	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	431a      	orrs	r2, r3
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	ea42 0103 	orr.w	r1, r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	615a      	str	r2, [r3, #20]
}
 800bcc0:	e102      	b.n	800bec8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d02e      	beq.n	800bd28 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	431a      	orrs	r2, r3
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	049b      	lsls	r3, r3, #18
 800bce6:	431a      	orrs	r2, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	431a      	orrs	r2, r3
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	ea42 0103 	orr.w	r1, r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd18:	f000 80d6 	beq.w	800bec8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	6852      	ldr	r2, [r2, #4]
 800bd24:	619a      	str	r2, [r3, #24]
}
 800bd26:	e0cf      	b.n	800bec8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	431a      	orrs	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	431a      	orrs	r2, r3
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	049b      	lsls	r3, r3, #18
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	431a      	orrs	r2, r3
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	431a      	orrs	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	ea42 0103 	orr.w	r1, r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	430a      	orrs	r2, r1
 800bd68:	615a      	str	r2, [r3, #20]
}
 800bd6a:	e0ad      	b.n	800bec8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d058      	beq.n	800be26 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	6892      	ldr	r2, [r2, #8]
 800bd7c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d02d      	beq.n	800bde2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd94:	431a      	orrs	r2, r3
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	049b      	lsls	r3, r3, #18
 800bda2:	431a      	orrs	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	431a      	orrs	r2, r3
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	ea42 0103 	orr.w	r1, r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bdd4:	d078      	beq.n	800bec8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	6852      	ldr	r2, [r2, #4]
 800bdde:	619a      	str	r2, [r3, #24]
}
 800bde0:	e072      	b.n	800bec8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdea:	431a      	orrs	r2, r3
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	049b      	lsls	r3, r3, #18
 800bdfe:	431a      	orrs	r2, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	431a      	orrs	r2, r3
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	431a      	orrs	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	69db      	ldr	r3, [r3, #28]
 800be10:	431a      	orrs	r2, r3
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	ea42 0103 	orr.w	r1, r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	430a      	orrs	r2, r1
 800be22:	615a      	str	r2, [r3, #20]
}
 800be24:	e050      	b.n	800bec8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d02a      	beq.n	800be84 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be36:	431a      	orrs	r2, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3c:	431a      	orrs	r2, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be42:	431a      	orrs	r2, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	049b      	lsls	r3, r3, #18
 800be4a:	431a      	orrs	r2, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	431a      	orrs	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	431a      	orrs	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	431a      	orrs	r2, r3
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	ea42 0103 	orr.w	r1, r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be76:	d027      	beq.n	800bec8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	6852      	ldr	r2, [r2, #4]
 800be80:	619a      	str	r2, [r3, #24]
}
 800be82:	e021      	b.n	800bec8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01d      	beq.n	800bec8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be94:	431a      	orrs	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	431a      	orrs	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea0:	431a      	orrs	r2, r3
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	049b      	lsls	r3, r3, #18
 800bea8:	431a      	orrs	r2, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	431a      	orrs	r2, r3
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	431a      	orrs	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	ea42 0103 	orr.w	r1, r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	615a      	str	r2, [r3, #20]
}
 800bec8:	bf00      	nop
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e291      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8087 	beq.w	800c006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bef8:	4b96      	ldr	r3, [pc, #600]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f003 030c 	and.w	r3, r3, #12
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d00c      	beq.n	800bf1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf04:	4b93      	ldr	r3, [pc, #588]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f003 030c 	and.w	r3, r3, #12
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d112      	bne.n	800bf36 <HAL_RCC_OscConfig+0x62>
 800bf10:	4b90      	ldr	r3, [pc, #576]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf1c:	d10b      	bne.n	800bf36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf1e:	4b8d      	ldr	r3, [pc, #564]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d06c      	beq.n	800c004 <HAL_RCC_OscConfig+0x130>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d168      	bne.n	800c004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e26b      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3e:	d106      	bne.n	800bf4e <HAL_RCC_OscConfig+0x7a>
 800bf40:	4b84      	ldr	r3, [pc, #528]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a83      	ldr	r2, [pc, #524]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	e02e      	b.n	800bfac <HAL_RCC_OscConfig+0xd8>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10c      	bne.n	800bf70 <HAL_RCC_OscConfig+0x9c>
 800bf56:	4b7f      	ldr	r3, [pc, #508]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a7e      	ldr	r2, [pc, #504]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	4b7c      	ldr	r3, [pc, #496]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a7b      	ldr	r2, [pc, #492]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	e01d      	b.n	800bfac <HAL_RCC_OscConfig+0xd8>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf78:	d10c      	bne.n	800bf94 <HAL_RCC_OscConfig+0xc0>
 800bf7a:	4b76      	ldr	r3, [pc, #472]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a75      	ldr	r2, [pc, #468]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	4b73      	ldr	r3, [pc, #460]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a72      	ldr	r2, [pc, #456]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf90:	6013      	str	r3, [r2, #0]
 800bf92:	e00b      	b.n	800bfac <HAL_RCC_OscConfig+0xd8>
 800bf94:	4b6f      	ldr	r3, [pc, #444]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a6e      	ldr	r2, [pc, #440]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bf9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf9e:	6013      	str	r3, [r2, #0]
 800bfa0:	4b6c      	ldr	r3, [pc, #432]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a6b      	ldr	r2, [pc, #428]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bfa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d013      	beq.n	800bfdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfb4:	f7fa f830 	bl	8006018 <HAL_GetTick>
 800bfb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfba:	e008      	b.n	800bfce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfbc:	f7fa f82c 	bl	8006018 <HAL_GetTick>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	2b64      	cmp	r3, #100	; 0x64
 800bfc8:	d901      	bls.n	800bfce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e21f      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfce:	4b61      	ldr	r3, [pc, #388]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d0f0      	beq.n	800bfbc <HAL_RCC_OscConfig+0xe8>
 800bfda:	e014      	b.n	800c006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfdc:	f7fa f81c 	bl	8006018 <HAL_GetTick>
 800bfe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfe2:	e008      	b.n	800bff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfe4:	f7fa f818 	bl	8006018 <HAL_GetTick>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	2b64      	cmp	r3, #100	; 0x64
 800bff0:	d901      	bls.n	800bff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e20b      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bff6:	4b57      	ldr	r3, [pc, #348]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f0      	bne.n	800bfe4 <HAL_RCC_OscConfig+0x110>
 800c002:	e000      	b.n	800c006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d069      	beq.n	800c0e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c012:	4b50      	ldr	r3, [pc, #320]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f003 030c 	and.w	r3, r3, #12
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c01e:	4b4d      	ldr	r3, [pc, #308]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f003 030c 	and.w	r3, r3, #12
 800c026:	2b08      	cmp	r3, #8
 800c028:	d11c      	bne.n	800c064 <HAL_RCC_OscConfig+0x190>
 800c02a:	4b4a      	ldr	r3, [pc, #296]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d116      	bne.n	800c064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c036:	4b47      	ldr	r3, [pc, #284]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <HAL_RCC_OscConfig+0x17a>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d001      	beq.n	800c04e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e1df      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c04e:	4b41      	ldr	r3, [pc, #260]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	493d      	ldr	r1, [pc, #244]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c062:	e040      	b.n	800c0e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d023      	beq.n	800c0b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c06c:	4b39      	ldr	r3, [pc, #228]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a38      	ldr	r2, [pc, #224]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c078:	f7f9 ffce 	bl	8006018 <HAL_GetTick>
 800c07c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c07e:	e008      	b.n	800c092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c080:	f7f9 ffca 	bl	8006018 <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d901      	bls.n	800c092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e1bd      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c092:	4b30      	ldr	r3, [pc, #192]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0302 	and.w	r3, r3, #2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0f0      	beq.n	800c080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c09e:	4b2d      	ldr	r3, [pc, #180]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4929      	ldr	r1, [pc, #164]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	600b      	str	r3, [r1, #0]
 800c0b2:	e018      	b.n	800c0e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0b4:	4b27      	ldr	r3, [pc, #156]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a26      	ldr	r2, [pc, #152]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0ba:	f023 0301 	bic.w	r3, r3, #1
 800c0be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c0:	f7f9 ffaa 	bl	8006018 <HAL_GetTick>
 800c0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0c6:	e008      	b.n	800c0da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0c8:	f7f9 ffa6 	bl	8006018 <HAL_GetTick>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d901      	bls.n	800c0da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e199      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0da:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1f0      	bne.n	800c0c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0308 	and.w	r3, r3, #8
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d038      	beq.n	800c164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d019      	beq.n	800c12e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fe:	4a15      	ldr	r2, [pc, #84]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c100:	f043 0301 	orr.w	r3, r3, #1
 800c104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c106:	f7f9 ff87 	bl	8006018 <HAL_GetTick>
 800c10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c10c:	e008      	b.n	800c120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c10e:	f7f9 ff83 	bl	8006018 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d901      	bls.n	800c120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e176      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c120:	4b0c      	ldr	r3, [pc, #48]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f0      	beq.n	800c10e <HAL_RCC_OscConfig+0x23a>
 800c12c:	e01a      	b.n	800c164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c12e:	4b09      	ldr	r3, [pc, #36]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c132:	4a08      	ldr	r2, [pc, #32]	; (800c154 <HAL_RCC_OscConfig+0x280>)
 800c134:	f023 0301 	bic.w	r3, r3, #1
 800c138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c13a:	f7f9 ff6d 	bl	8006018 <HAL_GetTick>
 800c13e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c140:	e00a      	b.n	800c158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c142:	f7f9 ff69 	bl	8006018 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d903      	bls.n	800c158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e15c      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
 800c154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c158:	4b91      	ldr	r3, [pc, #580]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1ee      	bne.n	800c142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80a4 	beq.w	800c2ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c172:	4b8b      	ldr	r3, [pc, #556]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10d      	bne.n	800c19a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c17e:	4b88      	ldr	r3, [pc, #544]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	4a87      	ldr	r2, [pc, #540]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c188:	6413      	str	r3, [r2, #64]	; 0x40
 800c18a:	4b85      	ldr	r3, [pc, #532]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c192:	60bb      	str	r3, [r7, #8]
 800c194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c196:	2301      	movs	r3, #1
 800c198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c19a:	4b82      	ldr	r3, [pc, #520]	; (800c3a4 <HAL_RCC_OscConfig+0x4d0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d118      	bne.n	800c1d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c1a6:	4b7f      	ldr	r3, [pc, #508]	; (800c3a4 <HAL_RCC_OscConfig+0x4d0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a7e      	ldr	r2, [pc, #504]	; (800c3a4 <HAL_RCC_OscConfig+0x4d0>)
 800c1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1b2:	f7f9 ff31 	bl	8006018 <HAL_GetTick>
 800c1b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1b8:	e008      	b.n	800c1cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1ba:	f7f9 ff2d 	bl	8006018 <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b64      	cmp	r3, #100	; 0x64
 800c1c6:	d901      	bls.n	800c1cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e120      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1cc:	4b75      	ldr	r3, [pc, #468]	; (800c3a4 <HAL_RCC_OscConfig+0x4d0>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0f0      	beq.n	800c1ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d106      	bne.n	800c1ee <HAL_RCC_OscConfig+0x31a>
 800c1e0:	4b6f      	ldr	r3, [pc, #444]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e4:	4a6e      	ldr	r2, [pc, #440]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c1e6:	f043 0301 	orr.w	r3, r3, #1
 800c1ea:	6713      	str	r3, [r2, #112]	; 0x70
 800c1ec:	e02d      	b.n	800c24a <HAL_RCC_OscConfig+0x376>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10c      	bne.n	800c210 <HAL_RCC_OscConfig+0x33c>
 800c1f6:	4b6a      	ldr	r3, [pc, #424]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fa:	4a69      	ldr	r2, [pc, #420]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c1fc:	f023 0301 	bic.w	r3, r3, #1
 800c200:	6713      	str	r3, [r2, #112]	; 0x70
 800c202:	4b67      	ldr	r3, [pc, #412]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c206:	4a66      	ldr	r2, [pc, #408]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c208:	f023 0304 	bic.w	r3, r3, #4
 800c20c:	6713      	str	r3, [r2, #112]	; 0x70
 800c20e:	e01c      	b.n	800c24a <HAL_RCC_OscConfig+0x376>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	2b05      	cmp	r3, #5
 800c216:	d10c      	bne.n	800c232 <HAL_RCC_OscConfig+0x35e>
 800c218:	4b61      	ldr	r3, [pc, #388]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21c:	4a60      	ldr	r2, [pc, #384]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c21e:	f043 0304 	orr.w	r3, r3, #4
 800c222:	6713      	str	r3, [r2, #112]	; 0x70
 800c224:	4b5e      	ldr	r3, [pc, #376]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c228:	4a5d      	ldr	r2, [pc, #372]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	6713      	str	r3, [r2, #112]	; 0x70
 800c230:	e00b      	b.n	800c24a <HAL_RCC_OscConfig+0x376>
 800c232:	4b5b      	ldr	r3, [pc, #364]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	4a5a      	ldr	r2, [pc, #360]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c238:	f023 0301 	bic.w	r3, r3, #1
 800c23c:	6713      	str	r3, [r2, #112]	; 0x70
 800c23e:	4b58      	ldr	r3, [pc, #352]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	4a57      	ldr	r2, [pc, #348]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c244:	f023 0304 	bic.w	r3, r3, #4
 800c248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d015      	beq.n	800c27e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c252:	f7f9 fee1 	bl	8006018 <HAL_GetTick>
 800c256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c258:	e00a      	b.n	800c270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c25a:	f7f9 fedd 	bl	8006018 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	f241 3288 	movw	r2, #5000	; 0x1388
 800c268:	4293      	cmp	r3, r2
 800c26a:	d901      	bls.n	800c270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e0ce      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c270:	4b4b      	ldr	r3, [pc, #300]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0ee      	beq.n	800c25a <HAL_RCC_OscConfig+0x386>
 800c27c:	e014      	b.n	800c2a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c27e:	f7f9 fecb 	bl	8006018 <HAL_GetTick>
 800c282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c284:	e00a      	b.n	800c29c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c286:	f7f9 fec7 	bl	8006018 <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	f241 3288 	movw	r2, #5000	; 0x1388
 800c294:	4293      	cmp	r3, r2
 800c296:	d901      	bls.n	800c29c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e0b8      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c29c:	4b40      	ldr	r3, [pc, #256]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1ee      	bne.n	800c286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d105      	bne.n	800c2ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2ae:	4b3c      	ldr	r3, [pc, #240]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	4a3b      	ldr	r2, [pc, #236]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c2b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 80a4 	beq.w	800c40c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2c4:	4b36      	ldr	r3, [pc, #216]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	f003 030c 	and.w	r3, r3, #12
 800c2cc:	2b08      	cmp	r3, #8
 800c2ce:	d06b      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d149      	bne.n	800c36c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2d8:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a30      	ldr	r2, [pc, #192]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c2de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c2e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e4:	f7f9 fe98 	bl	8006018 <HAL_GetTick>
 800c2e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2ea:	e008      	b.n	800c2fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2ec:	f7f9 fe94 	bl	8006018 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d901      	bls.n	800c2fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e087      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2fe:	4b28      	ldr	r3, [pc, #160]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1f0      	bne.n	800c2ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	69da      	ldr	r2, [r3, #28]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	431a      	orrs	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	019b      	lsls	r3, r3, #6
 800c31a:	431a      	orrs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c320:	085b      	lsrs	r3, r3, #1
 800c322:	3b01      	subs	r3, #1
 800c324:	041b      	lsls	r3, r3, #16
 800c326:	431a      	orrs	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	061b      	lsls	r3, r3, #24
 800c32e:	4313      	orrs	r3, r2
 800c330:	4a1b      	ldr	r2, [pc, #108]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c336:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c338:	4b19      	ldr	r3, [pc, #100]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a18      	ldr	r2, [pc, #96]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c33e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c344:	f7f9 fe68 	bl	8006018 <HAL_GetTick>
 800c348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c34a:	e008      	b.n	800c35e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c34c:	f7f9 fe64 	bl	8006018 <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	2b02      	cmp	r3, #2
 800c358:	d901      	bls.n	800c35e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e057      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c35e:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0f0      	beq.n	800c34c <HAL_RCC_OscConfig+0x478>
 800c36a:	e04f      	b.n	800c40c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c36c:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a0b      	ldr	r2, [pc, #44]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c378:	f7f9 fe4e 	bl	8006018 <HAL_GetTick>
 800c37c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c37e:	e008      	b.n	800c392 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c380:	f7f9 fe4a 	bl	8006018 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d901      	bls.n	800c392 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	e03d      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c392:	4b03      	ldr	r3, [pc, #12]	; (800c3a0 <HAL_RCC_OscConfig+0x4cc>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1f0      	bne.n	800c380 <HAL_RCC_OscConfig+0x4ac>
 800c39e:	e035      	b.n	800c40c <HAL_RCC_OscConfig+0x538>
 800c3a0:	40023800 	.word	0x40023800
 800c3a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c3a8:	4b1b      	ldr	r3, [pc, #108]	; (800c418 <HAL_RCC_OscConfig+0x544>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d028      	beq.n	800c408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d121      	bne.n	800c408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d11a      	bne.n	800c408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c3d8:	4013      	ands	r3, r2
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c3de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d111      	bne.n	800c408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ee:	085b      	lsrs	r3, r3, #1
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d107      	bne.n	800c408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c404:	429a      	cmp	r2, r3
 800c406:	d001      	beq.n	800c40c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e000      	b.n	800c40e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	40023800 	.word	0x40023800

0800c41c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e0d0      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c434:	4b6a      	ldr	r3, [pc, #424]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d910      	bls.n	800c464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c442:	4b67      	ldr	r3, [pc, #412]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f023 020f 	bic.w	r2, r3, #15
 800c44a:	4965      	ldr	r1, [pc, #404]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	4313      	orrs	r3, r2
 800c450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c452:	4b63      	ldr	r3, [pc, #396]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 030f 	and.w	r3, r3, #15
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d001      	beq.n	800c464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e0b8      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d020      	beq.n	800c4b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c47c:	4b59      	ldr	r3, [pc, #356]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	4a58      	ldr	r2, [pc, #352]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0308 	and.w	r3, r3, #8
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c494:	4b53      	ldr	r3, [pc, #332]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	4a52      	ldr	r2, [pc, #328]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c49a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c49e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4a0:	4b50      	ldr	r3, [pc, #320]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	494d      	ldr	r1, [pc, #308]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d040      	beq.n	800c540 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d107      	bne.n	800c4d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4c6:	4b47      	ldr	r3, [pc, #284]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d115      	bne.n	800c4fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e07f      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d107      	bne.n	800c4ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4de:	4b41      	ldr	r3, [pc, #260]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d109      	bne.n	800c4fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e073      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ee:	4b3d      	ldr	r3, [pc, #244]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e06b      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4fe:	4b39      	ldr	r3, [pc, #228]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f023 0203 	bic.w	r2, r3, #3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	4936      	ldr	r1, [pc, #216]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c50c:	4313      	orrs	r3, r2
 800c50e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c510:	f7f9 fd82 	bl	8006018 <HAL_GetTick>
 800c514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c516:	e00a      	b.n	800c52e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c518:	f7f9 fd7e 	bl	8006018 <HAL_GetTick>
 800c51c:	4602      	mov	r2, r0
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	f241 3288 	movw	r2, #5000	; 0x1388
 800c526:	4293      	cmp	r3, r2
 800c528:	d901      	bls.n	800c52e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e053      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c52e:	4b2d      	ldr	r3, [pc, #180]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f003 020c 	and.w	r2, r3, #12
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d1eb      	bne.n	800c518 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c540:	4b27      	ldr	r3, [pc, #156]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 030f 	and.w	r3, r3, #15
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d210      	bcs.n	800c570 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c54e:	4b24      	ldr	r3, [pc, #144]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f023 020f 	bic.w	r2, r3, #15
 800c556:	4922      	ldr	r1, [pc, #136]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c55e:	4b20      	ldr	r3, [pc, #128]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d001      	beq.n	800c570 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e032      	b.n	800c5d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c57c:	4b19      	ldr	r3, [pc, #100]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4916      	ldr	r1, [pc, #88]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0308 	and.w	r3, r3, #8
 800c596:	2b00      	cmp	r3, #0
 800c598:	d009      	beq.n	800c5ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c59a:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	490e      	ldr	r1, [pc, #56]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c5ae:	f000 f821 	bl	800c5f4 <HAL_RCC_GetSysClockFreq>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	091b      	lsrs	r3, r3, #4
 800c5ba:	f003 030f 	and.w	r3, r3, #15
 800c5be:	490a      	ldr	r1, [pc, #40]	; (800c5e8 <HAL_RCC_ClockConfig+0x1cc>)
 800c5c0:	5ccb      	ldrb	r3, [r1, r3]
 800c5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <HAL_RCC_ClockConfig+0x1d0>)
 800c5c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c5ca:	4b09      	ldr	r3, [pc, #36]	; (800c5f0 <HAL_RCC_ClockConfig+0x1d4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f7 fb4a 	bl	8003c68 <HAL_InitTick>

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	40023c00 	.word	0x40023c00
 800c5e4:	40023800 	.word	0x40023800
 800c5e8:	0801b2a4 	.word	0x0801b2a4
 800c5ec:	20000008 	.word	0x20000008
 800c5f0:	20000024 	.word	0x20000024

0800c5f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5f4:	b5b0      	push	{r4, r5, r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	6079      	str	r1, [r7, #4]
 800c5fe:	2100      	movs	r1, #0
 800c600:	60f9      	str	r1, [r7, #12]
 800c602:	2100      	movs	r1, #0
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c606:	2100      	movs	r1, #0
 800c608:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c60a:	4952      	ldr	r1, [pc, #328]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c60c:	6889      	ldr	r1, [r1, #8]
 800c60e:	f001 010c 	and.w	r1, r1, #12
 800c612:	2908      	cmp	r1, #8
 800c614:	d00d      	beq.n	800c632 <HAL_RCC_GetSysClockFreq+0x3e>
 800c616:	2908      	cmp	r1, #8
 800c618:	f200 8094 	bhi.w	800c744 <HAL_RCC_GetSysClockFreq+0x150>
 800c61c:	2900      	cmp	r1, #0
 800c61e:	d002      	beq.n	800c626 <HAL_RCC_GetSysClockFreq+0x32>
 800c620:	2904      	cmp	r1, #4
 800c622:	d003      	beq.n	800c62c <HAL_RCC_GetSysClockFreq+0x38>
 800c624:	e08e      	b.n	800c744 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c626:	4b4c      	ldr	r3, [pc, #304]	; (800c758 <HAL_RCC_GetSysClockFreq+0x164>)
 800c628:	60bb      	str	r3, [r7, #8]
      break;
 800c62a:	e08e      	b.n	800c74a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c62c:	4b4b      	ldr	r3, [pc, #300]	; (800c75c <HAL_RCC_GetSysClockFreq+0x168>)
 800c62e:	60bb      	str	r3, [r7, #8]
      break;
 800c630:	e08b      	b.n	800c74a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c632:	4948      	ldr	r1, [pc, #288]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c634:	6849      	ldr	r1, [r1, #4]
 800c636:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c63a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c63c:	4945      	ldr	r1, [pc, #276]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c63e:	6849      	ldr	r1, [r1, #4]
 800c640:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c644:	2900      	cmp	r1, #0
 800c646:	d024      	beq.n	800c692 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c648:	4942      	ldr	r1, [pc, #264]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c64a:	6849      	ldr	r1, [r1, #4]
 800c64c:	0989      	lsrs	r1, r1, #6
 800c64e:	4608      	mov	r0, r1
 800c650:	f04f 0100 	mov.w	r1, #0
 800c654:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c658:	f04f 0500 	mov.w	r5, #0
 800c65c:	ea00 0204 	and.w	r2, r0, r4
 800c660:	ea01 0305 	and.w	r3, r1, r5
 800c664:	493d      	ldr	r1, [pc, #244]	; (800c75c <HAL_RCC_GetSysClockFreq+0x168>)
 800c666:	fb01 f003 	mul.w	r0, r1, r3
 800c66a:	2100      	movs	r1, #0
 800c66c:	fb01 f102 	mul.w	r1, r1, r2
 800c670:	1844      	adds	r4, r0, r1
 800c672:	493a      	ldr	r1, [pc, #232]	; (800c75c <HAL_RCC_GetSysClockFreq+0x168>)
 800c674:	fba2 0101 	umull	r0, r1, r2, r1
 800c678:	1863      	adds	r3, r4, r1
 800c67a:	4619      	mov	r1, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	461a      	mov	r2, r3
 800c680:	f04f 0300 	mov.w	r3, #0
 800c684:	f7f4 fb08 	bl	8000c98 <__aeabi_uldivmod>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4613      	mov	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e04a      	b.n	800c728 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c692:	4b30      	ldr	r3, [pc, #192]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	099b      	lsrs	r3, r3, #6
 800c698:	461a      	mov	r2, r3
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c6a2:	f04f 0100 	mov.w	r1, #0
 800c6a6:	ea02 0400 	and.w	r4, r2, r0
 800c6aa:	ea03 0501 	and.w	r5, r3, r1
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	f04f 0200 	mov.w	r2, #0
 800c6b6:	f04f 0300 	mov.w	r3, #0
 800c6ba:	014b      	lsls	r3, r1, #5
 800c6bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c6c0:	0142      	lsls	r2, r0, #5
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	1b00      	subs	r0, r0, r4
 800c6c8:	eb61 0105 	sbc.w	r1, r1, r5
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	f04f 0300 	mov.w	r3, #0
 800c6d4:	018b      	lsls	r3, r1, #6
 800c6d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c6da:	0182      	lsls	r2, r0, #6
 800c6dc:	1a12      	subs	r2, r2, r0
 800c6de:	eb63 0301 	sbc.w	r3, r3, r1
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f04f 0100 	mov.w	r1, #0
 800c6ea:	00d9      	lsls	r1, r3, #3
 800c6ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6f0:	00d0      	lsls	r0, r2, #3
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	1912      	adds	r2, r2, r4
 800c6f8:	eb45 0303 	adc.w	r3, r5, r3
 800c6fc:	f04f 0000 	mov.w	r0, #0
 800c700:	f04f 0100 	mov.w	r1, #0
 800c704:	0299      	lsls	r1, r3, #10
 800c706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c70a:	0290      	lsls	r0, r2, #10
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4610      	mov	r0, r2
 800c712:	4619      	mov	r1, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	461a      	mov	r2, r3
 800c718:	f04f 0300 	mov.w	r3, #0
 800c71c:	f7f4 fabc 	bl	8000c98 <__aeabi_uldivmod>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4613      	mov	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <HAL_RCC_GetSysClockFreq+0x160>)
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	0c1b      	lsrs	r3, r3, #16
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	3301      	adds	r3, #1
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c740:	60bb      	str	r3, [r7, #8]
      break;
 800c742:	e002      	b.n	800c74a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c744:	4b04      	ldr	r3, [pc, #16]	; (800c758 <HAL_RCC_GetSysClockFreq+0x164>)
 800c746:	60bb      	str	r3, [r7, #8]
      break;
 800c748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c74a:	68bb      	ldr	r3, [r7, #8]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bdb0      	pop	{r4, r5, r7, pc}
 800c754:	40023800 	.word	0x40023800
 800c758:	00f42400 	.word	0x00f42400
 800c75c:	017d7840 	.word	0x017d7840

0800c760 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c764:	4b03      	ldr	r3, [pc, #12]	; (800c774 <HAL_RCC_GetHCLKFreq+0x14>)
 800c766:	681b      	ldr	r3, [r3, #0]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20000008 	.word	0x20000008

0800c778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c77c:	f7ff fff0 	bl	800c760 <HAL_RCC_GetHCLKFreq>
 800c780:	4602      	mov	r2, r0
 800c782:	4b05      	ldr	r3, [pc, #20]	; (800c798 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	0a9b      	lsrs	r3, r3, #10
 800c788:	f003 0307 	and.w	r3, r3, #7
 800c78c:	4903      	ldr	r1, [pc, #12]	; (800c79c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c78e:	5ccb      	ldrb	r3, [r1, r3]
 800c790:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c794:	4618      	mov	r0, r3
 800c796:	bd80      	pop	{r7, pc}
 800c798:	40023800 	.word	0x40023800
 800c79c:	0801b2b4 	.word	0x0801b2b4

0800c7a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c7a4:	f7ff ffdc 	bl	800c760 <HAL_RCC_GetHCLKFreq>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	0b5b      	lsrs	r3, r3, #13
 800c7b0:	f003 0307 	and.w	r3, r3, #7
 800c7b4:	4903      	ldr	r1, [pc, #12]	; (800c7c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7b6:	5ccb      	ldrb	r3, [r1, r3]
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	40023800 	.word	0x40023800
 800c7c4:	0801b2b4 	.word	0x0801b2b4

0800c7c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	220f      	movs	r2, #15
 800c7d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c7d8:	4b12      	ldr	r3, [pc, #72]	; (800c824 <HAL_RCC_GetClockConfig+0x5c>)
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f003 0203 	and.w	r2, r3, #3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c7e4:	4b0f      	ldr	r3, [pc, #60]	; (800c824 <HAL_RCC_GetClockConfig+0x5c>)
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c7f0:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <HAL_RCC_GetClockConfig+0x5c>)
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <HAL_RCC_GetClockConfig+0x5c>)
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	08db      	lsrs	r3, r3, #3
 800c802:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c80a:	4b07      	ldr	r3, [pc, #28]	; (800c828 <HAL_RCC_GetClockConfig+0x60>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 020f 	and.w	r2, r3, #15
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	601a      	str	r2, [r3, #0]
}
 800c816:	bf00      	nop
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	40023800 	.word	0x40023800
 800c828:	40023c00 	.word	0x40023c00

0800c82c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b088      	sub	sp, #32
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	2b00      	cmp	r3, #0
 800c852:	d012      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c854:	4b69      	ldr	r3, [pc, #420]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	4a68      	ldr	r2, [pc, #416]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c85a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c85e:	6093      	str	r3, [r2, #8]
 800c860:	4b66      	ldr	r3, [pc, #408]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c862:	689a      	ldr	r2, [r3, #8]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c868:	4964      	ldr	r1, [pc, #400]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c86a:	4313      	orrs	r3, r2
 800c86c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c876:	2301      	movs	r3, #1
 800c878:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c882:	2b00      	cmp	r3, #0
 800c884:	d017      	beq.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c886:	4b5d      	ldr	r3, [pc, #372]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c88c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c894:	4959      	ldr	r1, [pc, #356]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c896:	4313      	orrs	r3, r2
 800c898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8a4:	d101      	bne.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d017      	beq.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c8c2:	4b4e      	ldr	r3, [pc, #312]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d0:	494a      	ldr	r1, [pc, #296]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8e0:	d101      	bne.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c8fe:	2301      	movs	r3, #1
 800c900:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 808b 	beq.w	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c910:	4b3a      	ldr	r3, [pc, #232]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c914:	4a39      	ldr	r2, [pc, #228]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c91a:	6413      	str	r3, [r2, #64]	; 0x40
 800c91c:	4b37      	ldr	r3, [pc, #220]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c924:	60bb      	str	r3, [r7, #8]
 800c926:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c928:	4b35      	ldr	r3, [pc, #212]	; (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a34      	ldr	r2, [pc, #208]	; (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c92e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c934:	f7f9 fb70 	bl	8006018 <HAL_GetTick>
 800c938:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c93a:	e008      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c93c:	f7f9 fb6c 	bl	8006018 <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b64      	cmp	r3, #100	; 0x64
 800c948:	d901      	bls.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e357      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c94e:	4b2c      	ldr	r3, [pc, #176]	; (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f0      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c95a:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c962:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d035      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	429a      	cmp	r2, r3
 800c976:	d02e      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c978:	4b20      	ldr	r3, [pc, #128]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c980:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c982:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c986:	4a1d      	ldr	r2, [pc, #116]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c98c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c98e:	4b1b      	ldr	r3, [pc, #108]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c992:	4a1a      	ldr	r2, [pc, #104]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c998:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c99a:	4a18      	ldr	r2, [pc, #96]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c9a0:	4b16      	ldr	r3, [pc, #88]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d114      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ac:	f7f9 fb34 	bl	8006018 <HAL_GetTick>
 800c9b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9b2:	e00a      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9b4:	f7f9 fb30 	bl	8006018 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d901      	bls.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e319      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0ee      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9e2:	d111      	bne.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c9f0:	4b04      	ldr	r3, [pc, #16]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c9f2:	400b      	ands	r3, r1
 800c9f4:	4901      	ldr	r1, [pc, #4]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	608b      	str	r3, [r1, #8]
 800c9fa:	e00b      	b.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c9fc:	40023800 	.word	0x40023800
 800ca00:	40007000 	.word	0x40007000
 800ca04:	0ffffcff 	.word	0x0ffffcff
 800ca08:	4bb1      	ldr	r3, [pc, #708]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	4ab0      	ldr	r2, [pc, #704]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca12:	6093      	str	r3, [r2, #8]
 800ca14:	4bae      	ldr	r3, [pc, #696]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca20:	49ab      	ldr	r1, [pc, #684]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0310 	and.w	r3, r3, #16
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d010      	beq.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca32:	4ba7      	ldr	r3, [pc, #668]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca38:	4aa5      	ldr	r2, [pc, #660]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ca42:	4ba3      	ldr	r3, [pc, #652]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4c:	49a0      	ldr	r1, [pc, #640]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca60:	4b9b      	ldr	r3, [pc, #620]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca6e:	4998      	ldr	r1, [pc, #608]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ca82:	4b93      	ldr	r3, [pc, #588]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca90:	498f      	ldr	r1, [pc, #572]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00a      	beq.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800caa4:	4b8a      	ldr	r3, [pc, #552]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800caa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab2:	4987      	ldr	r1, [pc, #540]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00a      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cac6:	4b82      	ldr	r3, [pc, #520]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cacc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad4:	497e      	ldr	r1, [pc, #504]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00a      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cae8:	4b79      	ldr	r3, [pc, #484]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800caea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caee:	f023 0203 	bic.w	r2, r3, #3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf6:	4976      	ldr	r1, [pc, #472]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb0a:	4b71      	ldr	r3, [pc, #452]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb10:	f023 020c 	bic.w	r2, r3, #12
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb18:	496d      	ldr	r1, [pc, #436]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00a      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cb2c:	4b68      	ldr	r3, [pc, #416]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb3a:	4965      	ldr	r1, [pc, #404]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00a      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cb4e:	4b60      	ldr	r3, [pc, #384]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb5c:	495c      	ldr	r1, [pc, #368]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cb70:	4b57      	ldr	r3, [pc, #348]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7e:	4954      	ldr	r1, [pc, #336]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb80:	4313      	orrs	r3, r2
 800cb82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800cb92:	4b4f      	ldr	r3, [pc, #316]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba0:	494b      	ldr	r1, [pc, #300]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800cbb4:	4b46      	ldr	r3, [pc, #280]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbc2:	4943      	ldr	r1, [pc, #268]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cbd6:	4b3e      	ldr	r3, [pc, #248]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbe4:	493a      	ldr	r1, [pc, #232]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00a      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cbf8:	4b35      	ldr	r3, [pc, #212]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc06:	4932      	ldr	r1, [pc, #200]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d011      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cc1a:	4b2d      	ldr	r3, [pc, #180]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc28:	4929      	ldr	r1, [pc, #164]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc38:	d101      	bne.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0308 	and.w	r3, r3, #8
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc5a:	4b1d      	ldr	r3, [pc, #116]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc68:	4919      	ldr	r1, [pc, #100]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00b      	beq.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cc7c:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc8c:	4910      	ldr	r1, [pc, #64]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d006      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 80d9 	beq.w	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cca8:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a08      	ldr	r2, [pc, #32]	; (800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ccae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccb4:	f7f9 f9b0 	bl	8006018 <HAL_GetTick>
 800ccb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ccba:	e00b      	b.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ccbc:	f7f9 f9ac 	bl	8006018 <HAL_GetTick>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	2b64      	cmp	r3, #100	; 0x64
 800ccc8:	d904      	bls.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e197      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ccce:	bf00      	nop
 800ccd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ccd4:	4b6c      	ldr	r3, [pc, #432]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1ed      	bne.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d021      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d11d      	bne.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ccf4:	4b64      	ldr	r3, [pc, #400]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ccf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccfa:	0c1b      	lsrs	r3, r3, #16
 800ccfc:	f003 0303 	and.w	r3, r3, #3
 800cd00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cd02:	4b61      	ldr	r3, [pc, #388]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd08:	0e1b      	lsrs	r3, r3, #24
 800cd0a:	f003 030f 	and.w	r3, r3, #15
 800cd0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	019a      	lsls	r2, r3, #6
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	041b      	lsls	r3, r3, #16
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	061b      	lsls	r3, r3, #24
 800cd20:	431a      	orrs	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	071b      	lsls	r3, r3, #28
 800cd28:	4957      	ldr	r1, [pc, #348]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d004      	beq.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd44:	d00a      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d02e      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd5a:	d129      	bne.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cd5c:	4b4a      	ldr	r3, [pc, #296]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd62:	0c1b      	lsrs	r3, r3, #16
 800cd64:	f003 0303 	and.w	r3, r3, #3
 800cd68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cd6a:	4b47      	ldr	r3, [pc, #284]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd70:	0f1b      	lsrs	r3, r3, #28
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	019a      	lsls	r2, r3, #6
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	041b      	lsls	r3, r3, #16
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	061b      	lsls	r3, r3, #24
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	071b      	lsls	r3, r3, #28
 800cd90:	493d      	ldr	r1, [pc, #244]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd92:	4313      	orrs	r3, r2
 800cd94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cd98:	4b3b      	ldr	r3, [pc, #236]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd9e:	f023 021f 	bic.w	r2, r3, #31
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4937      	ldr	r1, [pc, #220]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d01d      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cdbc:	4b32      	ldr	r3, [pc, #200]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdc2:	0e1b      	lsrs	r3, r3, #24
 800cdc4:	f003 030f 	and.w	r3, r3, #15
 800cdc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cdca:	4b2f      	ldr	r3, [pc, #188]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdd0:	0f1b      	lsrs	r3, r3, #28
 800cdd2:	f003 0307 	and.w	r3, r3, #7
 800cdd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	019a      	lsls	r2, r3, #6
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	041b      	lsls	r3, r3, #16
 800cde4:	431a      	orrs	r2, r3
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	061b      	lsls	r3, r3, #24
 800cdea:	431a      	orrs	r2, r3
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	071b      	lsls	r3, r3, #28
 800cdf0:	4925      	ldr	r1, [pc, #148]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d011      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	019a      	lsls	r2, r3, #6
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	041b      	lsls	r3, r3, #16
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	061b      	lsls	r3, r3, #24
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	071b      	lsls	r3, r3, #28
 800ce20:	4919      	ldr	r1, [pc, #100]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ce28:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a16      	ldr	r2, [pc, #88]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce34:	f7f9 f8f0 	bl	8006018 <HAL_GetTick>
 800ce38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ce3a:	e008      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ce3c:	f7f9 f8ec 	bl	8006018 <HAL_GetTick>
 800ce40:	4602      	mov	r2, r0
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	2b64      	cmp	r3, #100	; 0x64
 800ce48:	d901      	bls.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e0d7      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ce4e:	4b0e      	ldr	r3, [pc, #56]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d0f0      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	f040 80cd 	bne.w	800cffc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ce62:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a08      	ldr	r2, [pc, #32]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce6e:	f7f9 f8d3 	bl	8006018 <HAL_GetTick>
 800ce72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce74:	e00a      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ce76:	f7f9 f8cf 	bl	8006018 <HAL_GetTick>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	2b64      	cmp	r3, #100	; 0x64
 800ce82:	d903      	bls.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e0ba      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ce88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce8c:	4b5e      	ldr	r3, [pc, #376]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce98:	d0ed      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x682>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d009      	beq.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d02e      	beq.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d12a      	bne.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cec2:	4b51      	ldr	r3, [pc, #324]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec8:	0c1b      	lsrs	r3, r3, #16
 800ceca:	f003 0303 	and.w	r3, r3, #3
 800cece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ced0:	4b4d      	ldr	r3, [pc, #308]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ced2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ced6:	0f1b      	lsrs	r3, r3, #28
 800ced8:	f003 0307 	and.w	r3, r3, #7
 800cedc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	019a      	lsls	r2, r3, #6
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	041b      	lsls	r3, r3, #16
 800cee8:	431a      	orrs	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	699b      	ldr	r3, [r3, #24]
 800ceee:	061b      	lsls	r3, r3, #24
 800cef0:	431a      	orrs	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	071b      	lsls	r3, r3, #28
 800cef6:	4944      	ldr	r1, [pc, #272]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cefe:	4b42      	ldr	r3, [pc, #264]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	021b      	lsls	r3, r3, #8
 800cf10:	493d      	ldr	r1, [pc, #244]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d022      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf2c:	d11d      	bne.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cf2e:	4b36      	ldr	r3, [pc, #216]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf34:	0e1b      	lsrs	r3, r3, #24
 800cf36:	f003 030f 	and.w	r3, r3, #15
 800cf3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cf3c:	4b32      	ldr	r3, [pc, #200]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf42:	0f1b      	lsrs	r3, r3, #28
 800cf44:	f003 0307 	and.w	r3, r3, #7
 800cf48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	019a      	lsls	r2, r3, #6
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	041b      	lsls	r3, r3, #16
 800cf56:	431a      	orrs	r2, r3
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	061b      	lsls	r3, r3, #24
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	071b      	lsls	r3, r3, #28
 800cf62:	4929      	ldr	r1, [pc, #164]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf64:	4313      	orrs	r3, r2
 800cf66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0308 	and.w	r3, r3, #8
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d028      	beq.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cf76:	4b24      	ldr	r3, [pc, #144]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7c:	0e1b      	lsrs	r3, r3, #24
 800cf7e:	f003 030f 	and.w	r3, r3, #15
 800cf82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cf84:	4b20      	ldr	r3, [pc, #128]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8a:	0c1b      	lsrs	r3, r3, #16
 800cf8c:	f003 0303 	and.w	r3, r3, #3
 800cf90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	019a      	lsls	r2, r3, #6
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	061b      	lsls	r3, r3, #24
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	69db      	ldr	r3, [r3, #28]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	4917      	ldr	r1, [pc, #92]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	4911      	ldr	r1, [pc, #68]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a0e      	ldr	r2, [pc, #56]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfd4:	f7f9 f820 	bl	8006018 <HAL_GetTick>
 800cfd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cfda:	e008      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cfdc:	f7f9 f81c 	bl	8006018 <HAL_GetTick>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	2b64      	cmp	r3, #100	; 0x64
 800cfe8:	d901      	bls.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e007      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cfee:	4b06      	ldr	r3, [pc, #24]	; (800d008 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cffa:	d1ef      	bne.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	40023800 	.word	0x40023800

0800d00c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d02a:	f040 808c 	bne.w	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d02e:	4b95      	ldr	r3, [pc, #596]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d034:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d03c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d044:	d07c      	beq.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d04c:	d87d      	bhi.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d004      	beq.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d05a:	d039      	beq.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d05c:	e075      	b.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d05e:	4b89      	ldr	r3, [pc, #548]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d108      	bne.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d06a:	4b86      	ldr	r3, [pc, #536]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d072:	4a85      	ldr	r2, [pc, #532]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d074:	fbb2 f3f3 	udiv	r3, r2, r3
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	e007      	b.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d07c:	4b81      	ldr	r3, [pc, #516]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d084:	4a81      	ldr	r2, [pc, #516]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d086:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d08c:	4b7d      	ldr	r3, [pc, #500]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d092:	0e1b      	lsrs	r3, r3, #24
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d09a:	4b7a      	ldr	r3, [pc, #488]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a0:	099b      	lsrs	r3, r3, #6
 800d0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	fb02 f203 	mul.w	r2, r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d0b4:	4b73      	ldr	r3, [pc, #460]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ba:	0a1b      	lsrs	r3, r3, #8
 800d0bc:	f003 031f 	and.w	r3, r3, #31
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0cc:	617b      	str	r3, [r7, #20]
        break;
 800d0ce:	e03d      	b.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d0d0:	4b6c      	ldr	r3, [pc, #432]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d108      	bne.n	800d0ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d0dc:	4b69      	ldr	r3, [pc, #420]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0e4:	4a68      	ldr	r2, [pc, #416]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	e007      	b.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d0ee:	4b65      	ldr	r3, [pc, #404]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0f6:	4a65      	ldr	r2, [pc, #404]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d0fe:	4b61      	ldr	r3, [pc, #388]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d104:	0e1b      	lsrs	r3, r3, #24
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d10c:	4b5d      	ldr	r3, [pc, #372]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d112:	099b      	lsrs	r3, r3, #6
 800d114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	fb02 f203 	mul.w	r2, r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	fbb2 f3f3 	udiv	r3, r2, r3
 800d124:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d126:	4b57      	ldr	r3, [pc, #348]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d12c:	f003 031f 	and.w	r3, r3, #31
 800d130:	3301      	adds	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	fbb2 f3f3 	udiv	r3, r2, r3
 800d13c:	617b      	str	r3, [r7, #20]
        break;
 800d13e:	e005      	b.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d140:	4b53      	ldr	r3, [pc, #332]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d142:	617b      	str	r3, [r7, #20]
        break;
 800d144:	e002      	b.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800d146:	bf00      	nop
 800d148:	e000      	b.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800d14a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d152:	f040 808c 	bne.w	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d156:	4b4b      	ldr	r3, [pc, #300]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d15c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d164:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d16c:	d07c      	beq.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d174:	d87d      	bhi.n	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d182:	d039      	beq.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d184:	e075      	b.n	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d186:	4b3f      	ldr	r3, [pc, #252]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d108      	bne.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d192:	4b3c      	ldr	r3, [pc, #240]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d19a:	4a3b      	ldr	r2, [pc, #236]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a0:	613b      	str	r3, [r7, #16]
 800d1a2:	e007      	b.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d1a4:	4b37      	ldr	r3, [pc, #220]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1ac:	4a37      	ldr	r2, [pc, #220]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d1b4:	4b33      	ldr	r3, [pc, #204]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d1c2:	4b30      	ldr	r3, [pc, #192]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c8:	099b      	lsrs	r3, r3, #6
 800d1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	fb02 f203 	mul.w	r2, r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d1dc:	4b29      	ldr	r3, [pc, #164]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1e2:	0a1b      	lsrs	r3, r3, #8
 800d1e4:	f003 031f 	and.w	r3, r3, #31
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d1ec:	697a      	ldr	r2, [r7, #20]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f4:	617b      	str	r3, [r7, #20]
        break;
 800d1f6:	e03d      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d1f8:	4b22      	ldr	r3, [pc, #136]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d108      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d204:	4b1f      	ldr	r3, [pc, #124]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d20c:	4a1e      	ldr	r2, [pc, #120]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d212:	613b      	str	r3, [r7, #16]
 800d214:	e007      	b.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d216:	4b1b      	ldr	r3, [pc, #108]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d21e:	4a1b      	ldr	r2, [pc, #108]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d220:	fbb2 f3f3 	udiv	r3, r2, r3
 800d224:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d226:	4b17      	ldr	r3, [pc, #92]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d22c:	0e1b      	lsrs	r3, r3, #24
 800d22e:	f003 030f 	and.w	r3, r3, #15
 800d232:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d234:	4b13      	ldr	r3, [pc, #76]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d23a:	099b      	lsrs	r3, r3, #6
 800d23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	fb02 f203 	mul.w	r2, r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d254:	f003 031f 	and.w	r3, r3, #31
 800d258:	3301      	adds	r3, #1
 800d25a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	fbb2 f3f3 	udiv	r3, r2, r3
 800d264:	617b      	str	r3, [r7, #20]
        break;
 800d266:	e005      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d268:	4b09      	ldr	r3, [pc, #36]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d26a:	617b      	str	r3, [r7, #20]
        break;
 800d26c:	e002      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800d26e:	bf00      	nop
 800d270:	e000      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800d272:	bf00      	nop

  return frequency;
 800d274:	697b      	ldr	r3, [r7, #20]
}
 800d276:	4618      	mov	r0, r3
 800d278:	371c      	adds	r7, #28
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	40023800 	.word	0x40023800
 800d288:	00f42400 	.word	0x00f42400
 800d28c:	017d7840 	.word	0x017d7840
 800d290:	00bb8000 	.word	0x00bb8000

0800d294 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e081      	b.n	800d3aa <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7f5b      	ldrb	r3, [r3, #29]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d105      	bne.n	800d2bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7f6 f88a 	bl	80033d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	22ca      	movs	r2, #202	; 0xca
 800d2c8:	625a      	str	r2, [r3, #36]	; 0x24
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2253      	movs	r2, #83	; 0x53
 800d2d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fb16 	bl	800d904 <RTC_EnterInitMode>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d008      	beq.n	800d2f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	22ff      	movs	r2, #255	; 0xff
 800d2e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2204      	movs	r2, #4
 800d2ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e05c      	b.n	800d3aa <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6899      	ldr	r1, [r3, #8]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b2e      	ldr	r3, [pc, #184]	; (800d3b4 <HAL_RTC_Init+0x120>)
 800d2fc:	400b      	ands	r3, r1
 800d2fe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6899      	ldr	r1, [r3, #8]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	431a      	orrs	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	431a      	orrs	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	430a      	orrs	r2, r1
 800d31c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	68d2      	ldr	r2, [r2, #12]
 800d326:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6919      	ldr	r1, [r3, #16]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	041a      	lsls	r2, r3, #16
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68da      	ldr	r2, [r3, #12]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d34a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10e      	bne.n	800d378 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 faaa 	bl	800d8b4 <HAL_RTC_WaitForSynchro>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d008      	beq.n	800d378 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	22ff      	movs	r2, #255	; 0xff
 800d36c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2204      	movs	r2, #4
 800d372:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e018      	b.n	800d3aa <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f022 0208 	bic.w	r2, r2, #8
 800d386:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	699a      	ldr	r2, [r3, #24]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	22ff      	movs	r2, #255	; 0xff
 800d3a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
  }
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	ff8fffbf 	.word	0xff8fffbf

0800d3b8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d3b8:	b590      	push	{r4, r7, lr}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	7f1b      	ldrb	r3, [r3, #28]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d101      	bne.n	800d3d4 <HAL_RTC_SetTime+0x1c>
 800d3d0:	2302      	movs	r3, #2
 800d3d2:	e0a8      	b.n	800d526 <HAL_RTC_SetTime+0x16e>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2202      	movs	r2, #2
 800d3de:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d126      	bne.n	800d434 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 faac 	bl	800d95c <RTC_ByteToBcd2>
 800d404:	4603      	mov	r3, r0
 800d406:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	785b      	ldrb	r3, [r3, #1]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f000 faa5 	bl	800d95c <RTC_ByteToBcd2>
 800d412:	4603      	mov	r3, r0
 800d414:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d416:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	789b      	ldrb	r3, [r3, #2]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 fa9d 	bl	800d95c <RTC_ByteToBcd2>
 800d422:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d424:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	7b1b      	ldrb	r3, [r3, #12]
 800d42c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d42e:	4313      	orrs	r3, r2
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e018      	b.n	800d466 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d102      	bne.n	800d448 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2200      	movs	r2, #0
 800d446:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	785b      	ldrb	r3, [r3, #1]
 800d452:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d454:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d456:	68ba      	ldr	r2, [r7, #8]
 800d458:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d45a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	7b1b      	ldrb	r3, [r3, #12]
 800d460:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	22ca      	movs	r2, #202	; 0xca
 800d46c:	625a      	str	r2, [r3, #36]	; 0x24
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2253      	movs	r2, #83	; 0x53
 800d474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f000 fa44 	bl	800d904 <RTC_EnterInitMode>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00b      	beq.n	800d49a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	22ff      	movs	r2, #255	; 0xff
 800d488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2204      	movs	r2, #4
 800d48e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2200      	movs	r2, #0
 800d494:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e045      	b.n	800d526 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	6979      	ldr	r1, [r7, #20]
 800d4a0:	4b23      	ldr	r3, [pc, #140]	; (800d530 <HAL_RTC_SetTime+0x178>)
 800d4a2:	400b      	ands	r3, r1
 800d4a4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d4b4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6899      	ldr	r1, [r3, #8]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	691a      	ldr	r2, [r3, #16]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f003 0320 	and.w	r3, r3, #32
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d111      	bne.n	800d510 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f000 f9e1 	bl	800d8b4 <HAL_RTC_WaitForSynchro>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	22ff      	movs	r2, #255	; 0xff
 800d4fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2204      	movs	r2, #4
 800d504:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e00a      	b.n	800d526 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	22ff      	movs	r2, #255	; 0xff
 800d516:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d524:	2300      	movs	r3, #0
  }
}
 800d526:	4618      	mov	r0, r3
 800d528:	371c      	adds	r7, #28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd90      	pop	{r4, r7, pc}
 800d52e:	bf00      	nop
 800d530:	007f7f7f 	.word	0x007f7f7f

0800d534 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d534:	b590      	push	{r4, r7, lr}
 800d536:	b087      	sub	sp, #28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	7f1b      	ldrb	r3, [r3, #28]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d101      	bne.n	800d550 <HAL_RTC_SetDate+0x1c>
 800d54c:	2302      	movs	r3, #2
 800d54e:	e092      	b.n	800d676 <HAL_RTC_SetDate+0x142>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2202      	movs	r2, #2
 800d55a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10e      	bne.n	800d580 <HAL_RTC_SetDate+0x4c>
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	f003 0310 	and.w	r3, r3, #16
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d008      	beq.n	800d580 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	785b      	ldrb	r3, [r3, #1]
 800d572:	f023 0310 	bic.w	r3, r3, #16
 800d576:	b2db      	uxtb	r3, r3
 800d578:	330a      	adds	r3, #10
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d11c      	bne.n	800d5c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	78db      	ldrb	r3, [r3, #3]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f000 f9e6 	bl	800d95c <RTC_ByteToBcd2>
 800d590:	4603      	mov	r3, r0
 800d592:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	785b      	ldrb	r3, [r3, #1]
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f9df 	bl	800d95c <RTC_ByteToBcd2>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d5a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	789b      	ldrb	r3, [r3, #2]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 f9d7 	bl	800d95c <RTC_ByteToBcd2>
 800d5ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d5b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	617b      	str	r3, [r7, #20]
 800d5be:	e00e      	b.n	800d5de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	78db      	ldrb	r3, [r3, #3]
 800d5c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	785b      	ldrb	r3, [r3, #1]
 800d5ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800d5d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	22ca      	movs	r2, #202	; 0xca
 800d5e4:	625a      	str	r2, [r3, #36]	; 0x24
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2253      	movs	r2, #83	; 0x53
 800d5ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 f988 	bl	800d904 <RTC_EnterInitMode>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00b      	beq.n	800d612 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	22ff      	movs	r2, #255	; 0xff
 800d600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2204      	movs	r2, #4
 800d606:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e031      	b.n	800d676 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	6979      	ldr	r1, [r7, #20]
 800d618:	4b19      	ldr	r3, [pc, #100]	; (800d680 <HAL_RTC_SetDate+0x14c>)
 800d61a:	400b      	ands	r3, r1
 800d61c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	68da      	ldr	r2, [r3, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d62c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d111      	bne.n	800d660 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f000 f939 	bl	800d8b4 <HAL_RTC_WaitForSynchro>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00b      	beq.n	800d660 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2204      	movs	r2, #4
 800d654:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e00a      	b.n	800d676 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	22ff      	movs	r2, #255	; 0xff
 800d666:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d674:	2300      	movs	r3, #0
  }
}
 800d676:	4618      	mov	r0, r3
 800d678:	371c      	adds	r7, #28
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd90      	pop	{r4, r7, pc}
 800d67e:	bf00      	nop
 800d680:	00ffff3f 	.word	0x00ffff3f

0800d684 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b089      	sub	sp, #36	; 0x24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	61fb      	str	r3, [r7, #28]
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	7f1b      	ldrb	r3, [r3, #28]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d101      	bne.n	800d6a8 <HAL_RTC_SetAlarm+0x24>
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	e101      	b.n	800d8ac <HAL_RTC_SetAlarm+0x228>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d137      	bne.n	800d72a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 f942 	bl	800d95c <RTC_ByteToBcd2>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	785b      	ldrb	r3, [r3, #1]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 f93b 	bl	800d95c <RTC_ByteToBcd2>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d6ea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	789b      	ldrb	r3, [r3, #2]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f933 	bl	800d95c <RTC_ByteToBcd2>
 800d6f6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d6f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	7b1b      	ldrb	r3, [r3, #12]
 800d700:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d702:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 f925 	bl	800d95c <RTC_ByteToBcd2>
 800d712:	4603      	mov	r3, r0
 800d714:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d716:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d71e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d724:	4313      	orrs	r3, r2
 800d726:	61fb      	str	r3, [r7, #28]
 800d728:	e023      	b.n	800d772 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2200      	movs	r2, #0
 800d73c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d74a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d750:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	7b1b      	ldrb	r3, [r3, #12]
 800d756:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d758:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d760:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d762:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d768:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d76e:	4313      	orrs	r3, r2
 800d770:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	22ca      	movs	r2, #202	; 0xca
 800d784:	625a      	str	r2, [r3, #36]	; 0x24
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2253      	movs	r2, #83	; 0x53
 800d78c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d796:	d13f      	bne.n	800d818 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	689a      	ldr	r2, [r3, #8]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	689a      	ldr	r2, [r3, #8]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7b6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d7b8:	f7f8 fc2e 	bl	8006018 <HAL_GetTick>
 800d7bc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d7be:	e013      	b.n	800d7e8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d7c0:	f7f8 fc2a 	bl	8006018 <HAL_GetTick>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7ce:	d90b      	bls.n	800d7e8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	22ff      	movs	r2, #255	; 0xff
 800d7d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2203      	movs	r2, #3
 800d7dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e061      	b.n	800d8ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0e4      	beq.n	800d7c0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689a      	ldr	r2, [r3, #8]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d814:	609a      	str	r2, [r3, #8]
 800d816:	e03e      	b.n	800d896 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	689a      	ldr	r2, [r3, #8]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d826:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	689a      	ldr	r2, [r3, #8]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d836:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d838:	f7f8 fbee 	bl	8006018 <HAL_GetTick>
 800d83c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d83e:	e013      	b.n	800d868 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d840:	f7f8 fbea 	bl	8006018 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d84e:	d90b      	bls.n	800d868 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	22ff      	movs	r2, #255	; 0xff
 800d856:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2203      	movs	r2, #3
 800d85c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e021      	b.n	800d8ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0e4      	beq.n	800d840 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d894:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	22ff      	movs	r2, #255	; 0xff
 800d89c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3724      	adds	r7, #36	; 0x24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd90      	pop	{r4, r7, pc}

0800d8b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d8ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d8d0:	f7f8 fba2 	bl	8006018 <HAL_GetTick>
 800d8d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d8d6:	e009      	b.n	800d8ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d8d8:	f7f8 fb9e 	bl	8006018 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8e6:	d901      	bls.n	800d8ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e007      	b.n	800d8fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0ee      	beq.n	800d8d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d119      	bne.n	800d952 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d926:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d928:	f7f8 fb76 	bl	8006018 <HAL_GetTick>
 800d92c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d92e:	e009      	b.n	800d944 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d930:	f7f8 fb72 	bl	8006018 <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d93e:	d901      	bls.n	800d944 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d940:	2303      	movs	r3, #3
 800d942:	e007      	b.n	800d954 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0ee      	beq.n	800d930 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	4603      	mov	r3, r0
 800d964:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d96a:	e005      	b.n	800d978 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3301      	adds	r3, #1
 800d970:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	3b0a      	subs	r3, #10
 800d976:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d978:	79fb      	ldrb	r3, [r7, #7]
 800d97a:	2b09      	cmp	r3, #9
 800d97c:	d8f6      	bhi.n	800d96c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	b2db      	uxtb	r3, r3
 800d982:	011b      	lsls	r3, r3, #4
 800d984:	b2da      	uxtb	r2, r3
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	4313      	orrs	r3, r2
 800d98a:	b2db      	uxtb	r3, r3
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	7f1b      	ldrb	r3, [r3, #28]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d101      	bne.n	800d9b4 <HAL_RTCEx_SetTimeStamp+0x1c>
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	e03e      	b.n	800da32 <HAL_RTCEx_SetTimeStamp+0x9a>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689a      	ldr	r2, [r3, #8]
 800d9c6:	4b1e      	ldr	r3, [pc, #120]	; (800da40 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	22ca      	movs	r2, #202	; 0xca
 800d9da:	625a      	str	r2, [r3, #36]	; 0x24
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2253      	movs	r2, #83	; 0x53
 800d9e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f022 0206 	bic.w	r2, r2, #6
 800d9f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	430a      	orrs	r2, r1
 800da02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689a      	ldr	r2, [r3, #8]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da1a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	22ff      	movs	r2, #255	; 0xff
 800da22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	371c      	adds	r7, #28
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	fffff7f7 	.word	0xfffff7f7

0800da44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d101      	bne.n	800da62 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e156      	b.n	800dd10 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7f5 fffc 	bl	8003a74 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2202      	movs	r2, #2
 800da80:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 facf 	bl	800e028 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d00c      	beq.n	800daac <HAL_SAI_Init+0x68>
 800da92:	2b02      	cmp	r3, #2
 800da94:	d80d      	bhi.n	800dab2 <HAL_SAI_Init+0x6e>
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <HAL_SAI_Init+0x5c>
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d003      	beq.n	800daa6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800da9e:	e008      	b.n	800dab2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	61fb      	str	r3, [r7, #28]
      break;
 800daa4:	e006      	b.n	800dab4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800daa6:	2310      	movs	r3, #16
 800daa8:	61fb      	str	r3, [r7, #28]
      break;
 800daaa:	e003      	b.n	800dab4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800daac:	2320      	movs	r3, #32
 800daae:	61fb      	str	r3, [r7, #28]
      break;
 800dab0:	e000      	b.n	800dab4 <HAL_SAI_Init+0x70>
      break;
 800dab2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d81e      	bhi.n	800dafa <HAL_SAI_Init+0xb6>
 800dabc:	a201      	add	r2, pc, #4	; (adr r2, 800dac4 <HAL_SAI_Init+0x80>)
 800dabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac2:	bf00      	nop
 800dac4:	0800dad5 	.word	0x0800dad5
 800dac8:	0800dadb 	.word	0x0800dadb
 800dacc:	0800dae3 	.word	0x0800dae3
 800dad0:	0800daeb 	.word	0x0800daeb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	617b      	str	r3, [r7, #20]
    }
    break;
 800dad8:	e010      	b.n	800dafc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dade:	617b      	str	r3, [r7, #20]
    }
    break;
 800dae0:	e00c      	b.n	800dafc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dae6:	617b      	str	r3, [r7, #20]
    }
    break;
 800dae8:	e008      	b.n	800dafc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800daea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daee:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	f043 0301 	orr.w	r3, r3, #1
 800daf6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800daf8:	e000      	b.n	800dafc <HAL_SAI_Init+0xb8>
    default:
      break;
 800dafa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a85      	ldr	r2, [pc, #532]	; (800dd18 <HAL_SAI_Init+0x2d4>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d004      	beq.n	800db10 <HAL_SAI_Init+0xcc>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a84      	ldr	r2, [pc, #528]	; (800dd1c <HAL_SAI_Init+0x2d8>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d103      	bne.n	800db18 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800db10:	4a83      	ldr	r2, [pc, #524]	; (800dd20 <HAL_SAI_Init+0x2dc>)
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	e002      	b.n	800db1e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800db18:	4a82      	ldr	r2, [pc, #520]	; (800dd24 <HAL_SAI_Init+0x2e0>)
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	69db      	ldr	r3, [r3, #28]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d04c      	beq.n	800dbc0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a7a      	ldr	r2, [pc, #488]	; (800dd18 <HAL_SAI_Init+0x2d4>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d004      	beq.n	800db3e <HAL_SAI_Init+0xfa>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a78      	ldr	r2, [pc, #480]	; (800dd1c <HAL_SAI_Init+0x2d8>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d104      	bne.n	800db48 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800db3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800db42:	f7ff fa63 	bl	800d00c <HAL_RCCEx_GetPeriphCLKFreq>
 800db46:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a76      	ldr	r2, [pc, #472]	; (800dd28 <HAL_SAI_Init+0x2e4>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d004      	beq.n	800db5c <HAL_SAI_Init+0x118>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a75      	ldr	r2, [pc, #468]	; (800dd2c <HAL_SAI_Init+0x2e8>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d104      	bne.n	800db66 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800db5c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800db60:	f7ff fa54 	bl	800d00c <HAL_RCCEx_GetPeriphCLKFreq>
 800db64:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	4613      	mov	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	005b      	lsls	r3, r3, #1
 800db70:	461a      	mov	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	025b      	lsls	r3, r3, #9
 800db78:	fbb2 f3f3 	udiv	r3, r2, r3
 800db7c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	4a6b      	ldr	r2, [pc, #428]	; (800dd30 <HAL_SAI_Init+0x2ec>)
 800db82:	fba2 2303 	umull	r2, r3, r2, r3
 800db86:	08da      	lsrs	r2, r3, #3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800db8c:	68f9      	ldr	r1, [r7, #12]
 800db8e:	4b68      	ldr	r3, [pc, #416]	; (800dd30 <HAL_SAI_Init+0x2ec>)
 800db90:	fba3 2301 	umull	r2, r3, r3, r1
 800db94:	08da      	lsrs	r2, r3, #3
 800db96:	4613      	mov	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4413      	add	r3, r2
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	1aca      	subs	r2, r1, r3
 800dba0:	2a08      	cmp	r2, #8
 800dba2:	d904      	bls.n	800dbae <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a1b      	ldr	r3, [r3, #32]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	2b04      	cmp	r3, #4
 800dbb4:	d104      	bne.n	800dbc0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	085a      	lsrs	r2, r3, #1
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <HAL_SAI_Init+0x18c>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d109      	bne.n	800dbe4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d101      	bne.n	800dbdc <HAL_SAI_Init+0x198>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e001      	b.n	800dbe0 <HAL_SAI_Init+0x19c>
 800dbdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	e008      	b.n	800dbf6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d102      	bne.n	800dbf2 <HAL_SAI_Init+0x1ae>
 800dbec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbf0:	e000      	b.n	800dbf4 <HAL_SAI_Init+0x1b0>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	6819      	ldr	r1, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b4c      	ldr	r3, [pc, #304]	; (800dd34 <HAL_SAI_Init+0x2f0>)
 800dc02:	400b      	ands	r3, r1
 800dc04:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6819      	ldr	r1, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc14:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc1a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc20:	431a      	orrs	r2, r3
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800dc2e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc3a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	051b      	lsls	r3, r3, #20
 800dc42:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6859      	ldr	r1, [r3, #4]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	4b38      	ldr	r3, [pc, #224]	; (800dd38 <HAL_SAI_Init+0x2f4>)
 800dc58:	400b      	ands	r3, r1
 800dc5a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6859      	ldr	r1, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	699a      	ldr	r2, [r3, #24]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6a:	431a      	orrs	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc70:	431a      	orrs	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	430a      	orrs	r2, r1
 800dc78:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6899      	ldr	r1, [r3, #8]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	4b2d      	ldr	r3, [pc, #180]	; (800dd3c <HAL_SAI_Init+0x2f8>)
 800dc86:	400b      	ands	r3, r1
 800dc88:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6899      	ldr	r1, [r3, #8]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc94:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dc9a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800dca0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800dca6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcac:	3b01      	subs	r3, #1
 800dcae:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800dcb0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	430a      	orrs	r2, r1
 800dcb8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68d9      	ldr	r1, [r3, #12]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800dcc8:	400b      	ands	r3, r1
 800dcca:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68d9      	ldr	r1, [r3, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcda:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dce0:	041b      	lsls	r3, r3, #16
 800dce2:	431a      	orrs	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dce8:	3b01      	subs	r3, #1
 800dcea:	021b      	lsls	r3, r3, #8
 800dcec:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3720      	adds	r7, #32
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	40015804 	.word	0x40015804
 800dd1c:	40015824 	.word	0x40015824
 800dd20:	40015800 	.word	0x40015800
 800dd24:	40015c00 	.word	0x40015c00
 800dd28:	40015c04 	.word	0x40015c04
 800dd2c:	40015c24 	.word	0x40015c24
 800dd30:	cccccccd 	.word	0xcccccccd
 800dd34:	ff05c010 	.word	0xff05c010
 800dd38:	ffff1ff0 	.word	0xffff1ff0
 800dd3c:	fff88000 	.word	0xfff88000

0800dd40 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800dd4e:	f7f8 f963 	bl	8006018 <HAL_GetTick>
 800dd52:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <HAL_SAI_Transmit_DMA+0x20>
 800dd5a:	88fb      	ldrh	r3, [r7, #6]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d101      	bne.n	800dd64 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	e093      	b.n	800de8c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	f040 808c 	bne.w	800de8a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d101      	bne.n	800dd80 <HAL_SAI_Transmit_DMA+0x40>
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	e085      	b.n	800de8c <HAL_SAI_Transmit_DMA+0x14c>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	88fa      	ldrh	r2, [r7, #6]
 800dd92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	88fa      	ldrh	r2, [r7, #6]
 800dd9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2212      	movs	r2, #18
 800ddaa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddb2:	4a38      	ldr	r2, [pc, #224]	; (800de94 <HAL_SAI_Transmit_DMA+0x154>)
 800ddb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddba:	4a37      	ldr	r2, [pc, #220]	; (800de98 <HAL_SAI_Transmit_DMA+0x158>)
 800ddbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc2:	4a36      	ldr	r2, [pc, #216]	; (800de9c <HAL_SAI_Transmit_DMA+0x15c>)
 800ddc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddca:	2200      	movs	r2, #0
 800ddcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	331c      	adds	r3, #28
 800ddde:	461a      	mov	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dde6:	f7f9 f841 	bl	8006e6c <HAL_DMA_Start_IT>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e047      	b.n	800de8c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 f8dc 	bl	800dfbc <SAI_InterruptFlag>
 800de04:	4601      	mov	r1, r0
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	691a      	ldr	r2, [r3, #16]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800de22:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de24:	e015      	b.n	800de52 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800de26:	f7f8 f8f7 	bl	8006018 <HAL_GetTick>
 800de2a:	4602      	mov	r2, r0
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de34:	d90d      	bls.n	800de52 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	e01c      	b.n	800de8c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d0e2      	beq.n	800de26 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d107      	bne.n	800de7e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800de7c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	e000      	b.n	800de8c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800de8a:	2302      	movs	r3, #2
  }
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	0800e0f9 	.word	0x0800e0f9
 800de98:	0800e099 	.word	0x0800e099
 800de9c:	0800e191 	.word	0x0800e191

0800dea0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	4613      	mov	r3, r2
 800deac:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <HAL_SAI_Receive_DMA+0x1a>
 800deb4:	88fb      	ldrh	r3, [r7, #6]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e074      	b.n	800dfa8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d16d      	bne.n	800dfa6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d101      	bne.n	800ded8 <HAL_SAI_Receive_DMA+0x38>
 800ded4:	2302      	movs	r3, #2
 800ded6:	e067      	b.n	800dfa8 <HAL_SAI_Receive_DMA+0x108>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	88fa      	ldrh	r2, [r7, #6]
 800deea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	88fa      	ldrh	r2, [r7, #6]
 800def2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2222      	movs	r2, #34	; 0x22
 800df02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0a:	4a29      	ldr	r2, [pc, #164]	; (800dfb0 <HAL_SAI_Receive_DMA+0x110>)
 800df0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df12:	4a28      	ldr	r2, [pc, #160]	; (800dfb4 <HAL_SAI_Receive_DMA+0x114>)
 800df14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1a:	4a27      	ldr	r2, [pc, #156]	; (800dfb8 <HAL_SAI_Receive_DMA+0x118>)
 800df1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df22:	2200      	movs	r2, #0
 800df24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	331c      	adds	r3, #28
 800df30:	4619      	mov	r1, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df36:	461a      	mov	r2, r3
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df3e:	f7f8 ff95 	bl	8006e6c <HAL_DMA_Start_IT>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d005      	beq.n	800df54 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	e029      	b.n	800dfa8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800df54:	2100      	movs	r1, #0
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 f830 	bl	800dfbc <SAI_InterruptFlag>
 800df5c:	4601      	mov	r1, r0
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	691a      	ldr	r2, [r3, #16]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	430a      	orrs	r2, r1
 800df6a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800df7a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d107      	bne.n	800df9a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800df98:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e000      	b.n	800dfa8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800dfa6:	2302      	movs	r3, #2
  }
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	0800e175 	.word	0x0800e175
 800dfb4:	0800e115 	.word	0x0800e115
 800dfb8:	0800e191 	.word	0x0800e191

0800dfbc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d103      	bne.n	800dfd8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f043 0308 	orr.w	r3, r3, #8
 800dfd6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d10b      	bne.n	800dff8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d003      	beq.n	800dff0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d103      	bne.n	800dff8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f043 0310 	orr.w	r3, r3, #16
 800dff6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d003      	beq.n	800e008 <SAI_InterruptFlag+0x4c>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	2b02      	cmp	r3, #2
 800e006:	d104      	bne.n	800e012 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	e003      	b.n	800e01a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f043 0304 	orr.w	r3, r3, #4
 800e018:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e01a:	68fb      	ldr	r3, [r7, #12]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <SAI_Disable+0x68>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a17      	ldr	r2, [pc, #92]	; (800e094 <SAI_Disable+0x6c>)
 800e036:	fba2 2303 	umull	r2, r3, r2, r3
 800e03a:	0b1b      	lsrs	r3, r3, #12
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e052:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	1e5a      	subs	r2, r3, #1
 800e058:	60fa      	str	r2, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10a      	bne.n	800e074 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	72fb      	strb	r3, [r7, #11]
      break;
 800e072:	e006      	b.n	800e082 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d1e8      	bne.n	800e054 <SAI_Disable+0x2c>

  return status;
 800e082:	7afb      	ldrb	r3, [r7, #11]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	20000008 	.word	0x20000008
 800e094:	95cbec1b 	.word	0x95cbec1b

0800e098 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ae:	d01c      	beq.n	800e0ea <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e0c6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff ff76 	bl	800dfbc <SAI_InterruptFlag>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	43d9      	mvns	r1, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	691a      	ldr	r2, [r3, #16]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	400a      	ands	r2, r1
 800e0e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7f6 fdb0 	bl	8004c50 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e0f0:	bf00      	nop
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e104:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f7f6 fdac 	bl	8004c64 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e10c:	bf00      	nop
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e120:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e12a:	d01c      	beq.n	800e166 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e13a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e144:	2100      	movs	r1, #0
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff ff38 	bl	800dfbc <SAI_InterruptFlag>
 800e14c:	4603      	mov	r3, r0
 800e14e:	43d9      	mvns	r1, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	691a      	ldr	r2, [r3, #16]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	400a      	ands	r2, r1
 800e15c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7f3 f87a 	bl	8001260 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e16c:	bf00      	nop
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7f3 f87c 	bl	8001280 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e188:	bf00      	nop
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d004      	beq.n	800e1c2 <SAI_DMAError+0x32>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d112      	bne.n	800e1e8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e1d0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f7ff ff28 	bl	800e028 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f7f6 fd45 	bl	8004c78 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b082      	sub	sp, #8
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e022      	b.n	800e24e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	2b00      	cmp	r3, #0
 800e212:	d105      	bne.n	800e220 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7f5 f8f2 	bl	8003404 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2203      	movs	r2, #3
 800e224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f815 	bl	800e258 <HAL_SD_InitCard>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e00a      	b.n	800e24e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
	...

0800e258 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b08e      	sub	sp, #56	; 0x38
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e260:	2300      	movs	r3, #0
 800e262:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e268:	2300      	movs	r3, #0
 800e26a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e26c:	2300      	movs	r3, #0
 800e26e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e270:	2300      	movs	r3, #0
 800e272:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800e274:	2376      	movs	r3, #118	; 0x76
 800e276:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681d      	ldr	r5, [r3, #0]
 800e27c:	466c      	mov	r4, sp
 800e27e:	f107 0314 	add.w	r3, r7, #20
 800e282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e28a:	f107 0308 	add.w	r3, r7, #8
 800e28e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e290:	4628      	mov	r0, r5
 800e292:	f002 ffef 	bl	8011274 <SDMMC_Init>
 800e296:	4603      	mov	r3, r0
 800e298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d001      	beq.n	800e2a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e056      	b.n	800e356 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2b6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f003 f812 	bl	80112e6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	685a      	ldr	r2, [r3, #4]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2d0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fe0e 	bl	800eef4 <SD_PowerON>
 800e2d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00b      	beq.n	800e2f8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	431a      	orrs	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e02e      	b.n	800e356 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fd2f 	bl	800ed5c <SD_InitCard>
 800e2fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e01b      	b.n	800e356 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e326:	4618      	mov	r0, r3
 800e328:	f003 f870 	bl	801140c <SDMMC_CmdBlockLength>
 800e32c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00f      	beq.n	800e354 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a09      	ldr	r2, [pc, #36]	; (800e360 <HAL_SD_InitCard+0x108>)
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	431a      	orrs	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	e000      	b.n	800e356 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3728      	adds	r7, #40	; 0x28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bdb0      	pop	{r4, r5, r7, pc}
 800e35e:	bf00      	nop
 800e360:	004005ff 	.word	0x004005ff

0800e364 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08c      	sub	sp, #48	; 0x30
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d107      	bne.n	800e38c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e380:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e0c3      	b.n	800e514 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b01      	cmp	r3, #1
 800e396:	f040 80bc 	bne.w	800e512 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	441a      	add	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d907      	bls.n	800e3be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e0aa      	b.n	800e514 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e3dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e2:	4a4e      	ldr	r2, [pc, #312]	; (800e51c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800e3e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ea:	4a4d      	ldr	r2, [pc, #308]	; (800e520 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800e3ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40e:	689a      	ldr	r2, [r3, #8]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	430a      	orrs	r2, r1
 800e418:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3380      	adds	r3, #128	; 0x80
 800e424:	4619      	mov	r1, r3
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	025b      	lsls	r3, r3, #9
 800e42c:	089b      	lsrs	r3, r3, #2
 800e42e:	f7f8 fd1d 	bl	8006e6c <HAL_DMA_Start_IT>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d017      	beq.n	800e468 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e446:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a35      	ldr	r2, [pc, #212]	; (800e524 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	e055      	b.n	800e514 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f042 0208 	orr.w	r2, r2, #8
 800e476:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d002      	beq.n	800e486 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	025b      	lsls	r3, r3, #9
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e48a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	025b      	lsls	r3, r3, #9
 800e490:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e492:	2390      	movs	r3, #144	; 0x90
 800e494:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e496:	2302      	movs	r3, #2
 800e498:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f107 0210 	add.w	r2, r7, #16
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f002 ff81 	bl	80113b4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d90a      	bls.n	800e4ce <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2282      	movs	r2, #130	; 0x82
 800e4bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f002 ffe5 	bl	8011494 <SDMMC_CmdReadMultiBlock>
 800e4ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4cc:	e009      	b.n	800e4e2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2281      	movs	r2, #129	; 0x81
 800e4d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f002 ffb8 	bl	8011450 <SDMMC_CmdReadSingleBlock>
 800e4e0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d012      	beq.n	800e50e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a0d      	ldr	r2, [pc, #52]	; (800e524 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e4ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e002      	b.n	800e514 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	e000      	b.n	800e514 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800e512:	2302      	movs	r3, #2
  }
}
 800e514:	4618      	mov	r0, r3
 800e516:	3730      	adds	r7, #48	; 0x30
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	0800ec47 	.word	0x0800ec47
 800e520:	0800ecb9 	.word	0x0800ecb9
 800e524:	004005ff 	.word	0x004005ff

0800e528 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b08c      	sub	sp, #48	; 0x30
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
 800e534:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d107      	bne.n	800e550 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e544:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e0c6      	b.n	800e6de <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b01      	cmp	r3, #1
 800e55a:	f040 80bf 	bne.w	800e6dc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	441a      	add	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e56e:	429a      	cmp	r2, r3
 800e570:	d907      	bls.n	800e582 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e576:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	e0ad      	b.n	800e6de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2203      	movs	r2, #3
 800e586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2200      	movs	r2, #0
 800e590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f042 021a 	orr.w	r2, r2, #26
 800e5a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a6:	4a50      	ldr	r2, [pc, #320]	; (800e6e8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800e5a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ae:	4a4f      	ldr	r2, [pc, #316]	; (800e6ec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800e5b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d002      	beq.n	800e5c8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c4:	025b      	lsls	r3, r3, #9
 800e5c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d90a      	bls.n	800e5e4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	22a0      	movs	r2, #160	; 0xa0
 800e5d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f002 ff9e 	bl	801151c <SDMMC_CmdWriteMultiBlock>
 800e5e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e5e2:	e009      	b.n	800e5f8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2290      	movs	r2, #144	; 0x90
 800e5e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f002 ff71 	bl	80114d8 <SDMMC_CmdWriteSingleBlock>
 800e5f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d012      	beq.n	800e624 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a3b      	ldr	r2, [pc, #236]	; (800e6f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e604:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	431a      	orrs	r2, r3
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e620:	2301      	movs	r3, #1
 800e622:	e05c      	b.n	800e6de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f042 0208 	orr.w	r2, r2, #8
 800e632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e638:	2240      	movs	r2, #64	; 0x40
 800e63a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e64c:	689a      	ldr	r2, [r3, #8]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	430a      	orrs	r2, r1
 800e656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e65c:	68b9      	ldr	r1, [r7, #8]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3380      	adds	r3, #128	; 0x80
 800e664:	461a      	mov	r2, r3
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	025b      	lsls	r3, r3, #9
 800e66a:	089b      	lsrs	r3, r3, #2
 800e66c:	f7f8 fbfe 	bl	8006e6c <HAL_DMA_Start_IT>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d01a      	beq.n	800e6ac <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f022 021a 	bic.w	r2, r2, #26
 800e684:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a19      	ldr	r2, [pc, #100]	; (800e6f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e68c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e018      	b.n	800e6de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	025b      	lsls	r3, r3, #9
 800e6b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e6b8:	2390      	movs	r3, #144	; 0x90
 800e6ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f107 0210 	add.w	r2, r7, #16
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f002 fe6e 	bl	80113b4 <SDMMC_ConfigData>

      return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e000      	b.n	800e6de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e6dc:	2302      	movs	r3, #2
  }
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3730      	adds	r7, #48	; 0x30
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	0800ec1d 	.word	0x0800ec1d
 800e6ec:	0800ecb9 	.word	0x0800ecb9
 800e6f0:	004005ff 	.word	0x004005ff

0800e6f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e716:	0f9b      	lsrs	r3, r3, #30
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	0e9b      	lsrs	r3, r3, #26
 800e724:	b2db      	uxtb	r3, r3
 800e726:	f003 030f 	and.w	r3, r3, #15
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e734:	0e1b      	lsrs	r3, r3, #24
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f003 0303 	and.w	r3, r3, #3
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e746:	0c1b      	lsrs	r3, r3, #16
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e752:	0a1b      	lsrs	r3, r3, #8
 800e754:	b2da      	uxtb	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e768:	0d1b      	lsrs	r3, r3, #20
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e774:	0c1b      	lsrs	r3, r3, #16
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 030f 	and.w	r3, r3, #15
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e786:	0bdb      	lsrs	r3, r3, #15
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e798:	0b9b      	lsrs	r3, r3, #14
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7aa:	0b5b      	lsrs	r3, r3, #13
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d163      	bne.n	800e8a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7dc:	009a      	lsls	r2, r3, #2
 800e7de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e7e8:	0f92      	lsrs	r2, r2, #30
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f4:	0edb      	lsrs	r3, r3, #27
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 0307 	and.w	r3, r3, #7
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e806:	0e1b      	lsrs	r3, r3, #24
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e818:	0d5b      	lsrs	r3, r3, #21
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	f003 0307 	and.w	r3, r3, #7
 800e820:	b2da      	uxtb	r2, r3
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82a:	0c9b      	lsrs	r3, r3, #18
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	b2da      	uxtb	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83c:	0bdb      	lsrs	r3, r3, #15
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 0307 	and.w	r3, r3, #7
 800e844:	b2da      	uxtb	r2, r3
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	7e1b      	ldrb	r3, [r3, #24]
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	f003 0307 	and.w	r3, r3, #7
 800e85e:	3302      	adds	r3, #2
 800e860:	2201      	movs	r2, #1
 800e862:	fa02 f303 	lsl.w	r3, r2, r3
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e86a:	fb02 f203 	mul.w	r2, r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	7a1b      	ldrb	r3, [r3, #8]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 030f 	and.w	r3, r3, #15
 800e87c:	2201      	movs	r2, #1
 800e87e:	409a      	lsls	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e88c:	0a52      	lsrs	r2, r2, #9
 800e88e:	fb02 f203 	mul.w	r2, r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e89c:	661a      	str	r2, [r3, #96]	; 0x60
 800e89e:	e031      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d11d      	bne.n	800e8e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ac:	041b      	lsls	r3, r3, #16
 800e8ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b6:	0c1b      	lsrs	r3, r3, #16
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	029a      	lsls	r2, r3, #10
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	661a      	str	r2, [r3, #96]	; 0x60
 800e8e2:	e00f      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a58      	ldr	r2, [pc, #352]	; (800ea4c <HAL_SD_GetCardCSD+0x344>)
 800e8ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	e09d      	b.n	800ea40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e908:	0b9b      	lsrs	r3, r3, #14
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	b2da      	uxtb	r2, r3
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91a:	09db      	lsrs	r3, r3, #7
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	b2da      	uxtb	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e932:	b2da      	uxtb	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93c:	0fdb      	lsrs	r3, r3, #31
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e948:	0f5b      	lsrs	r3, r3, #29
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f003 0303 	and.w	r3, r3, #3
 800e950:	b2da      	uxtb	r2, r3
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	0e9b      	lsrs	r3, r3, #26
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	b2da      	uxtb	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96c:	0d9b      	lsrs	r3, r3, #22
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	f003 030f 	and.w	r3, r3, #15
 800e974:	b2da      	uxtb	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97e:	0d5b      	lsrs	r3, r3, #21
 800e980:	b2db      	uxtb	r3, r3
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	b2da      	uxtb	r2, r3
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e99a:	0c1b      	lsrs	r3, r3, #16
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ae:	0bdb      	lsrs	r3, r3, #15
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	0b9b      	lsrs	r3, r3, #14
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d6:	0b5b      	lsrs	r3, r3, #13
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ea:	0b1b      	lsrs	r3, r3, #12
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fe:	0a9b      	lsrs	r3, r3, #10
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 0303 	and.w	r3, r3, #3
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	f003 0303 	and.w	r3, r3, #3
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea26:	085b      	lsrs	r3, r3, #1
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	004005ff 	.word	0x004005ff

0800ea50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b08e      	sub	sp, #56	; 0x38
 800eaac:	af04      	add	r7, sp, #16
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2203      	movs	r2, #3
 800eabc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d02e      	beq.n	800eb26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eace:	d106      	bne.n	800eade <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	639a      	str	r2, [r3, #56]	; 0x38
 800eadc:	e029      	b.n	800eb32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eae4:	d10a      	bne.n	800eafc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 faba 	bl	800f060 <SD_WideBus_Enable>
 800eaec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaf2:	6a3b      	ldr	r3, [r7, #32]
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	639a      	str	r2, [r3, #56]	; 0x38
 800eafa:	e01a      	b.n	800eb32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10a      	bne.n	800eb18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 faf7 	bl	800f0f6 <SD_WideBus_Disable>
 800eb08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	431a      	orrs	r2, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	639a      	str	r2, [r3, #56]	; 0x38
 800eb16:	e00c      	b.n	800eb32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	639a      	str	r2, [r3, #56]	; 0x38
 800eb24:	e005      	b.n	800eb32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00b      	beq.n	800eb52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4a26      	ldr	r2, [pc, #152]	; (800ebd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800eb40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb50:	e01f      	b.n	800eb92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681d      	ldr	r5, [r3, #0]
 800eb78:	466c      	mov	r4, sp
 800eb7a:	f107 0314 	add.w	r3, r7, #20
 800eb7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f002 fb71 	bl	8011274 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f002 fc36 	bl	801140c <SDMMC_CmdBlockLength>
 800eba0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00c      	beq.n	800ebc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4a0a      	ldr	r2, [pc, #40]	; (800ebd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ebae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	431a      	orrs	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ebca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3728      	adds	r7, #40	; 0x28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	004005ff 	.word	0x004005ff

0800ebdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ebe8:	f107 030c 	add.w	r3, r7, #12
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fa0e 	bl	800f010 <SD_SendStatus>
 800ebf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d005      	beq.n	800ec08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	431a      	orrs	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	0a5b      	lsrs	r3, r3, #9
 800ec0c:	f003 030f 	and.w	r3, r3, #15
 800ec10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ec12:	693b      	ldr	r3, [r7, #16]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3718      	adds	r7, #24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ec3a:	bf00      	nop
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec58:	2b82      	cmp	r3, #130	; 0x82
 800ec5a:	d111      	bne.n	800ec80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f002 fc7d 	bl	8011560 <SDMMC_CmdStopTransfer>
 800ec66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d008      	beq.n	800ec80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	431a      	orrs	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7ff fd3a 	bl	800e6f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f022 0208 	bic.w	r2, r2, #8
 800ec8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec98:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f004 f829 	bl	8012d00 <HAL_SD_RxCpltCallback>
#endif
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7f8 fb4c 	bl	8007364 <HAL_DMA_GetError>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	d03e      	beq.n	800ed50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d002      	beq.n	800ecee <SD_DMAError+0x36>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d12d      	bne.n	800ed4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a19      	ldr	r2, [pc, #100]	; (800ed58 <SD_DMAError+0xa0>)
 800ecf4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ed04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ed12:	6978      	ldr	r0, [r7, #20]
 800ed14:	f7ff ff62 	bl	800ebdc <HAL_SD_GetCardState>
 800ed18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	2b06      	cmp	r3, #6
 800ed1e:	d002      	beq.n	800ed26 <SD_DMAError+0x6e>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b05      	cmp	r3, #5
 800ed24:	d10a      	bne.n	800ed3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f002 fc18 	bl	8011560 <SDMMC_CmdStopTransfer>
 800ed30:	4602      	mov	r2, r0
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed36:	431a      	orrs	r2, r3
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2200      	movs	r2, #0
 800ed48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ed4a:	6978      	ldr	r0, [r7, #20]
 800ed4c:	f7ff fcd2 	bl	800e6f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ed50:	bf00      	nop
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	004005ff 	.word	0x004005ff

0800ed5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ed5c:	b5b0      	push	{r4, r5, r7, lr}
 800ed5e:	b094      	sub	sp, #80	; 0x50
 800ed60:	af04      	add	r7, sp, #16
 800ed62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ed64:	2301      	movs	r3, #1
 800ed66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f002 fac9 	bl	8011304 <SDMMC_GetPowerState>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ed7c:	e0b6      	b.n	800eeec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d02f      	beq.n	800ede6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f002 fcf3 	bl	8011776 <SDMMC_CmdSendCID>
 800ed90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <SD_InitCard+0x40>
    {
      return errorstate;
 800ed98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed9a:	e0a7      	b.n	800eeec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2100      	movs	r1, #0
 800eda2:	4618      	mov	r0, r3
 800eda4:	f002 faf3 	bl	801138e <SDMMC_GetResponse>
 800eda8:	4602      	mov	r2, r0
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2104      	movs	r1, #4
 800edb4:	4618      	mov	r0, r3
 800edb6:	f002 faea 	bl	801138e <SDMMC_GetResponse>
 800edba:	4602      	mov	r2, r0
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2108      	movs	r1, #8
 800edc6:	4618      	mov	r0, r3
 800edc8:	f002 fae1 	bl	801138e <SDMMC_GetResponse>
 800edcc:	4602      	mov	r2, r0
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	210c      	movs	r1, #12
 800edd8:	4618      	mov	r0, r3
 800edda:	f002 fad8 	bl	801138e <SDMMC_GetResponse>
 800edde:	4602      	mov	r2, r0
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edea:	2b03      	cmp	r3, #3
 800edec:	d00d      	beq.n	800ee0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f107 020e 	add.w	r2, r7, #14
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f002 fcf9 	bl	80117f0 <SDMMC_CmdSetRelAdd>
 800edfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <SD_InitCard+0xae>
    {
      return errorstate;
 800ee06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee08:	e070      	b.n	800eeec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d036      	beq.n	800ee80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ee12:	89fb      	ldrh	r3, [r7, #14]
 800ee14:	461a      	mov	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee22:	041b      	lsls	r3, r3, #16
 800ee24:	4619      	mov	r1, r3
 800ee26:	4610      	mov	r0, r2
 800ee28:	f002 fcc3 	bl	80117b2 <SDMMC_CmdSendCSD>
 800ee2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ee34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee36:	e059      	b.n	800eeec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f002 faa5 	bl	801138e <SDMMC_GetResponse>
 800ee44:	4602      	mov	r2, r0
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2104      	movs	r1, #4
 800ee50:	4618      	mov	r0, r3
 800ee52:	f002 fa9c 	bl	801138e <SDMMC_GetResponse>
 800ee56:	4602      	mov	r2, r0
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2108      	movs	r1, #8
 800ee62:	4618      	mov	r0, r3
 800ee64:	f002 fa93 	bl	801138e <SDMMC_GetResponse>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	210c      	movs	r1, #12
 800ee74:	4618      	mov	r0, r3
 800ee76:	f002 fa8a 	bl	801138e <SDMMC_GetResponse>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2104      	movs	r1, #4
 800ee86:	4618      	mov	r0, r3
 800ee88:	f002 fa81 	bl	801138e <SDMMC_GetResponse>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	0d1a      	lsrs	r2, r3, #20
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ee94:	f107 0310 	add.w	r3, r7, #16
 800ee98:	4619      	mov	r1, r3
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fc34 	bl	800e708 <HAL_SD_GetCardCSD>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eeaa:	e01f      	b.n	800eeec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6819      	ldr	r1, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeb4:	041b      	lsls	r3, r3, #16
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	f04f 0300 	mov.w	r3, #0
 800eebc:	4608      	mov	r0, r1
 800eebe:	f002 fb71 	bl	80115a4 <SDMMC_CmdSelDesel>
 800eec2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800eec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <SD_InitCard+0x172>
  {
    return errorstate;
 800eeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eecc:	e00e      	b.n	800eeec <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681d      	ldr	r5, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	466c      	mov	r4, sp
 800eed6:	f103 0210 	add.w	r2, r3, #16
 800eeda:	ca07      	ldmia	r2, {r0, r1, r2}
 800eedc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eee0:	3304      	adds	r3, #4
 800eee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eee4:	4628      	mov	r0, r5
 800eee6:	f002 f9c5 	bl	8011274 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3740      	adds	r7, #64	; 0x40
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bdb0      	pop	{r4, r5, r7, pc}

0800eef4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eefc:	2300      	movs	r3, #0
 800eefe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ef00:	2300      	movs	r3, #0
 800ef02:	617b      	str	r3, [r7, #20]
 800ef04:	2300      	movs	r3, #0
 800ef06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f002 fb6c 	bl	80115ea <SDMMC_CmdGoIdleState>
 800ef12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <SD_PowerON+0x2a>
  {
    return errorstate;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	e072      	b.n	800f004 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f002 fb7f 	bl	8011626 <SDMMC_CmdOperCond>
 800ef28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00d      	beq.n	800ef4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f002 fb55 	bl	80115ea <SDMMC_CmdGoIdleState>
 800ef40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d004      	beq.n	800ef52 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	e05b      	b.n	800f004 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d137      	bne.n	800efca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2100      	movs	r1, #0
 800ef60:	4618      	mov	r0, r3
 800ef62:	f002 fb7f 	bl	8011664 <SDMMC_CmdAppCommand>
 800ef66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d02d      	beq.n	800efca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef72:	e047      	b.n	800f004 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2100      	movs	r1, #0
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f002 fb72 	bl	8011664 <SDMMC_CmdAppCommand>
 800ef80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <SD_PowerON+0x98>
    {
      return errorstate;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	e03b      	b.n	800f004 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	491e      	ldr	r1, [pc, #120]	; (800f00c <SD_PowerON+0x118>)
 800ef92:	4618      	mov	r0, r3
 800ef94:	f002 fb88 	bl	80116a8 <SDMMC_CmdAppOperCommand>
 800ef98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efa4:	e02e      	b.n	800f004 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2100      	movs	r1, #0
 800efac:	4618      	mov	r0, r3
 800efae:	f002 f9ee 	bl	801138e <SDMMC_GetResponse>
 800efb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	0fdb      	lsrs	r3, r3, #31
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d101      	bne.n	800efc0 <SD_PowerON+0xcc>
 800efbc:	2301      	movs	r3, #1
 800efbe:	e000      	b.n	800efc2 <SD_PowerON+0xce>
 800efc0:	2300      	movs	r3, #0
 800efc2:	613b      	str	r3, [r7, #16]

    count++;
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	3301      	adds	r3, #1
 800efc8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d802      	bhi.n	800efda <SD_PowerON+0xe6>
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0cc      	beq.n	800ef74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d902      	bls.n	800efea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800efe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800efe8:	e00c      	b.n	800f004 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d003      	beq.n	800effc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	645a      	str	r2, [r3, #68]	; 0x44
 800effa:	e002      	b.n	800f002 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	c1100000 	.word	0xc1100000

0800f010 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d102      	bne.n	800f026 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f024:	e018      	b.n	800f058 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f02e:	041b      	lsls	r3, r3, #16
 800f030:	4619      	mov	r1, r3
 800f032:	4610      	mov	r0, r2
 800f034:	f002 fbfd 	bl	8011832 <SDMMC_CmdSendStatus>
 800f038:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	e009      	b.n	800f058 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2100      	movs	r1, #0
 800f04a:	4618      	mov	r0, r3
 800f04c:	f002 f99f 	bl	801138e <SDMMC_GetResponse>
 800f050:	4602      	mov	r2, r0
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f068:	2300      	movs	r3, #0
 800f06a:	60fb      	str	r3, [r7, #12]
 800f06c:	2300      	movs	r3, #0
 800f06e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2100      	movs	r1, #0
 800f076:	4618      	mov	r0, r3
 800f078:	f002 f989 	bl	801138e <SDMMC_GetResponse>
 800f07c:	4603      	mov	r3, r0
 800f07e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f086:	d102      	bne.n	800f08e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f08c:	e02f      	b.n	800f0ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f08e:	f107 030c 	add.w	r3, r7, #12
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f879 	bl	800f18c <SD_FindSCR>
 800f09a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	e023      	b.n	800f0ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01c      	beq.n	800f0ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b8:	041b      	lsls	r3, r3, #16
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f002 fad1 	bl	8011664 <SDMMC_CmdAppCommand>
 800f0c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	e00f      	b.n	800f0ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2102      	movs	r1, #2
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f002 fb0b 	bl	80116f0 <SDMMC_CmdBusWidth>
 800f0da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	e003      	b.n	800f0ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e001      	b.n	800f0ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f0ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3718      	adds	r7, #24
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f0fe:	2300      	movs	r3, #0
 800f100:	60fb      	str	r3, [r7, #12]
 800f102:	2300      	movs	r3, #0
 800f104:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2100      	movs	r1, #0
 800f10c:	4618      	mov	r0, r3
 800f10e:	f002 f93e 	bl	801138e <SDMMC_GetResponse>
 800f112:	4603      	mov	r3, r0
 800f114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f11c:	d102      	bne.n	800f124 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f11e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f122:	e02f      	b.n	800f184 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f124:	f107 030c 	add.w	r3, r7, #12
 800f128:	4619      	mov	r1, r3
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f82e 	bl	800f18c <SD_FindSCR>
 800f130:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d001      	beq.n	800f13c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	e023      	b.n	800f184 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f142:	2b00      	cmp	r3, #0
 800f144:	d01c      	beq.n	800f180 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f14e:	041b      	lsls	r3, r3, #16
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f002 fa86 	bl	8011664 <SDMMC_CmdAppCommand>
 800f158:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	e00f      	b.n	800f184 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f002 fac0 	bl	80116f0 <SDMMC_CmdBusWidth>
 800f170:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d001      	beq.n	800f17c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	e003      	b.n	800f184 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e001      	b.n	800f184 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f184:	4618      	mov	r0, r3
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f18c:	b590      	push	{r4, r7, lr}
 800f18e:	b08f      	sub	sp, #60	; 0x3c
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f196:	f7f6 ff3f 	bl	8006018 <HAL_GetTick>
 800f19a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f19c:	2300      	movs	r3, #0
 800f19e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	60bb      	str	r3, [r7, #8]
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2108      	movs	r1, #8
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f002 f92a 	bl	801140c <SDMMC_CmdBlockLength>
 800f1b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c2:	e0b2      	b.n	800f32a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1cc:	041b      	lsls	r3, r3, #16
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	f002 fa47 	bl	8011664 <SDMMC_CmdAppCommand>
 800f1d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d001      	beq.n	800f1e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	e0a3      	b.n	800f32a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f1ec:	2330      	movs	r3, #48	; 0x30
 800f1ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f107 0210 	add.w	r2, r7, #16
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f002 f8d4 	bl	80113b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4618      	mov	r0, r3
 800f212:	f002 fa8f 	bl	8011734 <SDMMC_CmdSendSCR>
 800f216:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d02a      	beq.n	800f274 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800f21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f220:	e083      	b.n	800f32a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00f      	beq.n	800f250 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6819      	ldr	r1, [r3, #0]
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	f107 0208 	add.w	r2, r7, #8
 800f23c:	18d4      	adds	r4, r2, r3
 800f23e:	4608      	mov	r0, r1
 800f240:	f002 f844 	bl	80112cc <SDMMC_ReadFIFO>
 800f244:	4603      	mov	r3, r0
 800f246:	6023      	str	r3, [r4, #0]
      index++;
 800f248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24a:	3301      	adds	r3, #1
 800f24c:	637b      	str	r3, [r7, #52]	; 0x34
 800f24e:	e006      	b.n	800f25e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d012      	beq.n	800f284 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f25e:	f7f6 fedb 	bl	8006018 <HAL_GetTick>
 800f262:	4602      	mov	r2, r0
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f26c:	d102      	bne.n	800f274 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f272:	e05a      	b.n	800f32a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f27a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d0cf      	beq.n	800f222 <SD_FindSCR+0x96>
 800f282:	e000      	b.n	800f286 <SD_FindSCR+0xfa>
      break;
 800f284:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28c:	f003 0308 	and.w	r3, r3, #8
 800f290:	2b00      	cmp	r3, #0
 800f292:	d005      	beq.n	800f2a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2208      	movs	r2, #8
 800f29a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f29c:	2308      	movs	r3, #8
 800f29e:	e044      	b.n	800f32a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	e037      	b.n	800f32a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c0:	f003 0320 	and.w	r3, r3, #32
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d005      	beq.n	800f2d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2220      	movs	r2, #32
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f2d0:	2320      	movs	r3, #32
 800f2d2:	e02a      	b.n	800f32a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800f2dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	061a      	lsls	r2, r3, #24
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	021b      	lsls	r3, r3, #8
 800f2e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	0a1b      	lsrs	r3, r3, #8
 800f2f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f2f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	0e1b      	lsrs	r3, r3, #24
 800f2fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fe:	601a      	str	r2, [r3, #0]
    scr++;
 800f300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f302:	3304      	adds	r3, #4
 800f304:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	061a      	lsls	r2, r3, #24
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	021b      	lsls	r3, r3, #8
 800f30e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f312:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	0a1b      	lsrs	r3, r3, #8
 800f318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f31c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	0e1b      	lsrs	r3, r3, #24
 800f322:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	373c      	adds	r7, #60	; 0x3c
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd90      	pop	{r4, r7, pc}

0800f332 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800f332:	b580      	push	{r7, lr}
 800f334:	b082      	sub	sp, #8
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e025      	b.n	800f392 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2200      	movs	r2, #0
 800f356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7f4 fb80 	bl	8003a60 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2202      	movs	r2, #2
 800f364:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3304      	adds	r3, #4
 800f370:	4619      	mov	r1, r3
 800f372:	4610      	mov	r0, r2
 800f374:	f001 fe54 	bl	8011020 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	461a      	mov	r2, r3
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	f001 febe 	bl	8011104 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b084      	sub	sp, #16
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	60f8      	str	r0, [r7, #12]
 800f3a2:	60b9      	str	r1, [r7, #8]
 800f3a4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d101      	bne.n	800f3b6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800f3b2:	2302      	movs	r3, #2
 800f3b4:	e018      	b.n	800f3e8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2202      	movs	r2, #2
 800f3ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f001 ff1c 	bl	8011204 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d104      	bne.n	800f3de <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2205      	movs	r2, #5
 800f3d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f3dc:	e003      	b.n	800f3e6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b02      	cmp	r3, #2
 800f404:	d101      	bne.n	800f40a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800f406:	2302      	movs	r3, #2
 800f408:	e00e      	b.n	800f428 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2202      	movs	r2, #2
 800f40e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	4618      	mov	r0, r3
 800f41a:	f001 ff17 	bl	801124c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2201      	movs	r2, #1
 800f422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e04c      	b.n	800f4dc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7f4 f836 	bl	80034c8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2202      	movs	r2, #2
 800f460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f022 0203 	bic.w	r2, r2, #3
 800f472:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	4b19      	ldr	r3, [pc, #100]	; (800f4e4 <HAL_SPDIFRX_Init+0xb4>)
 800f480:	4013      	ands	r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800f48c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800f492:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800f498:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800f49e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800f4a4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800f4aa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800f4b0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800f4b6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800f4bc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	fff88407 	.word	0xfff88407

0800f4e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e049      	b.n	800f58e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7f4 f81c 	bl	800354c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2202      	movs	r2, #2
 800f518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f000 fc22 	bl	800fd70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f58c:	2300      	movs	r3, #0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
	...

0800f598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d001      	beq.n	800f5b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e054      	b.n	800f65a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	68da      	ldr	r2, [r3, #12]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f042 0201 	orr.w	r2, r2, #1
 800f5c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a26      	ldr	r2, [pc, #152]	; (800f668 <HAL_TIM_Base_Start_IT+0xd0>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d022      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5da:	d01d      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a22      	ldr	r2, [pc, #136]	; (800f66c <HAL_TIM_Base_Start_IT+0xd4>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d018      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a21      	ldr	r2, [pc, #132]	; (800f670 <HAL_TIM_Base_Start_IT+0xd8>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d013      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a1f      	ldr	r2, [pc, #124]	; (800f674 <HAL_TIM_Base_Start_IT+0xdc>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d00e      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4a1e      	ldr	r2, [pc, #120]	; (800f678 <HAL_TIM_Base_Start_IT+0xe0>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d009      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a1c      	ldr	r2, [pc, #112]	; (800f67c <HAL_TIM_Base_Start_IT+0xe4>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d004      	beq.n	800f618 <HAL_TIM_Base_Start_IT+0x80>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	4a1b      	ldr	r2, [pc, #108]	; (800f680 <HAL_TIM_Base_Start_IT+0xe8>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d115      	bne.n	800f644 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	689a      	ldr	r2, [r3, #8]
 800f61e:	4b19      	ldr	r3, [pc, #100]	; (800f684 <HAL_TIM_Base_Start_IT+0xec>)
 800f620:	4013      	ands	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2b06      	cmp	r3, #6
 800f628:	d015      	beq.n	800f656 <HAL_TIM_Base_Start_IT+0xbe>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f630:	d011      	beq.n	800f656 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f042 0201 	orr.w	r2, r2, #1
 800f640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f642:	e008      	b.n	800f656 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f042 0201 	orr.w	r2, r2, #1
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	e000      	b.n	800f658 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f656:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40010000 	.word	0x40010000
 800f66c:	40000400 	.word	0x40000400
 800f670:	40000800 	.word	0x40000800
 800f674:	40000c00 	.word	0x40000c00
 800f678:	40010400 	.word	0x40010400
 800f67c:	40014000 	.word	0x40014000
 800f680:	40001800 	.word	0x40001800
 800f684:	00010007 	.word	0x00010007

0800f688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d101      	bne.n	800f69a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	e049      	b.n	800f72e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d106      	bne.n	800f6b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7f3 ffba 	bl	8003628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2202      	movs	r2, #2
 800f6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	f000 fb52 	bl	800fd70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b082      	sub	sp, #8
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	f003 0302 	and.w	r3, r3, #2
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d122      	bne.n	800f792 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b02      	cmp	r3, #2
 800f758:	d11b      	bne.n	800f792 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f06f 0202 	mvn.w	r2, #2
 800f762:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	f003 0303 	and.w	r3, r3, #3
 800f774:	2b00      	cmp	r3, #0
 800f776:	d003      	beq.n	800f780 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fadb 	bl	800fd34 <HAL_TIM_IC_CaptureCallback>
 800f77e:	e005      	b.n	800f78c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 facd 	bl	800fd20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fade 	bl	800fd48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	f003 0304 	and.w	r3, r3, #4
 800f79c:	2b04      	cmp	r3, #4
 800f79e:	d122      	bne.n	800f7e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	f003 0304 	and.w	r3, r3, #4
 800f7aa:	2b04      	cmp	r3, #4
 800f7ac:	d11b      	bne.n	800f7e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f06f 0204 	mvn.w	r2, #4
 800f7b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	699b      	ldr	r3, [r3, #24]
 800f7c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d003      	beq.n	800f7d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fab1 	bl	800fd34 <HAL_TIM_IC_CaptureCallback>
 800f7d2:	e005      	b.n	800f7e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 faa3 	bl	800fd20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 fab4 	bl	800fd48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	691b      	ldr	r3, [r3, #16]
 800f7ec:	f003 0308 	and.w	r3, r3, #8
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	d122      	bne.n	800f83a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	f003 0308 	and.w	r3, r3, #8
 800f7fe:	2b08      	cmp	r3, #8
 800f800:	d11b      	bne.n	800f83a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f06f 0208 	mvn.w	r2, #8
 800f80a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2204      	movs	r2, #4
 800f810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	f003 0303 	and.w	r3, r3, #3
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d003      	beq.n	800f828 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 fa87 	bl	800fd34 <HAL_TIM_IC_CaptureCallback>
 800f826:	e005      	b.n	800f834 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fa79 	bl	800fd20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fa8a 	bl	800fd48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	f003 0310 	and.w	r3, r3, #16
 800f844:	2b10      	cmp	r3, #16
 800f846:	d122      	bne.n	800f88e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	f003 0310 	and.w	r3, r3, #16
 800f852:	2b10      	cmp	r3, #16
 800f854:	d11b      	bne.n	800f88e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f06f 0210 	mvn.w	r2, #16
 800f85e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2208      	movs	r2, #8
 800f864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	69db      	ldr	r3, [r3, #28]
 800f86c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f870:	2b00      	cmp	r3, #0
 800f872:	d003      	beq.n	800f87c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 fa5d 	bl	800fd34 <HAL_TIM_IC_CaptureCallback>
 800f87a:	e005      	b.n	800f888 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fa4f 	bl	800fd20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fa60 	bl	800fd48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	691b      	ldr	r3, [r3, #16]
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d10e      	bne.n	800f8ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d107      	bne.n	800f8ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f06f 0201 	mvn.w	r2, #1
 800f8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7f3 f9a3 	bl	8002c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8c4:	2b80      	cmp	r3, #128	; 0x80
 800f8c6:	d10e      	bne.n	800f8e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8d2:	2b80      	cmp	r3, #128	; 0x80
 800f8d4:	d107      	bne.n	800f8e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 fef3 	bl	80106cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8f4:	d10e      	bne.n	800f914 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f900:	2b80      	cmp	r3, #128	; 0x80
 800f902:	d107      	bne.n	800f914 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 fee6 	bl	80106e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f91e:	2b40      	cmp	r3, #64	; 0x40
 800f920:	d10e      	bne.n	800f940 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f92c:	2b40      	cmp	r3, #64	; 0x40
 800f92e:	d107      	bne.n	800f940 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 fa0e 	bl	800fd5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	f003 0320 	and.w	r3, r3, #32
 800f94a:	2b20      	cmp	r3, #32
 800f94c:	d10e      	bne.n	800f96c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	f003 0320 	and.w	r3, r3, #32
 800f958:	2b20      	cmp	r3, #32
 800f95a:	d107      	bne.n	800f96c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f06f 0220 	mvn.w	r2, #32
 800f964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 fea6 	bl	80106b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f986:	2b01      	cmp	r3, #1
 800f988:	d101      	bne.n	800f98e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f98a:	2302      	movs	r3, #2
 800f98c:	e0fd      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x216>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2201      	movs	r2, #1
 800f992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b14      	cmp	r3, #20
 800f99a:	f200 80f0 	bhi.w	800fb7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f99e:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a4:	0800f9f9 	.word	0x0800f9f9
 800f9a8:	0800fb7f 	.word	0x0800fb7f
 800f9ac:	0800fb7f 	.word	0x0800fb7f
 800f9b0:	0800fb7f 	.word	0x0800fb7f
 800f9b4:	0800fa39 	.word	0x0800fa39
 800f9b8:	0800fb7f 	.word	0x0800fb7f
 800f9bc:	0800fb7f 	.word	0x0800fb7f
 800f9c0:	0800fb7f 	.word	0x0800fb7f
 800f9c4:	0800fa7b 	.word	0x0800fa7b
 800f9c8:	0800fb7f 	.word	0x0800fb7f
 800f9cc:	0800fb7f 	.word	0x0800fb7f
 800f9d0:	0800fb7f 	.word	0x0800fb7f
 800f9d4:	0800fabb 	.word	0x0800fabb
 800f9d8:	0800fb7f 	.word	0x0800fb7f
 800f9dc:	0800fb7f 	.word	0x0800fb7f
 800f9e0:	0800fb7f 	.word	0x0800fb7f
 800f9e4:	0800fafd 	.word	0x0800fafd
 800f9e8:	0800fb7f 	.word	0x0800fb7f
 800f9ec:	0800fb7f 	.word	0x0800fb7f
 800f9f0:	0800fb7f 	.word	0x0800fb7f
 800f9f4:	0800fb3d 	.word	0x0800fb3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68b9      	ldr	r1, [r7, #8]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 fa56 	bl	800feb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	699a      	ldr	r2, [r3, #24]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f042 0208 	orr.w	r2, r2, #8
 800fa12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	699a      	ldr	r2, [r3, #24]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f022 0204 	bic.w	r2, r2, #4
 800fa22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	6999      	ldr	r1, [r3, #24]
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	691a      	ldr	r2, [r3, #16]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	430a      	orrs	r2, r1
 800fa34:	619a      	str	r2, [r3, #24]
      break;
 800fa36:	e0a3      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 faa8 	bl	800ff94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	699a      	ldr	r2, [r3, #24]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	699a      	ldr	r2, [r3, #24]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	6999      	ldr	r1, [r3, #24]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	021a      	lsls	r2, r3, #8
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	430a      	orrs	r2, r1
 800fa76:	619a      	str	r2, [r3, #24]
      break;
 800fa78:	e082      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	68b9      	ldr	r1, [r7, #8]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f000 faff 	bl	8010084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	69da      	ldr	r2, [r3, #28]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f042 0208 	orr.w	r2, r2, #8
 800fa94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	69da      	ldr	r2, [r3, #28]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f022 0204 	bic.w	r2, r2, #4
 800faa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	69d9      	ldr	r1, [r3, #28]
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	691a      	ldr	r2, [r3, #16]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	430a      	orrs	r2, r1
 800fab6:	61da      	str	r2, [r3, #28]
      break;
 800fab8:	e062      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68b9      	ldr	r1, [r7, #8]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 fb55 	bl	8010170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	69da      	ldr	r2, [r3, #28]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	69da      	ldr	r2, [r3, #28]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	69d9      	ldr	r1, [r3, #28]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	021a      	lsls	r2, r3, #8
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	430a      	orrs	r2, r1
 800faf8:	61da      	str	r2, [r3, #28]
      break;
 800fafa:	e041      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	68b9      	ldr	r1, [r7, #8]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f000 fb8c 	bl	8010220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f042 0208 	orr.w	r2, r2, #8
 800fb16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f022 0204 	bic.w	r2, r2, #4
 800fb26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	691a      	ldr	r2, [r3, #16]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	430a      	orrs	r2, r1
 800fb38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb3a:	e021      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68b9      	ldr	r1, [r7, #8]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fbbe 	bl	80102c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	021a      	lsls	r2, r3, #8
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	430a      	orrs	r2, r1
 800fb7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb7c:	e000      	b.n	800fb80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800fb7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb88:	2300      	movs	r3, #0
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop

0800fb94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_TIM_ConfigClockSource+0x18>
 800fba8:	2302      	movs	r3, #2
 800fbaa:	e0b3      	b.n	800fd14 <HAL_TIM_ConfigClockSource+0x180>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	4b55      	ldr	r3, [pc, #340]	; (800fd1c <HAL_TIM_ConfigClockSource+0x188>)
 800fbc8:	4013      	ands	r3, r2
 800fbca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbe4:	d03e      	beq.n	800fc64 <HAL_TIM_ConfigClockSource+0xd0>
 800fbe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbea:	f200 8087 	bhi.w	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fbee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbf2:	f000 8085 	beq.w	800fd00 <HAL_TIM_ConfigClockSource+0x16c>
 800fbf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbfa:	d87f      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fbfc:	2b70      	cmp	r3, #112	; 0x70
 800fbfe:	d01a      	beq.n	800fc36 <HAL_TIM_ConfigClockSource+0xa2>
 800fc00:	2b70      	cmp	r3, #112	; 0x70
 800fc02:	d87b      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc04:	2b60      	cmp	r3, #96	; 0x60
 800fc06:	d050      	beq.n	800fcaa <HAL_TIM_ConfigClockSource+0x116>
 800fc08:	2b60      	cmp	r3, #96	; 0x60
 800fc0a:	d877      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc0c:	2b50      	cmp	r3, #80	; 0x50
 800fc0e:	d03c      	beq.n	800fc8a <HAL_TIM_ConfigClockSource+0xf6>
 800fc10:	2b50      	cmp	r3, #80	; 0x50
 800fc12:	d873      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc14:	2b40      	cmp	r3, #64	; 0x40
 800fc16:	d058      	beq.n	800fcca <HAL_TIM_ConfigClockSource+0x136>
 800fc18:	2b40      	cmp	r3, #64	; 0x40
 800fc1a:	d86f      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc1c:	2b30      	cmp	r3, #48	; 0x30
 800fc1e:	d064      	beq.n	800fcea <HAL_TIM_ConfigClockSource+0x156>
 800fc20:	2b30      	cmp	r3, #48	; 0x30
 800fc22:	d86b      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc24:	2b20      	cmp	r3, #32
 800fc26:	d060      	beq.n	800fcea <HAL_TIM_ConfigClockSource+0x156>
 800fc28:	2b20      	cmp	r3, #32
 800fc2a:	d867      	bhi.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d05c      	beq.n	800fcea <HAL_TIM_ConfigClockSource+0x156>
 800fc30:	2b10      	cmp	r3, #16
 800fc32:	d05a      	beq.n	800fcea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fc34:	e062      	b.n	800fcfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6818      	ldr	r0, [r3, #0]
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	6899      	ldr	r1, [r3, #8]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	f000 fc0b 	bl	8010460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fc58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	609a      	str	r2, [r3, #8]
      break;
 800fc62:	e04e      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	6899      	ldr	r1, [r3, #8]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	685a      	ldr	r2, [r3, #4]
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	f000 fbf4 	bl	8010460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	689a      	ldr	r2, [r3, #8]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc86:	609a      	str	r2, [r3, #8]
      break;
 800fc88:	e03b      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6818      	ldr	r0, [r3, #0]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	6859      	ldr	r1, [r3, #4]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	461a      	mov	r2, r3
 800fc98:	f000 fb68 	bl	801036c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2150      	movs	r1, #80	; 0x50
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 fbc1 	bl	801042a <TIM_ITRx_SetConfig>
      break;
 800fca8:	e02b      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6818      	ldr	r0, [r3, #0]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	6859      	ldr	r1, [r3, #4]
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f000 fb87 	bl	80103ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2160      	movs	r1, #96	; 0x60
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f000 fbb1 	bl	801042a <TIM_ITRx_SetConfig>
      break;
 800fcc8:	e01b      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	6859      	ldr	r1, [r3, #4]
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	f000 fb48 	bl	801036c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2140      	movs	r1, #64	; 0x40
 800fce2:	4618      	mov	r0, r3
 800fce4:	f000 fba1 	bl	801042a <TIM_ITRx_SetConfig>
      break;
 800fce8:	e00b      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	f000 fb98 	bl	801042a <TIM_ITRx_SetConfig>
        break;
 800fcfa:	e002      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fd00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2201      	movs	r2, #1
 800fd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	fffeff88 	.word	0xfffeff88

0800fd20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd3c:	bf00      	nop
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr

0800fd5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd64:	bf00      	nop
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a40      	ldr	r2, [pc, #256]	; (800fe84 <TIM_Base_SetConfig+0x114>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d013      	beq.n	800fdb0 <TIM_Base_SetConfig+0x40>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd8e:	d00f      	beq.n	800fdb0 <TIM_Base_SetConfig+0x40>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a3d      	ldr	r2, [pc, #244]	; (800fe88 <TIM_Base_SetConfig+0x118>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d00b      	beq.n	800fdb0 <TIM_Base_SetConfig+0x40>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4a3c      	ldr	r2, [pc, #240]	; (800fe8c <TIM_Base_SetConfig+0x11c>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d007      	beq.n	800fdb0 <TIM_Base_SetConfig+0x40>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4a3b      	ldr	r2, [pc, #236]	; (800fe90 <TIM_Base_SetConfig+0x120>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d003      	beq.n	800fdb0 <TIM_Base_SetConfig+0x40>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4a3a      	ldr	r2, [pc, #232]	; (800fe94 <TIM_Base_SetConfig+0x124>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d108      	bne.n	800fdc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4a2f      	ldr	r2, [pc, #188]	; (800fe84 <TIM_Base_SetConfig+0x114>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d02b      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdd0:	d027      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a2c      	ldr	r2, [pc, #176]	; (800fe88 <TIM_Base_SetConfig+0x118>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d023      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4a2b      	ldr	r2, [pc, #172]	; (800fe8c <TIM_Base_SetConfig+0x11c>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d01f      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4a2a      	ldr	r2, [pc, #168]	; (800fe90 <TIM_Base_SetConfig+0x120>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d01b      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a29      	ldr	r2, [pc, #164]	; (800fe94 <TIM_Base_SetConfig+0x124>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d017      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a28      	ldr	r2, [pc, #160]	; (800fe98 <TIM_Base_SetConfig+0x128>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d013      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a27      	ldr	r2, [pc, #156]	; (800fe9c <TIM_Base_SetConfig+0x12c>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d00f      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a26      	ldr	r2, [pc, #152]	; (800fea0 <TIM_Base_SetConfig+0x130>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d00b      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a25      	ldr	r2, [pc, #148]	; (800fea4 <TIM_Base_SetConfig+0x134>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d007      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a24      	ldr	r2, [pc, #144]	; (800fea8 <TIM_Base_SetConfig+0x138>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d003      	beq.n	800fe22 <TIM_Base_SetConfig+0xb2>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a23      	ldr	r2, [pc, #140]	; (800feac <TIM_Base_SetConfig+0x13c>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d108      	bne.n	800fe34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	689a      	ldr	r2, [r3, #8]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4a0a      	ldr	r2, [pc, #40]	; (800fe84 <TIM_Base_SetConfig+0x114>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d003      	beq.n	800fe68 <TIM_Base_SetConfig+0xf8>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a0c      	ldr	r2, [pc, #48]	; (800fe94 <TIM_Base_SetConfig+0x124>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d103      	bne.n	800fe70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	691a      	ldr	r2, [r3, #16]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2201      	movs	r2, #1
 800fe74:	615a      	str	r2, [r3, #20]
}
 800fe76:	bf00      	nop
 800fe78:	3714      	adds	r7, #20
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	40010000 	.word	0x40010000
 800fe88:	40000400 	.word	0x40000400
 800fe8c:	40000800 	.word	0x40000800
 800fe90:	40000c00 	.word	0x40000c00
 800fe94:	40010400 	.word	0x40010400
 800fe98:	40014000 	.word	0x40014000
 800fe9c:	40014400 	.word	0x40014400
 800fea0:	40014800 	.word	0x40014800
 800fea4:	40001800 	.word	0x40001800
 800fea8:	40001c00 	.word	0x40001c00
 800feac:	40002000 	.word	0x40002000

0800feb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b087      	sub	sp, #28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	f023 0201 	bic.w	r2, r3, #1
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	4b2b      	ldr	r3, [pc, #172]	; (800ff88 <TIM_OC1_SetConfig+0xd8>)
 800fedc:	4013      	ands	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f023 0303 	bic.w	r3, r3, #3
 800fee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	4313      	orrs	r3, r2
 800fef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	f023 0302 	bic.w	r3, r3, #2
 800fef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a21      	ldr	r2, [pc, #132]	; (800ff8c <TIM_OC1_SetConfig+0xdc>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d003      	beq.n	800ff14 <TIM_OC1_SetConfig+0x64>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a20      	ldr	r2, [pc, #128]	; (800ff90 <TIM_OC1_SetConfig+0xe0>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d10c      	bne.n	800ff2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	f023 0308 	bic.w	r3, r3, #8
 800ff1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	697a      	ldr	r2, [r7, #20]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	f023 0304 	bic.w	r3, r3, #4
 800ff2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4a16      	ldr	r2, [pc, #88]	; (800ff8c <TIM_OC1_SetConfig+0xdc>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d003      	beq.n	800ff3e <TIM_OC1_SetConfig+0x8e>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4a15      	ldr	r2, [pc, #84]	; (800ff90 <TIM_OC1_SetConfig+0xe0>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d111      	bne.n	800ff62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	695b      	ldr	r3, [r3, #20]
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	693a      	ldr	r2, [r7, #16]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	697a      	ldr	r2, [r7, #20]
 800ff7a:	621a      	str	r2, [r3, #32]
}
 800ff7c:	bf00      	nop
 800ff7e:	371c      	adds	r7, #28
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	fffeff8f 	.word	0xfffeff8f
 800ff8c:	40010000 	.word	0x40010000
 800ff90:	40010400 	.word	0x40010400

0800ff94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	f023 0210 	bic.w	r2, r3, #16
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	4b2e      	ldr	r3, [pc, #184]	; (8010078 <TIM_OC2_SetConfig+0xe4>)
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	021b      	lsls	r3, r3, #8
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	f023 0320 	bic.w	r3, r3, #32
 800ffde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	011b      	lsls	r3, r3, #4
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4a23      	ldr	r2, [pc, #140]	; (801007c <TIM_OC2_SetConfig+0xe8>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d003      	beq.n	800fffc <TIM_OC2_SetConfig+0x68>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a22      	ldr	r2, [pc, #136]	; (8010080 <TIM_OC2_SetConfig+0xec>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d10d      	bne.n	8010018 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	011b      	lsls	r3, r3, #4
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	4313      	orrs	r3, r2
 801000e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010016:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4a18      	ldr	r2, [pc, #96]	; (801007c <TIM_OC2_SetConfig+0xe8>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d003      	beq.n	8010028 <TIM_OC2_SetConfig+0x94>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4a17      	ldr	r2, [pc, #92]	; (8010080 <TIM_OC2_SetConfig+0xec>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d113      	bne.n	8010050 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801002e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	4313      	orrs	r3, r2
 8010042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	693a      	ldr	r2, [r7, #16]
 801004c:	4313      	orrs	r3, r2
 801004e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	621a      	str	r2, [r3, #32]
}
 801006a:	bf00      	nop
 801006c:	371c      	adds	r7, #28
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	feff8fff 	.word	0xfeff8fff
 801007c:	40010000 	.word	0x40010000
 8010080:	40010400 	.word	0x40010400

08010084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010084:	b480      	push	{r7}
 8010086:	b087      	sub	sp, #28
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a1b      	ldr	r3, [r3, #32]
 8010092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a1b      	ldr	r3, [r3, #32]
 801009e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	4b2d      	ldr	r3, [pc, #180]	; (8010164 <TIM_OC3_SetConfig+0xe0>)
 80100b0:	4013      	ands	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f023 0303 	bic.w	r3, r3, #3
 80100ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	021b      	lsls	r3, r3, #8
 80100d4:	697a      	ldr	r2, [r7, #20]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4a22      	ldr	r2, [pc, #136]	; (8010168 <TIM_OC3_SetConfig+0xe4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d003      	beq.n	80100ea <TIM_OC3_SetConfig+0x66>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4a21      	ldr	r2, [pc, #132]	; (801016c <TIM_OC3_SetConfig+0xe8>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d10d      	bne.n	8010106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	021b      	lsls	r3, r3, #8
 80100f8:	697a      	ldr	r2, [r7, #20]
 80100fa:	4313      	orrs	r3, r2
 80100fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a17      	ldr	r2, [pc, #92]	; (8010168 <TIM_OC3_SetConfig+0xe4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d003      	beq.n	8010116 <TIM_OC3_SetConfig+0x92>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a16      	ldr	r2, [pc, #88]	; (801016c <TIM_OC3_SetConfig+0xe8>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d113      	bne.n	801013e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801011c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	695b      	ldr	r3, [r3, #20]
 801012a:	011b      	lsls	r3, r3, #4
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	4313      	orrs	r3, r2
 8010130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	699b      	ldr	r3, [r3, #24]
 8010136:	011b      	lsls	r3, r3, #4
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	4313      	orrs	r3, r2
 801013c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	697a      	ldr	r2, [r7, #20]
 8010156:	621a      	str	r2, [r3, #32]
}
 8010158:	bf00      	nop
 801015a:	371c      	adds	r7, #28
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr
 8010164:	fffeff8f 	.word	0xfffeff8f
 8010168:	40010000 	.word	0x40010000
 801016c:	40010400 	.word	0x40010400

08010170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010170:	b480      	push	{r7}
 8010172:	b087      	sub	sp, #28
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a1b      	ldr	r3, [r3, #32]
 801018a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	69db      	ldr	r3, [r3, #28]
 8010196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <TIM_OC4_SetConfig+0xa4>)
 801019c:	4013      	ands	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	021b      	lsls	r3, r3, #8
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	4313      	orrs	r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	031b      	lsls	r3, r3, #12
 80101c2:	693a      	ldr	r2, [r7, #16]
 80101c4:	4313      	orrs	r3, r2
 80101c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a13      	ldr	r2, [pc, #76]	; (8010218 <TIM_OC4_SetConfig+0xa8>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d003      	beq.n	80101d8 <TIM_OC4_SetConfig+0x68>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a12      	ldr	r2, [pc, #72]	; (801021c <TIM_OC4_SetConfig+0xac>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d109      	bne.n	80101ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	019b      	lsls	r3, r3, #6
 80101e6:	697a      	ldr	r2, [r7, #20]
 80101e8:	4313      	orrs	r3, r2
 80101ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	621a      	str	r2, [r3, #32]
}
 8010206:	bf00      	nop
 8010208:	371c      	adds	r7, #28
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	feff8fff 	.word	0xfeff8fff
 8010218:	40010000 	.word	0x40010000
 801021c:	40010400 	.word	0x40010400

08010220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <TIM_OC5_SetConfig+0x98>)
 801024c:	4013      	ands	r3, r2
 801024e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	4313      	orrs	r3, r2
 8010258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	041b      	lsls	r3, r3, #16
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	4313      	orrs	r3, r2
 801026c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a12      	ldr	r2, [pc, #72]	; (80102bc <TIM_OC5_SetConfig+0x9c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d003      	beq.n	801027e <TIM_OC5_SetConfig+0x5e>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a11      	ldr	r2, [pc, #68]	; (80102c0 <TIM_OC5_SetConfig+0xa0>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d109      	bne.n	8010292 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010284:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	021b      	lsls	r3, r3, #8
 801028c:	697a      	ldr	r2, [r7, #20]
 801028e:	4313      	orrs	r3, r2
 8010290:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	697a      	ldr	r2, [r7, #20]
 8010296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	685a      	ldr	r2, [r3, #4]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	621a      	str	r2, [r3, #32]
}
 80102ac:	bf00      	nop
 80102ae:	371c      	adds	r7, #28
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr
 80102b8:	fffeff8f 	.word	0xfffeff8f
 80102bc:	40010000 	.word	0x40010000
 80102c0:	40010400 	.word	0x40010400

080102c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b087      	sub	sp, #28
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a1b      	ldr	r3, [r3, #32]
 80102d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6a1b      	ldr	r3, [r3, #32]
 80102de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	4b1c      	ldr	r3, [pc, #112]	; (8010360 <TIM_OC6_SetConfig+0x9c>)
 80102f0:	4013      	ands	r3, r2
 80102f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	021b      	lsls	r3, r3, #8
 80102fa:	68fa      	ldr	r2, [r7, #12]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	051b      	lsls	r3, r3, #20
 801030e:	693a      	ldr	r2, [r7, #16]
 8010310:	4313      	orrs	r3, r2
 8010312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4a13      	ldr	r2, [pc, #76]	; (8010364 <TIM_OC6_SetConfig+0xa0>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d003      	beq.n	8010324 <TIM_OC6_SetConfig+0x60>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4a12      	ldr	r2, [pc, #72]	; (8010368 <TIM_OC6_SetConfig+0xa4>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d109      	bne.n	8010338 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801032a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	695b      	ldr	r3, [r3, #20]
 8010330:	029b      	lsls	r3, r3, #10
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	4313      	orrs	r3, r2
 8010336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	685a      	ldr	r2, [r3, #4]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	621a      	str	r2, [r3, #32]
}
 8010352:	bf00      	nop
 8010354:	371c      	adds	r7, #28
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	feff8fff 	.word	0xfeff8fff
 8010364:	40010000 	.word	0x40010000
 8010368:	40010400 	.word	0x40010400

0801036c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801036c:	b480      	push	{r7}
 801036e:	b087      	sub	sp, #28
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6a1b      	ldr	r3, [r3, #32]
 801037c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6a1b      	ldr	r3, [r3, #32]
 8010382:	f023 0201 	bic.w	r2, r3, #1
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	699b      	ldr	r3, [r3, #24]
 801038e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	011b      	lsls	r3, r3, #4
 801039c:	693a      	ldr	r2, [r7, #16]
 801039e:	4313      	orrs	r3, r2
 80103a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	f023 030a 	bic.w	r3, r3, #10
 80103a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	4313      	orrs	r3, r2
 80103b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	693a      	ldr	r2, [r7, #16]
 80103b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	697a      	ldr	r2, [r7, #20]
 80103bc:	621a      	str	r2, [r3, #32]
}
 80103be:	bf00      	nop
 80103c0:	371c      	adds	r7, #28
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80103ca:	b480      	push	{r7}
 80103cc:	b087      	sub	sp, #28
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	60f8      	str	r0, [r7, #12]
 80103d2:	60b9      	str	r1, [r7, #8]
 80103d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6a1b      	ldr	r3, [r3, #32]
 80103da:	f023 0210 	bic.w	r2, r3, #16
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6a1b      	ldr	r3, [r3, #32]
 80103ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80103f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	031b      	lsls	r3, r3, #12
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	011b      	lsls	r3, r3, #4
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	4313      	orrs	r3, r2
 8010410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	697a      	ldr	r2, [r7, #20]
 8010416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	693a      	ldr	r2, [r7, #16]
 801041c:	621a      	str	r2, [r3, #32]
}
 801041e:	bf00      	nop
 8010420:	371c      	adds	r7, #28
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr

0801042a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801042a:	b480      	push	{r7}
 801042c:	b085      	sub	sp, #20
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
 8010432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010442:	683a      	ldr	r2, [r7, #0]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	4313      	orrs	r3, r2
 8010448:	f043 0307 	orr.w	r3, r3, #7
 801044c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	609a      	str	r2, [r3, #8]
}
 8010454:	bf00      	nop
 8010456:	3714      	adds	r7, #20
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010460:	b480      	push	{r7}
 8010462:	b087      	sub	sp, #28
 8010464:	af00      	add	r7, sp, #0
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	607a      	str	r2, [r7, #4]
 801046c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801047a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	021a      	lsls	r2, r3, #8
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	431a      	orrs	r2, r3
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	4313      	orrs	r3, r2
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	4313      	orrs	r3, r2
 801048c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	609a      	str	r2, [r3, #8]
}
 8010494:	bf00      	nop
 8010496:	371c      	adds	r7, #28
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d101      	bne.n	80104b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80104b4:	2302      	movs	r3, #2
 80104b6:	e06d      	b.n	8010594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2202      	movs	r2, #2
 80104c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a30      	ldr	r2, [pc, #192]	; (80105a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d004      	beq.n	80104ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a2f      	ldr	r2, [pc, #188]	; (80105a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d108      	bne.n	80104fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	68fa      	ldr	r2, [r7, #12]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	4313      	orrs	r3, r2
 801050e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4a20      	ldr	r2, [pc, #128]	; (80105a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d022      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801052a:	d01d      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a1d      	ldr	r2, [pc, #116]	; (80105a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d018      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a1c      	ldr	r2, [pc, #112]	; (80105ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d013      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a1a      	ldr	r2, [pc, #104]	; (80105b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d00e      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a15      	ldr	r2, [pc, #84]	; (80105a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d009      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a16      	ldr	r2, [pc, #88]	; (80105b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d004      	beq.n	8010568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4a15      	ldr	r2, [pc, #84]	; (80105b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d10c      	bne.n	8010582 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801056e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	4313      	orrs	r3, r2
 8010578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	68ba      	ldr	r2, [r7, #8]
 8010580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2201      	movs	r2, #1
 8010586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3714      	adds	r7, #20
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr
 80105a0:	40010000 	.word	0x40010000
 80105a4:	40010400 	.word	0x40010400
 80105a8:	40000400 	.word	0x40000400
 80105ac:	40000800 	.word	0x40000800
 80105b0:	40000c00 	.word	0x40000c00
 80105b4:	40014000 	.word	0x40014000
 80105b8:	40001800 	.word	0x40001800

080105bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80105c6:	2300      	movs	r3, #0
 80105c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d101      	bne.n	80105d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80105d4:	2302      	movs	r3, #2
 80105d6:	e065      	b.n	80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2201      	movs	r2, #1
 80105dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	4313      	orrs	r3, r2
 8010608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4313      	orrs	r3, r2
 8010616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	4313      	orrs	r3, r2
 8010624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	4313      	orrs	r3, r2
 8010632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063e:	4313      	orrs	r3, r2
 8010640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	041b      	lsls	r3, r3, #16
 801064e:	4313      	orrs	r3, r2
 8010650:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a16      	ldr	r2, [pc, #88]	; (80106b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d004      	beq.n	8010666 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a14      	ldr	r2, [pc, #80]	; (80106b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d115      	bne.n	8010692 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010670:	051b      	lsls	r3, r3, #20
 8010672:	4313      	orrs	r3, r2
 8010674:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	69db      	ldr	r3, [r3, #28]
 8010680:	4313      	orrs	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	6a1b      	ldr	r3, [r3, #32]
 801068e:	4313      	orrs	r3, r2
 8010690:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	40010000 	.word	0x40010000
 80106b4:	40010400 	.word	0x40010400

080106b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106d4:	bf00      	nop
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	e040      	b.n	8010788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7f3 f874 	bl	8003804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2224      	movs	r2, #36	; 0x24
 8010720:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f022 0201 	bic.w	r2, r2, #1
 8010730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f8c0 	bl	80108b8 <UART_SetConfig>
 8010738:	4603      	mov	r3, r0
 801073a:	2b01      	cmp	r3, #1
 801073c:	d101      	bne.n	8010742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	e022      	b.n	8010788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fb16 	bl	8010d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801075e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	689a      	ldr	r2, [r3, #8]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801076e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f042 0201 	orr.w	r2, r2, #1
 801077e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 fb9d 	bl	8010ec0 <UART_CheckIdleState>
 8010786:	4603      	mov	r3, r0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b08a      	sub	sp, #40	; 0x28
 8010794:	af02      	add	r7, sp, #8
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	603b      	str	r3, [r7, #0]
 801079c:	4613      	mov	r3, r2
 801079e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107a4:	2b20      	cmp	r3, #32
 80107a6:	f040 8081 	bne.w	80108ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d002      	beq.n	80107b6 <HAL_UART_Transmit+0x26>
 80107b0:	88fb      	ldrh	r3, [r7, #6]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80107b6:	2301      	movs	r3, #1
 80107b8:	e079      	b.n	80108ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d101      	bne.n	80107c8 <HAL_UART_Transmit+0x38>
 80107c4:	2302      	movs	r3, #2
 80107c6:	e072      	b.n	80108ae <HAL_UART_Transmit+0x11e>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2221      	movs	r2, #33	; 0x21
 80107dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80107de:	f7f5 fc1b 	bl	8006018 <HAL_GetTick>
 80107e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	88fa      	ldrh	r2, [r7, #6]
 80107e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	88fa      	ldrh	r2, [r7, #6]
 80107f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107fc:	d108      	bne.n	8010810 <HAL_UART_Transmit+0x80>
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d104      	bne.n	8010810 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8010806:	2300      	movs	r3, #0
 8010808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	61bb      	str	r3, [r7, #24]
 801080e:	e003      	b.n	8010818 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010814:	2300      	movs	r3, #0
 8010816:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8010820:	e02c      	b.n	801087c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	9300      	str	r3, [sp, #0]
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	2200      	movs	r2, #0
 801082a:	2180      	movs	r1, #128	; 0x80
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f000 fb7a 	bl	8010f26 <UART_WaitOnFlagUntilTimeout>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8010838:	2303      	movs	r3, #3
 801083a:	e038      	b.n	80108ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d10b      	bne.n	801085a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010850:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	3302      	adds	r3, #2
 8010856:	61bb      	str	r3, [r7, #24]
 8010858:	e007      	b.n	801086a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	781a      	ldrb	r2, [r3, #0]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	3301      	adds	r3, #1
 8010868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010870:	b29b      	uxth	r3, r3
 8010872:	3b01      	subs	r3, #1
 8010874:	b29a      	uxth	r2, r3
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010882:	b29b      	uxth	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1cc      	bne.n	8010822 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	2200      	movs	r2, #0
 8010890:	2140      	movs	r1, #64	; 0x40
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f000 fb47 	bl	8010f26 <UART_WaitOnFlagUntilTimeout>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801089e:	2303      	movs	r3, #3
 80108a0:	e005      	b.n	80108ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2220      	movs	r2, #32
 80108a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	e000      	b.n	80108ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80108ac:	2302      	movs	r3, #2
  }
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b088      	sub	sp, #32
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	689a      	ldr	r2, [r3, #8]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	431a      	orrs	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	431a      	orrs	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	69db      	ldr	r3, [r3, #28]
 80108d8:	4313      	orrs	r3, r2
 80108da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4ba7      	ldr	r3, [pc, #668]	; (8010b80 <UART_SetConfig+0x2c8>)
 80108e4:	4013      	ands	r3, r2
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	6812      	ldr	r2, [r2, #0]
 80108ea:	6979      	ldr	r1, [r7, #20]
 80108ec:	430b      	orrs	r3, r1
 80108ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	68da      	ldr	r2, [r3, #12]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a1b      	ldr	r3, [r3, #32]
 8010910:	697a      	ldr	r2, [r7, #20]
 8010912:	4313      	orrs	r3, r2
 8010914:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	430a      	orrs	r2, r1
 8010928:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a95      	ldr	r2, [pc, #596]	; (8010b84 <UART_SetConfig+0x2cc>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d120      	bne.n	8010976 <UART_SetConfig+0xbe>
 8010934:	4b94      	ldr	r3, [pc, #592]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801093a:	f003 0303 	and.w	r3, r3, #3
 801093e:	2b03      	cmp	r3, #3
 8010940:	d816      	bhi.n	8010970 <UART_SetConfig+0xb8>
 8010942:	a201      	add	r2, pc, #4	; (adr r2, 8010948 <UART_SetConfig+0x90>)
 8010944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010948:	08010959 	.word	0x08010959
 801094c:	08010965 	.word	0x08010965
 8010950:	0801095f 	.word	0x0801095f
 8010954:	0801096b 	.word	0x0801096b
 8010958:	2301      	movs	r3, #1
 801095a:	77fb      	strb	r3, [r7, #31]
 801095c:	e14f      	b.n	8010bfe <UART_SetConfig+0x346>
 801095e:	2302      	movs	r3, #2
 8010960:	77fb      	strb	r3, [r7, #31]
 8010962:	e14c      	b.n	8010bfe <UART_SetConfig+0x346>
 8010964:	2304      	movs	r3, #4
 8010966:	77fb      	strb	r3, [r7, #31]
 8010968:	e149      	b.n	8010bfe <UART_SetConfig+0x346>
 801096a:	2308      	movs	r3, #8
 801096c:	77fb      	strb	r3, [r7, #31]
 801096e:	e146      	b.n	8010bfe <UART_SetConfig+0x346>
 8010970:	2310      	movs	r3, #16
 8010972:	77fb      	strb	r3, [r7, #31]
 8010974:	e143      	b.n	8010bfe <UART_SetConfig+0x346>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a84      	ldr	r2, [pc, #528]	; (8010b8c <UART_SetConfig+0x2d4>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d132      	bne.n	80109e6 <UART_SetConfig+0x12e>
 8010980:	4b81      	ldr	r3, [pc, #516]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010986:	f003 030c 	and.w	r3, r3, #12
 801098a:	2b0c      	cmp	r3, #12
 801098c:	d828      	bhi.n	80109e0 <UART_SetConfig+0x128>
 801098e:	a201      	add	r2, pc, #4	; (adr r2, 8010994 <UART_SetConfig+0xdc>)
 8010990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010994:	080109c9 	.word	0x080109c9
 8010998:	080109e1 	.word	0x080109e1
 801099c:	080109e1 	.word	0x080109e1
 80109a0:	080109e1 	.word	0x080109e1
 80109a4:	080109d5 	.word	0x080109d5
 80109a8:	080109e1 	.word	0x080109e1
 80109ac:	080109e1 	.word	0x080109e1
 80109b0:	080109e1 	.word	0x080109e1
 80109b4:	080109cf 	.word	0x080109cf
 80109b8:	080109e1 	.word	0x080109e1
 80109bc:	080109e1 	.word	0x080109e1
 80109c0:	080109e1 	.word	0x080109e1
 80109c4:	080109db 	.word	0x080109db
 80109c8:	2300      	movs	r3, #0
 80109ca:	77fb      	strb	r3, [r7, #31]
 80109cc:	e117      	b.n	8010bfe <UART_SetConfig+0x346>
 80109ce:	2302      	movs	r3, #2
 80109d0:	77fb      	strb	r3, [r7, #31]
 80109d2:	e114      	b.n	8010bfe <UART_SetConfig+0x346>
 80109d4:	2304      	movs	r3, #4
 80109d6:	77fb      	strb	r3, [r7, #31]
 80109d8:	e111      	b.n	8010bfe <UART_SetConfig+0x346>
 80109da:	2308      	movs	r3, #8
 80109dc:	77fb      	strb	r3, [r7, #31]
 80109de:	e10e      	b.n	8010bfe <UART_SetConfig+0x346>
 80109e0:	2310      	movs	r3, #16
 80109e2:	77fb      	strb	r3, [r7, #31]
 80109e4:	e10b      	b.n	8010bfe <UART_SetConfig+0x346>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a69      	ldr	r2, [pc, #420]	; (8010b90 <UART_SetConfig+0x2d8>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d120      	bne.n	8010a32 <UART_SetConfig+0x17a>
 80109f0:	4b65      	ldr	r3, [pc, #404]	; (8010b88 <UART_SetConfig+0x2d0>)
 80109f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80109fa:	2b30      	cmp	r3, #48	; 0x30
 80109fc:	d013      	beq.n	8010a26 <UART_SetConfig+0x16e>
 80109fe:	2b30      	cmp	r3, #48	; 0x30
 8010a00:	d814      	bhi.n	8010a2c <UART_SetConfig+0x174>
 8010a02:	2b20      	cmp	r3, #32
 8010a04:	d009      	beq.n	8010a1a <UART_SetConfig+0x162>
 8010a06:	2b20      	cmp	r3, #32
 8010a08:	d810      	bhi.n	8010a2c <UART_SetConfig+0x174>
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d002      	beq.n	8010a14 <UART_SetConfig+0x15c>
 8010a0e:	2b10      	cmp	r3, #16
 8010a10:	d006      	beq.n	8010a20 <UART_SetConfig+0x168>
 8010a12:	e00b      	b.n	8010a2c <UART_SetConfig+0x174>
 8010a14:	2300      	movs	r3, #0
 8010a16:	77fb      	strb	r3, [r7, #31]
 8010a18:	e0f1      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	77fb      	strb	r3, [r7, #31]
 8010a1e:	e0ee      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a20:	2304      	movs	r3, #4
 8010a22:	77fb      	strb	r3, [r7, #31]
 8010a24:	e0eb      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a26:	2308      	movs	r3, #8
 8010a28:	77fb      	strb	r3, [r7, #31]
 8010a2a:	e0e8      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	77fb      	strb	r3, [r7, #31]
 8010a30:	e0e5      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a57      	ldr	r2, [pc, #348]	; (8010b94 <UART_SetConfig+0x2dc>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d120      	bne.n	8010a7e <UART_SetConfig+0x1c6>
 8010a3c:	4b52      	ldr	r3, [pc, #328]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010a46:	2bc0      	cmp	r3, #192	; 0xc0
 8010a48:	d013      	beq.n	8010a72 <UART_SetConfig+0x1ba>
 8010a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8010a4c:	d814      	bhi.n	8010a78 <UART_SetConfig+0x1c0>
 8010a4e:	2b80      	cmp	r3, #128	; 0x80
 8010a50:	d009      	beq.n	8010a66 <UART_SetConfig+0x1ae>
 8010a52:	2b80      	cmp	r3, #128	; 0x80
 8010a54:	d810      	bhi.n	8010a78 <UART_SetConfig+0x1c0>
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <UART_SetConfig+0x1a8>
 8010a5a:	2b40      	cmp	r3, #64	; 0x40
 8010a5c:	d006      	beq.n	8010a6c <UART_SetConfig+0x1b4>
 8010a5e:	e00b      	b.n	8010a78 <UART_SetConfig+0x1c0>
 8010a60:	2300      	movs	r3, #0
 8010a62:	77fb      	strb	r3, [r7, #31]
 8010a64:	e0cb      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a66:	2302      	movs	r3, #2
 8010a68:	77fb      	strb	r3, [r7, #31]
 8010a6a:	e0c8      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a6c:	2304      	movs	r3, #4
 8010a6e:	77fb      	strb	r3, [r7, #31]
 8010a70:	e0c5      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a72:	2308      	movs	r3, #8
 8010a74:	77fb      	strb	r3, [r7, #31]
 8010a76:	e0c2      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a78:	2310      	movs	r3, #16
 8010a7a:	77fb      	strb	r3, [r7, #31]
 8010a7c:	e0bf      	b.n	8010bfe <UART_SetConfig+0x346>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a45      	ldr	r2, [pc, #276]	; (8010b98 <UART_SetConfig+0x2e0>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d125      	bne.n	8010ad4 <UART_SetConfig+0x21c>
 8010a88:	4b3f      	ldr	r3, [pc, #252]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a96:	d017      	beq.n	8010ac8 <UART_SetConfig+0x210>
 8010a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a9c:	d817      	bhi.n	8010ace <UART_SetConfig+0x216>
 8010a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aa2:	d00b      	beq.n	8010abc <UART_SetConfig+0x204>
 8010aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aa8:	d811      	bhi.n	8010ace <UART_SetConfig+0x216>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d003      	beq.n	8010ab6 <UART_SetConfig+0x1fe>
 8010aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ab2:	d006      	beq.n	8010ac2 <UART_SetConfig+0x20a>
 8010ab4:	e00b      	b.n	8010ace <UART_SetConfig+0x216>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	77fb      	strb	r3, [r7, #31]
 8010aba:	e0a0      	b.n	8010bfe <UART_SetConfig+0x346>
 8010abc:	2302      	movs	r3, #2
 8010abe:	77fb      	strb	r3, [r7, #31]
 8010ac0:	e09d      	b.n	8010bfe <UART_SetConfig+0x346>
 8010ac2:	2304      	movs	r3, #4
 8010ac4:	77fb      	strb	r3, [r7, #31]
 8010ac6:	e09a      	b.n	8010bfe <UART_SetConfig+0x346>
 8010ac8:	2308      	movs	r3, #8
 8010aca:	77fb      	strb	r3, [r7, #31]
 8010acc:	e097      	b.n	8010bfe <UART_SetConfig+0x346>
 8010ace:	2310      	movs	r3, #16
 8010ad0:	77fb      	strb	r3, [r7, #31]
 8010ad2:	e094      	b.n	8010bfe <UART_SetConfig+0x346>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a30      	ldr	r2, [pc, #192]	; (8010b9c <UART_SetConfig+0x2e4>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d125      	bne.n	8010b2a <UART_SetConfig+0x272>
 8010ade:	4b2a      	ldr	r3, [pc, #168]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010ae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010aec:	d017      	beq.n	8010b1e <UART_SetConfig+0x266>
 8010aee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010af2:	d817      	bhi.n	8010b24 <UART_SetConfig+0x26c>
 8010af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010af8:	d00b      	beq.n	8010b12 <UART_SetConfig+0x25a>
 8010afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010afe:	d811      	bhi.n	8010b24 <UART_SetConfig+0x26c>
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d003      	beq.n	8010b0c <UART_SetConfig+0x254>
 8010b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b08:	d006      	beq.n	8010b18 <UART_SetConfig+0x260>
 8010b0a:	e00b      	b.n	8010b24 <UART_SetConfig+0x26c>
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	77fb      	strb	r3, [r7, #31]
 8010b10:	e075      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b12:	2302      	movs	r3, #2
 8010b14:	77fb      	strb	r3, [r7, #31]
 8010b16:	e072      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b18:	2304      	movs	r3, #4
 8010b1a:	77fb      	strb	r3, [r7, #31]
 8010b1c:	e06f      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b1e:	2308      	movs	r3, #8
 8010b20:	77fb      	strb	r3, [r7, #31]
 8010b22:	e06c      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b24:	2310      	movs	r3, #16
 8010b26:	77fb      	strb	r3, [r7, #31]
 8010b28:	e069      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a1c      	ldr	r2, [pc, #112]	; (8010ba0 <UART_SetConfig+0x2e8>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d137      	bne.n	8010ba4 <UART_SetConfig+0x2ec>
 8010b34:	4b14      	ldr	r3, [pc, #80]	; (8010b88 <UART_SetConfig+0x2d0>)
 8010b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b42:	d017      	beq.n	8010b74 <UART_SetConfig+0x2bc>
 8010b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b48:	d817      	bhi.n	8010b7a <UART_SetConfig+0x2c2>
 8010b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b4e:	d00b      	beq.n	8010b68 <UART_SetConfig+0x2b0>
 8010b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b54:	d811      	bhi.n	8010b7a <UART_SetConfig+0x2c2>
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d003      	beq.n	8010b62 <UART_SetConfig+0x2aa>
 8010b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b5e:	d006      	beq.n	8010b6e <UART_SetConfig+0x2b6>
 8010b60:	e00b      	b.n	8010b7a <UART_SetConfig+0x2c2>
 8010b62:	2300      	movs	r3, #0
 8010b64:	77fb      	strb	r3, [r7, #31]
 8010b66:	e04a      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b68:	2302      	movs	r3, #2
 8010b6a:	77fb      	strb	r3, [r7, #31]
 8010b6c:	e047      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b6e:	2304      	movs	r3, #4
 8010b70:	77fb      	strb	r3, [r7, #31]
 8010b72:	e044      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b74:	2308      	movs	r3, #8
 8010b76:	77fb      	strb	r3, [r7, #31]
 8010b78:	e041      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b7a:	2310      	movs	r3, #16
 8010b7c:	77fb      	strb	r3, [r7, #31]
 8010b7e:	e03e      	b.n	8010bfe <UART_SetConfig+0x346>
 8010b80:	efff69f3 	.word	0xefff69f3
 8010b84:	40011000 	.word	0x40011000
 8010b88:	40023800 	.word	0x40023800
 8010b8c:	40004400 	.word	0x40004400
 8010b90:	40004800 	.word	0x40004800
 8010b94:	40004c00 	.word	0x40004c00
 8010b98:	40005000 	.word	0x40005000
 8010b9c:	40011400 	.word	0x40011400
 8010ba0:	40007800 	.word	0x40007800
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a71      	ldr	r2, [pc, #452]	; (8010d70 <UART_SetConfig+0x4b8>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d125      	bne.n	8010bfa <UART_SetConfig+0x342>
 8010bae:	4b71      	ldr	r3, [pc, #452]	; (8010d74 <UART_SetConfig+0x4bc>)
 8010bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010bb8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010bbc:	d017      	beq.n	8010bee <UART_SetConfig+0x336>
 8010bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010bc2:	d817      	bhi.n	8010bf4 <UART_SetConfig+0x33c>
 8010bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bc8:	d00b      	beq.n	8010be2 <UART_SetConfig+0x32a>
 8010bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bce:	d811      	bhi.n	8010bf4 <UART_SetConfig+0x33c>
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <UART_SetConfig+0x324>
 8010bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010bd8:	d006      	beq.n	8010be8 <UART_SetConfig+0x330>
 8010bda:	e00b      	b.n	8010bf4 <UART_SetConfig+0x33c>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	77fb      	strb	r3, [r7, #31]
 8010be0:	e00d      	b.n	8010bfe <UART_SetConfig+0x346>
 8010be2:	2302      	movs	r3, #2
 8010be4:	77fb      	strb	r3, [r7, #31]
 8010be6:	e00a      	b.n	8010bfe <UART_SetConfig+0x346>
 8010be8:	2304      	movs	r3, #4
 8010bea:	77fb      	strb	r3, [r7, #31]
 8010bec:	e007      	b.n	8010bfe <UART_SetConfig+0x346>
 8010bee:	2308      	movs	r3, #8
 8010bf0:	77fb      	strb	r3, [r7, #31]
 8010bf2:	e004      	b.n	8010bfe <UART_SetConfig+0x346>
 8010bf4:	2310      	movs	r3, #16
 8010bf6:	77fb      	strb	r3, [r7, #31]
 8010bf8:	e001      	b.n	8010bfe <UART_SetConfig+0x346>
 8010bfa:	2310      	movs	r3, #16
 8010bfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c06:	d15b      	bne.n	8010cc0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8010c08:	7ffb      	ldrb	r3, [r7, #31]
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d827      	bhi.n	8010c5e <UART_SetConfig+0x3a6>
 8010c0e:	a201      	add	r2, pc, #4	; (adr r2, 8010c14 <UART_SetConfig+0x35c>)
 8010c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c14:	08010c39 	.word	0x08010c39
 8010c18:	08010c41 	.word	0x08010c41
 8010c1c:	08010c49 	.word	0x08010c49
 8010c20:	08010c5f 	.word	0x08010c5f
 8010c24:	08010c4f 	.word	0x08010c4f
 8010c28:	08010c5f 	.word	0x08010c5f
 8010c2c:	08010c5f 	.word	0x08010c5f
 8010c30:	08010c5f 	.word	0x08010c5f
 8010c34:	08010c57 	.word	0x08010c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c38:	f7fb fd9e 	bl	800c778 <HAL_RCC_GetPCLK1Freq>
 8010c3c:	61b8      	str	r0, [r7, #24]
        break;
 8010c3e:	e013      	b.n	8010c68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c40:	f7fb fdae 	bl	800c7a0 <HAL_RCC_GetPCLK2Freq>
 8010c44:	61b8      	str	r0, [r7, #24]
        break;
 8010c46:	e00f      	b.n	8010c68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c48:	4b4b      	ldr	r3, [pc, #300]	; (8010d78 <UART_SetConfig+0x4c0>)
 8010c4a:	61bb      	str	r3, [r7, #24]
        break;
 8010c4c:	e00c      	b.n	8010c68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c4e:	f7fb fcd1 	bl	800c5f4 <HAL_RCC_GetSysClockFreq>
 8010c52:	61b8      	str	r0, [r7, #24]
        break;
 8010c54:	e008      	b.n	8010c68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c5a:	61bb      	str	r3, [r7, #24]
        break;
 8010c5c:	e004      	b.n	8010c68 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010c62:	2301      	movs	r3, #1
 8010c64:	77bb      	strb	r3, [r7, #30]
        break;
 8010c66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d074      	beq.n	8010d58 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	005a      	lsls	r2, r3, #1
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	085b      	lsrs	r3, r3, #1
 8010c78:	441a      	add	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2b0f      	cmp	r3, #15
 8010c8a:	d916      	bls.n	8010cba <UART_SetConfig+0x402>
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c92:	d212      	bcs.n	8010cba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	f023 030f 	bic.w	r3, r3, #15
 8010c9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	085b      	lsrs	r3, r3, #1
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	f003 0307 	and.w	r3, r3, #7
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	89fb      	ldrh	r3, [r7, #14]
 8010cac:	4313      	orrs	r3, r2
 8010cae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	89fa      	ldrh	r2, [r7, #14]
 8010cb6:	60da      	str	r2, [r3, #12]
 8010cb8:	e04e      	b.n	8010d58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	77bb      	strb	r3, [r7, #30]
 8010cbe:	e04b      	b.n	8010d58 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010cc0:	7ffb      	ldrb	r3, [r7, #31]
 8010cc2:	2b08      	cmp	r3, #8
 8010cc4:	d827      	bhi.n	8010d16 <UART_SetConfig+0x45e>
 8010cc6:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <UART_SetConfig+0x414>)
 8010cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ccc:	08010cf1 	.word	0x08010cf1
 8010cd0:	08010cf9 	.word	0x08010cf9
 8010cd4:	08010d01 	.word	0x08010d01
 8010cd8:	08010d17 	.word	0x08010d17
 8010cdc:	08010d07 	.word	0x08010d07
 8010ce0:	08010d17 	.word	0x08010d17
 8010ce4:	08010d17 	.word	0x08010d17
 8010ce8:	08010d17 	.word	0x08010d17
 8010cec:	08010d0f 	.word	0x08010d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cf0:	f7fb fd42 	bl	800c778 <HAL_RCC_GetPCLK1Freq>
 8010cf4:	61b8      	str	r0, [r7, #24]
        break;
 8010cf6:	e013      	b.n	8010d20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010cf8:	f7fb fd52 	bl	800c7a0 <HAL_RCC_GetPCLK2Freq>
 8010cfc:	61b8      	str	r0, [r7, #24]
        break;
 8010cfe:	e00f      	b.n	8010d20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d00:	4b1d      	ldr	r3, [pc, #116]	; (8010d78 <UART_SetConfig+0x4c0>)
 8010d02:	61bb      	str	r3, [r7, #24]
        break;
 8010d04:	e00c      	b.n	8010d20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d06:	f7fb fc75 	bl	800c5f4 <HAL_RCC_GetSysClockFreq>
 8010d0a:	61b8      	str	r0, [r7, #24]
        break;
 8010d0c:	e008      	b.n	8010d20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d12:	61bb      	str	r3, [r7, #24]
        break;
 8010d14:	e004      	b.n	8010d20 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8010d16:	2300      	movs	r3, #0
 8010d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8010d1e:	bf00      	nop
    }

    if (pclk != 0U)
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d018      	beq.n	8010d58 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	085a      	lsrs	r2, r3, #1
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	441a      	add	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	2b0f      	cmp	r3, #15
 8010d40:	d908      	bls.n	8010d54 <UART_SetConfig+0x49c>
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d48:	d204      	bcs.n	8010d54 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	693a      	ldr	r2, [r7, #16]
 8010d50:	60da      	str	r2, [r3, #12]
 8010d52:	e001      	b.n	8010d58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010d54:	2301      	movs	r3, #1
 8010d56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010d64:	7fbb      	ldrb	r3, [r7, #30]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	40007c00 	.word	0x40007c00
 8010d74:	40023800 	.word	0x40023800
 8010d78:	00f42400 	.word	0x00f42400

08010d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d88:	f003 0301 	and.w	r3, r3, #1
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00a      	beq.n	8010da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	430a      	orrs	r2, r1
 8010da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010daa:	f003 0302 	and.w	r3, r3, #2
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00a      	beq.n	8010dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	430a      	orrs	r2, r1
 8010dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	f003 0304 	and.w	r3, r3, #4
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00a      	beq.n	8010dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	430a      	orrs	r2, r1
 8010de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dee:	f003 0308 	and.w	r3, r3, #8
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00a      	beq.n	8010e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	430a      	orrs	r2, r1
 8010e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e10:	f003 0310 	and.w	r3, r3, #16
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00a      	beq.n	8010e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	430a      	orrs	r2, r1
 8010e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e32:	f003 0320 	and.w	r3, r3, #32
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00a      	beq.n	8010e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	689b      	ldr	r3, [r3, #8]
 8010e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	430a      	orrs	r2, r1
 8010e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d01a      	beq.n	8010e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	430a      	orrs	r2, r1
 8010e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e7a:	d10a      	bne.n	8010e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00a      	beq.n	8010eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	430a      	orrs	r2, r1
 8010eb2:	605a      	str	r2, [r3, #4]
  }
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af02      	add	r7, sp, #8
 8010ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ed0:	f7f5 f8a2 	bl	8006018 <HAL_GetTick>
 8010ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f003 0308 	and.w	r3, r3, #8
 8010ee0:	2b08      	cmp	r3, #8
 8010ee2:	d10e      	bne.n	8010f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ee8:	9300      	str	r3, [sp, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 f817 	bl	8010f26 <UART_WaitOnFlagUntilTimeout>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010efe:	2303      	movs	r3, #3
 8010f00:	e00d      	b.n	8010f1e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2220      	movs	r2, #32
 8010f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2220      	movs	r2, #32
 8010f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3710      	adds	r7, #16
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b084      	sub	sp, #16
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	60f8      	str	r0, [r7, #12]
 8010f2e:	60b9      	str	r1, [r7, #8]
 8010f30:	603b      	str	r3, [r7, #0]
 8010f32:	4613      	mov	r3, r2
 8010f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f36:	e05e      	b.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f3e:	d05a      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f40:	f7f5 f86a 	bl	8006018 <HAL_GetTick>
 8010f44:	4602      	mov	r2, r0
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	69ba      	ldr	r2, [r7, #24]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d302      	bcc.n	8010f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d11b      	bne.n	8010f8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010f64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	689a      	ldr	r2, [r3, #8]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f022 0201 	bic.w	r2, r2, #1
 8010f74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2220      	movs	r2, #32
 8010f7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2220      	movs	r2, #32
 8010f80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010f8a:	2303      	movs	r3, #3
 8010f8c:	e043      	b.n	8011016 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f003 0304 	and.w	r3, r3, #4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d02c      	beq.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	69db      	ldr	r3, [r3, #28]
 8010fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010faa:	d124      	bne.n	8010ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010fb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010fc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	689a      	ldr	r2, [r3, #8]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f022 0201 	bic.w	r2, r2, #1
 8010fd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2220      	movs	r2, #32
 8010fda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2220      	movs	r2, #32
 8010fe0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2220      	movs	r2, #32
 8010fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e00f      	b.n	8011016 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	69da      	ldr	r2, [r3, #28]
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	4013      	ands	r3, r2
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	429a      	cmp	r2, r3
 8011004:	bf0c      	ite	eq
 8011006:	2301      	moveq	r3, #1
 8011008:	2300      	movne	r3, #0
 801100a:	b2db      	uxtb	r3, r3
 801100c:	461a      	mov	r2, r3
 801100e:	79fb      	ldrb	r3, [r7, #7]
 8011010:	429a      	cmp	r2, r3
 8011012:	d091      	beq.n	8010f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
	...

08011020 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 801102e:	2300      	movs	r3, #0
 8011030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d027      	beq.n	801108a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	4b2f      	ldr	r3, [pc, #188]	; (8011100 <FMC_SDRAM_Init+0xe0>)
 8011044:	4013      	ands	r3, r2
 8011046:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011050:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011056:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 801105c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011062:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011068:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 801106e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011074:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801107a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801107c:	68fa      	ldr	r2, [r7, #12]
 801107e:	4313      	orrs	r3, r2
 8011080:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	68fa      	ldr	r2, [r7, #12]
 8011086:	601a      	str	r2, [r3, #0]
 8011088:	e032      	b.n	80110f0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011096:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80110a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80110a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	4b12      	ldr	r3, [pc, #72]	; (8011100 <FMC_SDRAM_Init+0xe0>)
 80110b8:	4013      	ands	r3, r2
 80110ba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110c4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80110ca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80110d0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80110d6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80110dc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110de:	68ba      	ldr	r2, [r7, #8]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80110f0:	2300      	movs	r3, #0
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3714      	adds	r7, #20
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	ffff8000 	.word	0xffff8000

08011104 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011104:	b480      	push	{r7}
 8011106:	b087      	sub	sp, #28
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8011114:	2300      	movs	r3, #0
 8011116:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d02e      	beq.n	801117c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801112a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	3b01      	subs	r3, #1
 8011138:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801113a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	689b      	ldr	r3, [r3, #8]
 8011140:	3b01      	subs	r3, #1
 8011142:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011144:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	3b01      	subs	r3, #1
 801114c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801114e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	3b01      	subs	r3, #1
 8011156:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011158:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	3b01      	subs	r3, #1
 8011160:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011162:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	3b01      	subs	r3, #1
 801116a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801116c:	4313      	orrs	r3, r2
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	4313      	orrs	r3, r2
 8011172:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	609a      	str	r2, [r3, #8]
 801117a:	e039      	b.n	80111f0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011182:	697a      	ldr	r2, [r7, #20]
 8011184:	4b1e      	ldr	r3, [pc, #120]	; (8011200 <FMC_SDRAM_Timing_Init+0xfc>)
 8011186:	4013      	ands	r3, r2
 8011188:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	3b01      	subs	r3, #1
 8011190:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	695b      	ldr	r3, [r3, #20]
 8011196:	3b01      	subs	r3, #1
 8011198:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801119a:	4313      	orrs	r3, r2
 801119c:	697a      	ldr	r2, [r7, #20]
 801119e:	4313      	orrs	r3, r2
 80111a0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111ae:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	3b01      	subs	r3, #1
 80111bc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80111c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80111d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	699b      	ldr	r3, [r3, #24]
 80111d8:	3b01      	subs	r3, #1
 80111da:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111dc:	4313      	orrs	r3, r2
 80111de:	693a      	ldr	r2, [r7, #16]
 80111e0:	4313      	orrs	r3, r2
 80111e2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	371c      	adds	r7, #28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	ff0f0fff 	.word	0xff0f0fff

08011204 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	691a      	ldr	r2, [r3, #16]
 8011214:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <FMC_SDRAM_SendCommand+0x44>)
 8011216:	4013      	ands	r3, r2
 8011218:	68ba      	ldr	r2, [r7, #8]
 801121a:	6811      	ldr	r1, [r2, #0]
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	6852      	ldr	r2, [r2, #4]
 8011220:	4311      	orrs	r1, r2
 8011222:	68ba      	ldr	r2, [r7, #8]
 8011224:	6892      	ldr	r2, [r2, #8]
 8011226:	3a01      	subs	r2, #1
 8011228:	0152      	lsls	r2, r2, #5
 801122a:	4311      	orrs	r1, r2
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	68d2      	ldr	r2, [r2, #12]
 8011230:	0252      	lsls	r2, r2, #9
 8011232:	430a      	orrs	r2, r1
 8011234:	431a      	orrs	r2, r3
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr
 8011248:	ffc00000 	.word	0xffc00000

0801124c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	695a      	ldr	r2, [r3, #20]
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	431a      	orrs	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	370c      	adds	r7, #12
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr
	...

08011274 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011274:	b084      	sub	sp, #16
 8011276:	b480      	push	{r7}
 8011278:	b085      	sub	sp, #20
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	f107 001c 	add.w	r0, r7, #28
 8011282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801128a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801128c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801128e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011292:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011296:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801129a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801129e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80112a0:	68fa      	ldr	r2, [r7, #12]
 80112a2:	4313      	orrs	r3, r2
 80112a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685a      	ldr	r2, [r3, #4]
 80112aa:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <SDMMC_Init+0x54>)
 80112ac:	4013      	ands	r3, r2
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	431a      	orrs	r2, r3
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	b004      	add	sp, #16
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	ffff8100 	.word	0xffff8100

080112cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80112da:	4618      	mov	r0, r3
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr

080112e6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b082      	sub	sp, #8
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2203      	movs	r2, #3
 80112f2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80112f4:	2002      	movs	r0, #2
 80112f6:	f7f4 fe9b 	bl	8006030 <HAL_Delay>
  
  return HAL_OK;
 80112fa:	2300      	movs	r3, #0
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f003 0303 	and.w	r3, r3, #3
}
 8011314:	4618      	mov	r0, r3
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801133e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011344:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801134a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801134c:	68fa      	ldr	r2, [r7, #12]
 801134e:	4313      	orrs	r3, r2
 8011350:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	68da      	ldr	r2, [r3, #12]
 8011356:	4b06      	ldr	r3, [pc, #24]	; (8011370 <SDMMC_SendCommand+0x50>)
 8011358:	4013      	ands	r3, r2
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	431a      	orrs	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3714      	adds	r7, #20
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	fffff000 	.word	0xfffff000

08011374 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	b2db      	uxtb	r3, r3
}
 8011382:	4618      	mov	r0, r3
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801138e:	b480      	push	{r7}
 8011390:	b085      	sub	sp, #20
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
 8011396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	3314      	adds	r3, #20
 801139c:	461a      	mov	r2, r3
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	4413      	add	r3, r2
 80113a2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
}  
 80113a8:	4618      	mov	r0, r3
 80113aa:	3714      	adds	r7, #20
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr

080113b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	685a      	ldr	r2, [r3, #4]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113da:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80113e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80113e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	4313      	orrs	r3, r2
 80113ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	431a      	orrs	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80113fe:	2300      	movs	r3, #0

}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b088      	sub	sp, #32
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801141a:	2310      	movs	r3, #16
 801141c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801141e:	2340      	movs	r3, #64	; 0x40
 8011420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011422:	2300      	movs	r3, #0
 8011424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801142a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801142c:	f107 0308 	add.w	r3, r7, #8
 8011430:	4619      	mov	r1, r3
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff ff74 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011438:	f241 3288 	movw	r2, #5000	; 0x1388
 801143c:	2110      	movs	r1, #16
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 fa46 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011446:	69fb      	ldr	r3, [r7, #28]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3720      	adds	r7, #32
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b088      	sub	sp, #32
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801145e:	2311      	movs	r3, #17
 8011460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011462:	2340      	movs	r3, #64	; 0x40
 8011464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011466:	2300      	movs	r3, #0
 8011468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801146a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801146e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011470:	f107 0308 	add.w	r3, r7, #8
 8011474:	4619      	mov	r1, r3
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7ff ff52 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011480:	2111      	movs	r1, #17
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 fa24 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801148a:	69fb      	ldr	r3, [r7, #28]
}
 801148c:	4618      	mov	r0, r3
 801148e:	3720      	adds	r7, #32
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80114a2:	2312      	movs	r3, #18
 80114a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114a6:	2340      	movs	r3, #64	; 0x40
 80114a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114aa:	2300      	movs	r3, #0
 80114ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114b4:	f107 0308 	add.w	r3, r7, #8
 80114b8:	4619      	mov	r1, r3
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f7ff ff30 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80114c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80114c4:	2112      	movs	r1, #18
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 fa02 	bl	80118d0 <SDMMC_GetCmdResp1>
 80114cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ce:	69fb      	ldr	r3, [r7, #28]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3720      	adds	r7, #32
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80114e6:	2318      	movs	r3, #24
 80114e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114ea:	2340      	movs	r3, #64	; 0x40
 80114ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114ee:	2300      	movs	r3, #0
 80114f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114f8:	f107 0308 	add.w	r3, r7, #8
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7ff ff0e 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011504:	f241 3288 	movw	r2, #5000	; 0x1388
 8011508:	2118      	movs	r1, #24
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f000 f9e0 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011512:	69fb      	ldr	r3, [r7, #28]
}
 8011514:	4618      	mov	r0, r3
 8011516:	3720      	adds	r7, #32
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b088      	sub	sp, #32
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801152a:	2319      	movs	r3, #25
 801152c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801152e:	2340      	movs	r3, #64	; 0x40
 8011530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011532:	2300      	movs	r3, #0
 8011534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801153a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801153c:	f107 0308 	add.w	r3, r7, #8
 8011540:	4619      	mov	r1, r3
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7ff feec 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011548:	f241 3288 	movw	r2, #5000	; 0x1388
 801154c:	2119      	movs	r1, #25
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f000 f9be 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011556:	69fb      	ldr	r3, [r7, #28]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3720      	adds	r7, #32
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011568:	2300      	movs	r3, #0
 801156a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801156c:	230c      	movs	r3, #12
 801156e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011570:	2340      	movs	r3, #64	; 0x40
 8011572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801157c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801157e:	f107 0308 	add.w	r3, r7, #8
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff fecb 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801158a:	4a05      	ldr	r2, [pc, #20]	; (80115a0 <SDMMC_CmdStopTransfer+0x40>)
 801158c:	210c      	movs	r1, #12
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 f99e 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011596:	69fb      	ldr	r3, [r7, #28]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3720      	adds	r7, #32
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	05f5e100 	.word	0x05f5e100

080115a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b08a      	sub	sp, #40	; 0x28
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80115b4:	2307      	movs	r3, #7
 80115b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115b8:	2340      	movs	r3, #64	; 0x40
 80115ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115bc:	2300      	movs	r3, #0
 80115be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115c4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115c6:	f107 0310 	add.w	r3, r7, #16
 80115ca:	4619      	mov	r1, r3
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	f7ff fea7 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80115d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80115d6:	2107      	movs	r1, #7
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f000 f979 	bl	80118d0 <SDMMC_GetCmdResp1>
 80115de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80115e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3728      	adds	r7, #40	; 0x28
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b088      	sub	sp, #32
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80115f2:	2300      	movs	r3, #0
 80115f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80115fa:	2300      	movs	r3, #0
 80115fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115fe:	2300      	movs	r3, #0
 8011600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011608:	f107 0308 	add.w	r3, r7, #8
 801160c:	4619      	mov	r1, r3
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f7ff fe86 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 f92f 	bl	8011878 <SDMMC_GetCmdError>
 801161a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801161c:	69fb      	ldr	r3, [r7, #28]
}
 801161e:	4618      	mov	r0, r3
 8011620:	3720      	adds	r7, #32
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011626:	b580      	push	{r7, lr}
 8011628:	b088      	sub	sp, #32
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801162e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011634:	2308      	movs	r3, #8
 8011636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011638:	2340      	movs	r3, #64	; 0x40
 801163a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801163c:	2300      	movs	r3, #0
 801163e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011646:	f107 0308 	add.w	r3, r7, #8
 801164a:	4619      	mov	r1, r3
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f7ff fe67 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f000 fb26 	bl	8011ca4 <SDMMC_GetCmdResp7>
 8011658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801165a:	69fb      	ldr	r3, [r7, #28]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3720      	adds	r7, #32
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b088      	sub	sp, #32
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011672:	2337      	movs	r3, #55	; 0x37
 8011674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011676:	2340      	movs	r3, #64	; 0x40
 8011678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801167a:	2300      	movs	r3, #0
 801167c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011684:	f107 0308 	add.w	r3, r7, #8
 8011688:	4619      	mov	r1, r3
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7ff fe48 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011690:	f241 3288 	movw	r2, #5000	; 0x1388
 8011694:	2137      	movs	r1, #55	; 0x37
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 f91a 	bl	80118d0 <SDMMC_GetCmdResp1>
 801169c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801169e:	69fb      	ldr	r3, [r7, #28]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3720      	adds	r7, #32
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b088      	sub	sp, #32
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	4b0d      	ldr	r3, [pc, #52]	; (80116ec <SDMMC_CmdAppOperCommand+0x44>)
 80116b6:	4313      	orrs	r3, r2
 80116b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80116ba:	2329      	movs	r3, #41	; 0x29
 80116bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116be:	2340      	movs	r3, #64	; 0x40
 80116c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116c2:	2300      	movs	r3, #0
 80116c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116cc:	f107 0308 	add.w	r3, r7, #8
 80116d0:	4619      	mov	r1, r3
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7ff fe24 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 fa2f 	bl	8011b3c <SDMMC_GetCmdResp3>
 80116de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116e0:	69fb      	ldr	r3, [r7, #28]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3720      	adds	r7, #32
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	80100000 	.word	0x80100000

080116f0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b088      	sub	sp, #32
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80116fe:	2306      	movs	r3, #6
 8011700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011702:	2340      	movs	r3, #64	; 0x40
 8011704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011706:	2300      	movs	r3, #0
 8011708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801170a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801170e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011710:	f107 0308 	add.w	r3, r7, #8
 8011714:	4619      	mov	r1, r3
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff fe02 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011720:	2106      	movs	r1, #6
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f8d4 	bl	80118d0 <SDMMC_GetCmdResp1>
 8011728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801172a:	69fb      	ldr	r3, [r7, #28]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3720      	adds	r7, #32
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b088      	sub	sp, #32
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801173c:	2300      	movs	r3, #0
 801173e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011740:	2333      	movs	r3, #51	; 0x33
 8011742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011744:	2340      	movs	r3, #64	; 0x40
 8011746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011748:	2300      	movs	r3, #0
 801174a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011752:	f107 0308 	add.w	r3, r7, #8
 8011756:	4619      	mov	r1, r3
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7ff fde1 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011762:	2133      	movs	r1, #51	; 0x33
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f8b3 	bl	80118d0 <SDMMC_GetCmdResp1>
 801176a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801176c:	69fb      	ldr	r3, [r7, #28]
}
 801176e:	4618      	mov	r0, r3
 8011770:	3720      	adds	r7, #32
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}

08011776 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	b088      	sub	sp, #32
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801177e:	2300      	movs	r3, #0
 8011780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011782:	2302      	movs	r3, #2
 8011784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011786:	23c0      	movs	r3, #192	; 0xc0
 8011788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801178a:	2300      	movs	r3, #0
 801178c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011794:	f107 0308 	add.w	r3, r7, #8
 8011798:	4619      	mov	r1, r3
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff fdc0 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f000 f983 	bl	8011aac <SDMMC_GetCmdResp2>
 80117a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117a8:	69fb      	ldr	r3, [r7, #28]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3720      	adds	r7, #32
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b088      	sub	sp, #32
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
 80117ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80117c0:	2309      	movs	r3, #9
 80117c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80117c4:	23c0      	movs	r3, #192	; 0xc0
 80117c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117c8:	2300      	movs	r3, #0
 80117ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117d2:	f107 0308 	add.w	r3, r7, #8
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff fda1 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f964 	bl	8011aac <SDMMC_GetCmdResp2>
 80117e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117e6:	69fb      	ldr	r3, [r7, #28]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3720      	adds	r7, #32
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80117fa:	2300      	movs	r3, #0
 80117fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80117fe:	2303      	movs	r3, #3
 8011800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011802:	2340      	movs	r3, #64	; 0x40
 8011804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011806:	2300      	movs	r3, #0
 8011808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801180e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011810:	f107 0308 	add.w	r3, r7, #8
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7ff fd82 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	2103      	movs	r1, #3
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f000 f9c9 	bl	8011bb8 <SDMMC_GetCmdResp6>
 8011826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011828:	69fb      	ldr	r3, [r7, #28]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3720      	adds	r7, #32
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b088      	sub	sp, #32
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
 801183a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011840:	230d      	movs	r3, #13
 8011842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011844:	2340      	movs	r3, #64	; 0x40
 8011846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011848:	2300      	movs	r3, #0
 801184a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801184c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011852:	f107 0308 	add.w	r3, r7, #8
 8011856:	4619      	mov	r1, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7ff fd61 	bl	8011320 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011862:	210d      	movs	r1, #13
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f833 	bl	80118d0 <SDMMC_GetCmdResp1>
 801186a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801186c:	69fb      	ldr	r3, [r7, #28]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3720      	adds	r7, #32
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
	...

08011878 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011880:	4b11      	ldr	r3, [pc, #68]	; (80118c8 <SDMMC_GetCmdError+0x50>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a11      	ldr	r2, [pc, #68]	; (80118cc <SDMMC_GetCmdError+0x54>)
 8011886:	fba2 2303 	umull	r2, r3, r2, r3
 801188a:	0a5b      	lsrs	r3, r3, #9
 801188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011890:	fb02 f303 	mul.w	r3, r2, r3
 8011894:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	1e5a      	subs	r2, r3, #1
 801189a:	60fa      	str	r2, [r7, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d102      	bne.n	80118a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118a4:	e009      	b.n	80118ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d0f1      	beq.n	8011896 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	22c5      	movs	r2, #197	; 0xc5
 80118b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80118b8:	2300      	movs	r3, #0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3714      	adds	r7, #20
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	20000008 	.word	0x20000008
 80118cc:	10624dd3 	.word	0x10624dd3

080118d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b088      	sub	sp, #32
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	460b      	mov	r3, r1
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80118de:	4b70      	ldr	r3, [pc, #448]	; (8011aa0 <SDMMC_GetCmdResp1+0x1d0>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4a70      	ldr	r2, [pc, #448]	; (8011aa4 <SDMMC_GetCmdResp1+0x1d4>)
 80118e4:	fba2 2303 	umull	r2, r3, r2, r3
 80118e8:	0a5a      	lsrs	r2, r3, #9
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	fb02 f303 	mul.w	r3, r2, r3
 80118f0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	1e5a      	subs	r2, r3, #1
 80118f6:	61fa      	str	r2, [r7, #28]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011900:	e0c9      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011906:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0ef      	beq.n	80118f2 <SDMMC_GetCmdResp1+0x22>
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1ea      	bne.n	80118f2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011920:	f003 0304 	and.w	r3, r3, #4
 8011924:	2b00      	cmp	r3, #0
 8011926:	d004      	beq.n	8011932 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2204      	movs	r2, #4
 801192c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801192e:	2304      	movs	r3, #4
 8011930:	e0b1      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011936:	f003 0301 	and.w	r3, r3, #1
 801193a:	2b00      	cmp	r3, #0
 801193c:	d004      	beq.n	8011948 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2201      	movs	r2, #1
 8011942:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011944:	2301      	movs	r3, #1
 8011946:	e0a6      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	22c5      	movs	r2, #197	; 0xc5
 801194c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f7ff fd10 	bl	8011374 <SDMMC_GetCommandResponse>
 8011954:	4603      	mov	r3, r0
 8011956:	461a      	mov	r2, r3
 8011958:	7afb      	ldrb	r3, [r7, #11]
 801195a:	4293      	cmp	r3, r2
 801195c:	d001      	beq.n	8011962 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801195e:	2301      	movs	r3, #1
 8011960:	e099      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011962:	2100      	movs	r1, #0
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f7ff fd12 	bl	801138e <SDMMC_GetResponse>
 801196a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	4b4e      	ldr	r3, [pc, #312]	; (8011aa8 <SDMMC_GetCmdResp1+0x1d8>)
 8011970:	4013      	ands	r3, r2
 8011972:	2b00      	cmp	r3, #0
 8011974:	d101      	bne.n	801197a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011976:	2300      	movs	r3, #0
 8011978:	e08d      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	2b00      	cmp	r3, #0
 801197e:	da02      	bge.n	8011986 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011984:	e087      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801198c:	2b00      	cmp	r3, #0
 801198e:	d001      	beq.n	8011994 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011990:	2340      	movs	r3, #64	; 0x40
 8011992:	e080      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801199a:	2b00      	cmp	r3, #0
 801199c:	d001      	beq.n	80119a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801199e:	2380      	movs	r3, #128	; 0x80
 80119a0:	e079      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d002      	beq.n	80119b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80119ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119b0:	e071      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80119bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119c0:	e069      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80119cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119d0:	e061      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80119dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119e0:	e059      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d002      	beq.n	80119f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80119ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119f0:	e051      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80119fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a00:	e049      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a10:	e041      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d002      	beq.n	8011a22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a20:	e039      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a30:	e031      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d002      	beq.n	8011a42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011a3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011a40:	e029      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d002      	beq.n	8011a52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011a50:	e021      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d002      	beq.n	8011a62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011a60:	e019      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011a70:	e011      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d002      	beq.n	8011a82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a80:	e009      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	f003 0308 	and.w	r3, r3, #8
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d002      	beq.n	8011a92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011a8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011a90:	e001      	b.n	8011a96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3720      	adds	r7, #32
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	20000008 	.word	0x20000008
 8011aa4:	10624dd3 	.word	0x10624dd3
 8011aa8:	fdffe008 	.word	0xfdffe008

08011aac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ab4:	4b1f      	ldr	r3, [pc, #124]	; (8011b34 <SDMMC_GetCmdResp2+0x88>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4a1f      	ldr	r2, [pc, #124]	; (8011b38 <SDMMC_GetCmdResp2+0x8c>)
 8011aba:	fba2 2303 	umull	r2, r3, r2, r3
 8011abe:	0a5b      	lsrs	r3, r3, #9
 8011ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ac4:	fb02 f303 	mul.w	r3, r2, r3
 8011ac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	1e5a      	subs	r2, r3, #1
 8011ace:	60fa      	str	r2, [r7, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d102      	bne.n	8011ada <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ad8:	e026      	b.n	8011b28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0ef      	beq.n	8011aca <SDMMC_GetCmdResp2+0x1e>
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1ea      	bne.n	8011aca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011af8:	f003 0304 	and.w	r3, r3, #4
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d004      	beq.n	8011b0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2204      	movs	r2, #4
 8011b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b06:	2304      	movs	r3, #4
 8011b08:	e00e      	b.n	8011b28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b0e:	f003 0301 	and.w	r3, r3, #1
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d004      	beq.n	8011b20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e003      	b.n	8011b28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	22c5      	movs	r2, #197	; 0xc5
 8011b24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	20000008 	.word	0x20000008
 8011b38:	10624dd3 	.word	0x10624dd3

08011b3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b44:	4b1a      	ldr	r3, [pc, #104]	; (8011bb0 <SDMMC_GetCmdResp3+0x74>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a1a      	ldr	r2, [pc, #104]	; (8011bb4 <SDMMC_GetCmdResp3+0x78>)
 8011b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b4e:	0a5b      	lsrs	r3, r3, #9
 8011b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b54:	fb02 f303 	mul.w	r3, r2, r3
 8011b58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	1e5a      	subs	r2, r3, #1
 8011b5e:	60fa      	str	r2, [r7, #12]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d102      	bne.n	8011b6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b68:	e01b      	b.n	8011ba2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d0ef      	beq.n	8011b5a <SDMMC_GetCmdResp3+0x1e>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1ea      	bne.n	8011b5a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b88:	f003 0304 	and.w	r3, r3, #4
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d004      	beq.n	8011b9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2204      	movs	r2, #4
 8011b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b96:	2304      	movs	r3, #4
 8011b98:	e003      	b.n	8011ba2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	22c5      	movs	r2, #197	; 0xc5
 8011b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3714      	adds	r7, #20
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	20000008 	.word	0x20000008
 8011bb4:	10624dd3 	.word	0x10624dd3

08011bb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bc6:	4b35      	ldr	r3, [pc, #212]	; (8011c9c <SDMMC_GetCmdResp6+0xe4>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a35      	ldr	r2, [pc, #212]	; (8011ca0 <SDMMC_GetCmdResp6+0xe8>)
 8011bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8011bd0:	0a5b      	lsrs	r3, r3, #9
 8011bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd6:	fb02 f303 	mul.w	r3, r2, r3
 8011bda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	1e5a      	subs	r2, r3, #1
 8011be0:	61fa      	str	r2, [r7, #28]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d102      	bne.n	8011bec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bea:	e052      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0ef      	beq.n	8011bdc <SDMMC_GetCmdResp6+0x24>
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1ea      	bne.n	8011bdc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c0a:	f003 0304 	and.w	r3, r3, #4
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d004      	beq.n	8011c1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2204      	movs	r2, #4
 8011c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c18:	2304      	movs	r3, #4
 8011c1a:	e03a      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c20:	f003 0301 	and.w	r3, r3, #1
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d004      	beq.n	8011c32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e02f      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f7ff fb9e 	bl	8011374 <SDMMC_GetCommandResponse>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	7afb      	ldrb	r3, [r7, #11]
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d001      	beq.n	8011c46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c42:	2301      	movs	r3, #1
 8011c44:	e025      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	22c5      	movs	r2, #197	; 0xc5
 8011c4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f7ff fb9d 	bl	801138e <SDMMC_GetResponse>
 8011c54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d106      	bne.n	8011c6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	0c1b      	lsrs	r3, r3, #16
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e011      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011c7c:	e009      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d002      	beq.n	8011c8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c8c:	e001      	b.n	8011c92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3720      	adds	r7, #32
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	20000008 	.word	0x20000008
 8011ca0:	10624dd3 	.word	0x10624dd3

08011ca4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011cac:	4b22      	ldr	r3, [pc, #136]	; (8011d38 <SDMMC_GetCmdResp7+0x94>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4a22      	ldr	r2, [pc, #136]	; (8011d3c <SDMMC_GetCmdResp7+0x98>)
 8011cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8011cb6:	0a5b      	lsrs	r3, r3, #9
 8011cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cbc:	fb02 f303 	mul.w	r3, r2, r3
 8011cc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	1e5a      	subs	r2, r3, #1
 8011cc6:	60fa      	str	r2, [r7, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d102      	bne.n	8011cd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011cd0:	e02c      	b.n	8011d2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d0ef      	beq.n	8011cc2 <SDMMC_GetCmdResp7+0x1e>
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1ea      	bne.n	8011cc2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cf0:	f003 0304 	and.w	r3, r3, #4
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d004      	beq.n	8011d02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2204      	movs	r2, #4
 8011cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011cfe:	2304      	movs	r3, #4
 8011d00:	e014      	b.n	8011d2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d06:	f003 0301 	and.w	r3, r3, #1
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d004      	beq.n	8011d18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2201      	movs	r2, #1
 8011d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d14:	2301      	movs	r3, #1
 8011d16:	e009      	b.n	8011d2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d002      	beq.n	8011d2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2240      	movs	r2, #64	; 0x40
 8011d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011d2a:	2300      	movs	r3, #0
  
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	20000008 	.word	0x20000008
 8011d3c:	10624dd3 	.word	0x10624dd3

08011d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011d40:	b084      	sub	sp, #16
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	f107 001c 	add.w	r0, r7, #28
 8011d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d120      	bne.n	8011d9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	68da      	ldr	r2, [r3, #12]
 8011d68:	4b20      	ldr	r3, [pc, #128]	; (8011dec <USB_CoreInit+0xac>)
 8011d6a:	4013      	ands	r3, r2
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d105      	bne.n	8011d8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 f942 	bl	8012018 <USB_CoreReset>
 8011d94:	4603      	mov	r3, r0
 8011d96:	73fb      	strb	r3, [r7, #15]
 8011d98:	e010      	b.n	8011dbc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 f936 	bl	8012018 <USB_CoreReset>
 8011dac:	4603      	mov	r3, r0
 8011dae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011db4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d10b      	bne.n	8011dda <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	f043 0206 	orr.w	r2, r3, #6
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	f043 0220 	orr.w	r2, r3, #32
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011de6:	b004      	add	sp, #16
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop
 8011dec:	ffbdffbf 	.word	0xffbdffbf

08011df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	f043 0201 	orr.w	r2, r3, #1
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e04:	2300      	movs	r3, #0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr

08011e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e12:	b480      	push	{r7}
 8011e14:	b083      	sub	sp, #12
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	f023 0201 	bic.w	r2, r3, #1
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e4c:	78fb      	ldrb	r3, [r7, #3]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d106      	bne.n	8011e60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	60da      	str	r2, [r3, #12]
 8011e5e:	e00b      	b.n	8011e78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e60:	78fb      	ldrb	r3, [r7, #3]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d106      	bne.n	8011e74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	60da      	str	r2, [r3, #12]
 8011e72:	e001      	b.n	8011e78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e74:	2301      	movs	r3, #1
 8011e76:	e003      	b.n	8011e80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e78:	2032      	movs	r0, #50	; 0x32
 8011e7a:	f7f4 f8d9 	bl	8006030 <HAL_Delay>

  return HAL_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011e92:	2300      	movs	r3, #0
 8011e94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	019b      	lsls	r3, r3, #6
 8011e9a:	f043 0220 	orr.w	r2, r3, #32
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	60fb      	str	r3, [r7, #12]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <USB_FlushTxFifo+0x48>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d901      	bls.n	8011eb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	e006      	b.n	8011ec2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	691b      	ldr	r3, [r3, #16]
 8011eb8:	f003 0320 	and.w	r3, r3, #32
 8011ebc:	2b20      	cmp	r3, #32
 8011ebe:	d0f0      	beq.n	8011ea2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	00030d40 	.word	0x00030d40

08011ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011edc:	2300      	movs	r3, #0
 8011ede:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2210      	movs	r2, #16
 8011ee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <USB_FlushRxFifo+0x40>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d901      	bls.n	8011ef8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011ef4:	2303      	movs	r3, #3
 8011ef6:	e006      	b.n	8011f06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	691b      	ldr	r3, [r3, #16]
 8011efc:	f003 0310 	and.w	r3, r3, #16
 8011f00:	2b10      	cmp	r3, #16
 8011f02:	d0f0      	beq.n	8011ee6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3714      	adds	r7, #20
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	00030d40 	.word	0x00030d40

08011f18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b089      	sub	sp, #36	; 0x24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	4611      	mov	r1, r2
 8011f24:	461a      	mov	r2, r3
 8011f26:	460b      	mov	r3, r1
 8011f28:	71fb      	strb	r3, [r7, #7]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011f36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d11a      	bne.n	8011f74 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011f3e:	88bb      	ldrh	r3, [r7, #4]
 8011f40:	3303      	adds	r3, #3
 8011f42:	089b      	lsrs	r3, r3, #2
 8011f44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011f46:	2300      	movs	r3, #0
 8011f48:	61bb      	str	r3, [r7, #24]
 8011f4a:	e00f      	b.n	8011f6c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011f4c:	79fb      	ldrb	r3, [r7, #7]
 8011f4e:	031a      	lsls	r2, r3, #12
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	4413      	add	r3, r2
 8011f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f58:	461a      	mov	r2, r3
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	3304      	adds	r3, #4
 8011f64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	61bb      	str	r3, [r7, #24]
 8011f6c:	69ba      	ldr	r2, [r7, #24]
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d3eb      	bcc.n	8011f4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3724      	adds	r7, #36	; 0x24
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr

08011f82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011f82:	b480      	push	{r7}
 8011f84:	b089      	sub	sp, #36	; 0x24
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	60f8      	str	r0, [r7, #12]
 8011f8a:	60b9      	str	r1, [r7, #8]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011f98:	88fb      	ldrh	r3, [r7, #6]
 8011f9a:	3303      	adds	r3, #3
 8011f9c:	089b      	lsrs	r3, r3, #2
 8011f9e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	61bb      	str	r3, [r7, #24]
 8011fa4:	e00b      	b.n	8011fbe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	601a      	str	r2, [r3, #0]
    pDest++;
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011fb8:	69bb      	ldr	r3, [r7, #24]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	61bb      	str	r3, [r7, #24]
 8011fbe:	69ba      	ldr	r2, [r7, #24]
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d3ef      	bcc.n	8011fa6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011fc6:	69fb      	ldr	r3, [r7, #28]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3724      	adds	r7, #36	; 0x24
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	695b      	ldr	r3, [r3, #20]
 8011fe0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	699b      	ldr	r3, [r3, #24]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	4013      	ands	r3, r2
 8011fea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011fec:	68fb      	ldr	r3, [r7, #12]
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3714      	adds	r7, #20
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	695b      	ldr	r3, [r3, #20]
 8012006:	f003 0301 	and.w	r3, r3, #1
}
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr
	...

08012018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012018:	b480      	push	{r7}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012020:	2300      	movs	r3, #0
 8012022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3301      	adds	r3, #1
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	4a13      	ldr	r2, [pc, #76]	; (801207c <USB_CoreReset+0x64>)
 801202e:	4293      	cmp	r3, r2
 8012030:	d901      	bls.n	8012036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012032:	2303      	movs	r3, #3
 8012034:	e01b      	b.n	801206e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	691b      	ldr	r3, [r3, #16]
 801203a:	2b00      	cmp	r3, #0
 801203c:	daf2      	bge.n	8012024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801203e:	2300      	movs	r3, #0
 8012040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	f043 0201 	orr.w	r2, r3, #1
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	3301      	adds	r3, #1
 8012052:	60fb      	str	r3, [r7, #12]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	4a09      	ldr	r2, [pc, #36]	; (801207c <USB_CoreReset+0x64>)
 8012058:	4293      	cmp	r3, r2
 801205a:	d901      	bls.n	8012060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801205c:	2303      	movs	r3, #3
 801205e:	e006      	b.n	801206e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	2b01      	cmp	r3, #1
 801206a:	d0f0      	beq.n	801204e <USB_CoreReset+0x36>

  return HAL_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3714      	adds	r7, #20
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr
 801207a:	bf00      	nop
 801207c:	00030d40 	.word	0x00030d40

08012080 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012080:	b084      	sub	sp, #16
 8012082:	b580      	push	{r7, lr}
 8012084:	b084      	sub	sp, #16
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	f107 001c 	add.w	r0, r7, #28
 801208e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801209c:	461a      	mov	r2, r3
 801209e:	2300      	movs	r3, #0
 80120a0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d018      	beq.n	80120ec <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80120ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d10a      	bne.n	80120d6 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	68ba      	ldr	r2, [r7, #8]
 80120ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120ce:	f043 0304 	orr.w	r3, r3, #4
 80120d2:	6013      	str	r3, [r2, #0]
 80120d4:	e014      	b.n	8012100 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	68ba      	ldr	r2, [r7, #8]
 80120e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120e4:	f023 0304 	bic.w	r3, r3, #4
 80120e8:	6013      	str	r3, [r2, #0]
 80120ea:	e009      	b.n	8012100 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120fa:	f023 0304 	bic.w	r3, r3, #4
 80120fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8012100:	2110      	movs	r1, #16
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff fec0 	bl	8011e88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ff fee3 	bl	8011ed4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801210e:	2300      	movs	r3, #0
 8012110:	60fb      	str	r3, [r7, #12]
 8012112:	e015      	b.n	8012140 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	015a      	lsls	r2, r3, #5
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	4413      	add	r3, r2
 801211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012120:	461a      	mov	r2, r3
 8012122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012126:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	015a      	lsls	r2, r3, #5
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	4413      	add	r3, r2
 8012130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012134:	461a      	mov	r2, r3
 8012136:	2300      	movs	r3, #0
 8012138:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	3301      	adds	r3, #1
 801213e:	60fb      	str	r3, [r7, #12]
 8012140:	6a3b      	ldr	r3, [r7, #32]
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	429a      	cmp	r2, r3
 8012146:	d3e5      	bcc.n	8012114 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8012148:	2101      	movs	r1, #1
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f8ac 	bl	80122a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8012150:	20c8      	movs	r0, #200	; 0xc8
 8012152:	f7f3 ff6d 	bl	8006030 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012162:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00b      	beq.n	8012188 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012176:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4a14      	ldr	r2, [pc, #80]	; (80121cc <USB_HostInit+0x14c>)
 801217c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4a13      	ldr	r2, [pc, #76]	; (80121d0 <USB_HostInit+0x150>)
 8012182:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012186:	e009      	b.n	801219c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2280      	movs	r2, #128	; 0x80
 801218c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a10      	ldr	r2, [pc, #64]	; (80121d4 <USB_HostInit+0x154>)
 8012192:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	4a10      	ldr	r2, [pc, #64]	; (80121d8 <USB_HostInit+0x158>)
 8012198:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d105      	bne.n	80121ae <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	699b      	ldr	r3, [r3, #24]
 80121a6:	f043 0210 	orr.w	r2, r3, #16
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	699a      	ldr	r2, [r3, #24]
 80121b2:	4b0a      	ldr	r3, [pc, #40]	; (80121dc <USB_HostInit+0x15c>)
 80121b4:	4313      	orrs	r3, r2
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80121ba:	2300      	movs	r3, #0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121c6:	b004      	add	sp, #16
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop
 80121cc:	01000200 	.word	0x01000200
 80121d0:	00e00300 	.word	0x00e00300
 80121d4:	00600080 	.word	0x00600080
 80121d8:	004000e0 	.word	0x004000e0
 80121dc:	a3200008 	.word	0xa3200008

080121e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80121e0:	b480      	push	{r7}
 80121e2:	b085      	sub	sp, #20
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121fe:	f023 0303 	bic.w	r3, r3, #3
 8012202:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	78fb      	ldrb	r3, [r7, #3]
 801220e:	f003 0303 	and.w	r3, r3, #3
 8012212:	68f9      	ldr	r1, [r7, #12]
 8012214:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012218:	4313      	orrs	r3, r2
 801221a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 801221c:	78fb      	ldrb	r3, [r7, #3]
 801221e:	2b01      	cmp	r3, #1
 8012220:	d107      	bne.n	8012232 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012228:	461a      	mov	r2, r3
 801222a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801222e:	6053      	str	r3, [r2, #4]
 8012230:	e009      	b.n	8012246 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8012232:	78fb      	ldrb	r3, [r7, #3]
 8012234:	2b02      	cmp	r3, #2
 8012236:	d106      	bne.n	8012246 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801223e:	461a      	mov	r2, r3
 8012240:	f241 7370 	movw	r3, #6000	; 0x1770
 8012244:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8012246:	2300      	movs	r3, #0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8012260:	2300      	movs	r3, #0
 8012262:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8012274:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	68fa      	ldr	r2, [r7, #12]
 801227a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012282:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8012284:	2064      	movs	r0, #100	; 0x64
 8012286:	f7f3 fed3 	bl	8006030 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012296:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8012298:	200a      	movs	r0, #10
 801229a:	f7f3 fec9 	bl	8006030 <HAL_Delay>

  return HAL_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b085      	sub	sp, #20
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	460b      	mov	r3, r1
 80122b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80122b8:	2300      	movs	r3, #0
 80122ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80122cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d109      	bne.n	80122ec <USB_DriveVbus+0x44>
 80122d8:	78fb      	ldrb	r3, [r7, #3]
 80122da:	2b01      	cmp	r3, #1
 80122dc:	d106      	bne.n	80122ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80122e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80122ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80122f6:	d109      	bne.n	801230c <USB_DriveVbus+0x64>
 80122f8:	78fb      	ldrb	r3, [r7, #3]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d106      	bne.n	801230c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801230a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801231a:	b480      	push	{r7}
 801231c:	b085      	sub	sp, #20
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012326:	2300      	movs	r3, #0
 8012328:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	0c5b      	lsrs	r3, r3, #17
 8012338:	f003 0303 	and.w	r3, r3, #3
}
 801233c:	4618      	mov	r0, r3
 801233e:	3714      	adds	r7, #20
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	b29b      	uxth	r3, r3
}
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
	...

0801236c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b088      	sub	sp, #32
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	4608      	mov	r0, r1
 8012376:	4611      	mov	r1, r2
 8012378:	461a      	mov	r2, r3
 801237a:	4603      	mov	r3, r0
 801237c:	70fb      	strb	r3, [r7, #3]
 801237e:	460b      	mov	r3, r1
 8012380:	70bb      	strb	r3, [r7, #2]
 8012382:	4613      	mov	r3, r2
 8012384:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8012386:	2300      	movs	r3, #0
 8012388:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801238e:	78fb      	ldrb	r3, [r7, #3]
 8012390:	015a      	lsls	r2, r3, #5
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	4413      	add	r3, r2
 8012396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801239a:	461a      	mov	r2, r3
 801239c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80123a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80123a6:	2b03      	cmp	r3, #3
 80123a8:	d87e      	bhi.n	80124a8 <USB_HC_Init+0x13c>
 80123aa:	a201      	add	r2, pc, #4	; (adr r2, 80123b0 <USB_HC_Init+0x44>)
 80123ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b0:	080123c1 	.word	0x080123c1
 80123b4:	0801246b 	.word	0x0801246b
 80123b8:	080123c1 	.word	0x080123c1
 80123bc:	0801242d 	.word	0x0801242d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80123c0:	78fb      	ldrb	r3, [r7, #3]
 80123c2:	015a      	lsls	r2, r3, #5
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	4413      	add	r3, r2
 80123c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123cc:	461a      	mov	r2, r3
 80123ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80123d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80123d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	da10      	bge.n	80123fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80123dc:	78fb      	ldrb	r3, [r7, #3]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	78fa      	ldrb	r2, [r7, #3]
 80123ec:	0151      	lsls	r1, r2, #5
 80123ee:	693a      	ldr	r2, [r7, #16]
 80123f0:	440a      	add	r2, r1
 80123f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80123f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80123fc:	e057      	b.n	80124ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012406:	2b00      	cmp	r3, #0
 8012408:	d051      	beq.n	80124ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 801240a:	78fb      	ldrb	r3, [r7, #3]
 801240c:	015a      	lsls	r2, r3, #5
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	4413      	add	r3, r2
 8012412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	78fa      	ldrb	r2, [r7, #3]
 801241a:	0151      	lsls	r1, r2, #5
 801241c:	693a      	ldr	r2, [r7, #16]
 801241e:	440a      	add	r2, r1
 8012420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012424:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012428:	60d3      	str	r3, [r2, #12]
      break;
 801242a:	e040      	b.n	80124ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801242c:	78fb      	ldrb	r3, [r7, #3]
 801242e:	015a      	lsls	r2, r3, #5
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	4413      	add	r3, r2
 8012434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012438:	461a      	mov	r2, r3
 801243a:	f240 639d 	movw	r3, #1693	; 0x69d
 801243e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012440:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012444:	2b00      	cmp	r3, #0
 8012446:	da34      	bge.n	80124b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012448:	78fb      	ldrb	r3, [r7, #3]
 801244a:	015a      	lsls	r2, r3, #5
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	4413      	add	r3, r2
 8012450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	78fa      	ldrb	r2, [r7, #3]
 8012458:	0151      	lsls	r1, r2, #5
 801245a:	693a      	ldr	r2, [r7, #16]
 801245c:	440a      	add	r2, r1
 801245e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012466:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012468:	e023      	b.n	80124b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801246a:	78fb      	ldrb	r3, [r7, #3]
 801246c:	015a      	lsls	r2, r3, #5
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	4413      	add	r3, r2
 8012472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012476:	461a      	mov	r2, r3
 8012478:	f240 2325 	movw	r3, #549	; 0x225
 801247c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801247e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012482:	2b00      	cmp	r3, #0
 8012484:	da17      	bge.n	80124b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012486:	78fb      	ldrb	r3, [r7, #3]
 8012488:	015a      	lsls	r2, r3, #5
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	4413      	add	r3, r2
 801248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	78fa      	ldrb	r2, [r7, #3]
 8012496:	0151      	lsls	r1, r2, #5
 8012498:	693a      	ldr	r2, [r7, #16]
 801249a:	440a      	add	r2, r1
 801249c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80124a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80124a6:	e006      	b.n	80124b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	77fb      	strb	r3, [r7, #31]
      break;
 80124ac:	e004      	b.n	80124b8 <USB_HC_Init+0x14c>
      break;
 80124ae:	bf00      	nop
 80124b0:	e002      	b.n	80124b8 <USB_HC_Init+0x14c>
      break;
 80124b2:	bf00      	nop
 80124b4:	e000      	b.n	80124b8 <USB_HC_Init+0x14c>
      break;
 80124b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80124be:	699a      	ldr	r2, [r3, #24]
 80124c0:	78fb      	ldrb	r3, [r7, #3]
 80124c2:	f003 030f 	and.w	r3, r3, #15
 80124c6:	2101      	movs	r1, #1
 80124c8:	fa01 f303 	lsl.w	r3, r1, r3
 80124cc:	6939      	ldr	r1, [r7, #16]
 80124ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80124d2:	4313      	orrs	r3, r2
 80124d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	699b      	ldr	r3, [r3, #24]
 80124da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80124e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	da03      	bge.n	80124f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80124ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124ee:	61bb      	str	r3, [r7, #24]
 80124f0:	e001      	b.n	80124f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80124f2:	2300      	movs	r3, #0
 80124f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7ff ff0f 	bl	801231a <USB_GetHostSpeed>
 80124fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80124fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012502:	2b02      	cmp	r3, #2
 8012504:	d106      	bne.n	8012514 <USB_HC_Init+0x1a8>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2b02      	cmp	r3, #2
 801250a:	d003      	beq.n	8012514 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012510:	617b      	str	r3, [r7, #20]
 8012512:	e001      	b.n	8012518 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012518:	787b      	ldrb	r3, [r7, #1]
 801251a:	059b      	lsls	r3, r3, #22
 801251c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012520:	78bb      	ldrb	r3, [r7, #2]
 8012522:	02db      	lsls	r3, r3, #11
 8012524:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012528:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801252a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801252e:	049b      	lsls	r3, r3, #18
 8012530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012534:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012536:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012538:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801253c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012542:	78fb      	ldrb	r3, [r7, #3]
 8012544:	0159      	lsls	r1, r3, #5
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	440b      	add	r3, r1
 801254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801254e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012554:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8012556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801255a:	2b03      	cmp	r3, #3
 801255c:	d10f      	bne.n	801257e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801255e:	78fb      	ldrb	r3, [r7, #3]
 8012560:	015a      	lsls	r2, r3, #5
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	4413      	add	r3, r2
 8012566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	78fa      	ldrb	r2, [r7, #3]
 801256e:	0151      	lsls	r1, r2, #5
 8012570:	693a      	ldr	r2, [r7, #16]
 8012572:	440a      	add	r2, r1
 8012574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801257c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801257e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012580:	4618      	mov	r0, r3
 8012582:	3720      	adds	r7, #32
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b08c      	sub	sp, #48	; 0x30
 801258c:	af02      	add	r7, sp, #8
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	4613      	mov	r3, r2
 8012594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	785b      	ldrb	r3, [r3, #1]
 801259e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80125a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d02d      	beq.n	801260e <USB_HC_StartXfer+0x86>
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	791b      	ldrb	r3, [r3, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d129      	bne.n	801260e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80125ba:	79fb      	ldrb	r3, [r7, #7]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d117      	bne.n	80125f0 <USB_HC_StartXfer+0x68>
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	79db      	ldrb	r3, [r3, #7]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d003      	beq.n	80125d0 <USB_HC_StartXfer+0x48>
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	79db      	ldrb	r3, [r3, #7]
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d10f      	bne.n	80125f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	015a      	lsls	r2, r3, #5
 80125d4:	6a3b      	ldr	r3, [r7, #32]
 80125d6:	4413      	add	r3, r2
 80125d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	69fa      	ldr	r2, [r7, #28]
 80125e0:	0151      	lsls	r1, r2, #5
 80125e2:	6a3a      	ldr	r2, [r7, #32]
 80125e4:	440a      	add	r2, r1
 80125e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80125f0:	79fb      	ldrb	r3, [r7, #7]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d10b      	bne.n	801260e <USB_HC_StartXfer+0x86>
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	795b      	ldrb	r3, [r3, #5]
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d107      	bne.n	801260e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	785b      	ldrb	r3, [r3, #1]
 8012602:	4619      	mov	r1, r3
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f000 fa2f 	bl	8012a68 <USB_DoPing>
      return HAL_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	e0f8      	b.n	8012800 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	695b      	ldr	r3, [r3, #20]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d018      	beq.n	8012648 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	695b      	ldr	r3, [r3, #20]
 801261a:	68ba      	ldr	r2, [r7, #8]
 801261c:	8912      	ldrh	r2, [r2, #8]
 801261e:	4413      	add	r3, r2
 8012620:	3b01      	subs	r3, #1
 8012622:	68ba      	ldr	r2, [r7, #8]
 8012624:	8912      	ldrh	r2, [r2, #8]
 8012626:	fbb3 f3f2 	udiv	r3, r3, r2
 801262a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 801262c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801262e:	8b7b      	ldrh	r3, [r7, #26]
 8012630:	429a      	cmp	r2, r3
 8012632:	d90b      	bls.n	801264c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8012634:	8b7b      	ldrh	r3, [r7, #26]
 8012636:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	8912      	ldrh	r2, [r2, #8]
 801263e:	fb02 f203 	mul.w	r2, r2, r3
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	611a      	str	r2, [r3, #16]
 8012646:	e001      	b.n	801264c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8012648:	2301      	movs	r3, #1
 801264a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	78db      	ldrb	r3, [r3, #3]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d007      	beq.n	8012664 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012656:	68ba      	ldr	r2, [r7, #8]
 8012658:	8912      	ldrh	r2, [r2, #8]
 801265a:	fb02 f203 	mul.w	r2, r2, r3
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	611a      	str	r2, [r3, #16]
 8012662:	e003      	b.n	801266c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	695a      	ldr	r2, [r3, #20]
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	691b      	ldr	r3, [r3, #16]
 8012670:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012676:	04d9      	lsls	r1, r3, #19
 8012678:	4b63      	ldr	r3, [pc, #396]	; (8012808 <USB_HC_StartXfer+0x280>)
 801267a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801267c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	7a9b      	ldrb	r3, [r3, #10]
 8012682:	075b      	lsls	r3, r3, #29
 8012684:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012688:	69f9      	ldr	r1, [r7, #28]
 801268a:	0148      	lsls	r0, r1, #5
 801268c:	6a39      	ldr	r1, [r7, #32]
 801268e:	4401      	add	r1, r0
 8012690:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012694:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012696:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8012698:	79fb      	ldrb	r3, [r7, #7]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d009      	beq.n	80126b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	68d9      	ldr	r1, [r3, #12]
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	015a      	lsls	r2, r3, #5
 80126a6:	6a3b      	ldr	r3, [r7, #32]
 80126a8:	4413      	add	r3, r2
 80126aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126ae:	460a      	mov	r2, r1
 80126b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	f003 0301 	and.w	r3, r3, #1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	bf0c      	ite	eq
 80126c2:	2301      	moveq	r3, #1
 80126c4:	2300      	movne	r3, #0
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	015a      	lsls	r2, r3, #5
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	4413      	add	r3, r2
 80126d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	69fa      	ldr	r2, [r7, #28]
 80126da:	0151      	lsls	r1, r2, #5
 80126dc:	6a3a      	ldr	r2, [r7, #32]
 80126de:	440a      	add	r2, r1
 80126e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80126e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80126e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	015a      	lsls	r2, r3, #5
 80126ee:	6a3b      	ldr	r3, [r7, #32]
 80126f0:	4413      	add	r3, r2
 80126f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	7e7b      	ldrb	r3, [r7, #25]
 80126fa:	075b      	lsls	r3, r3, #29
 80126fc:	69f9      	ldr	r1, [r7, #28]
 80126fe:	0148      	lsls	r0, r1, #5
 8012700:	6a39      	ldr	r1, [r7, #32]
 8012702:	4401      	add	r1, r0
 8012704:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012708:	4313      	orrs	r3, r2
 801270a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	015a      	lsls	r2, r3, #5
 8012710:	6a3b      	ldr	r3, [r7, #32]
 8012712:	4413      	add	r3, r2
 8012714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012722:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	78db      	ldrb	r3, [r3, #3]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d004      	beq.n	8012736 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012732:	613b      	str	r3, [r7, #16]
 8012734:	e003      	b.n	801273e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801273c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012744:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	015a      	lsls	r2, r3, #5
 801274a:	6a3b      	ldr	r3, [r7, #32]
 801274c:	4413      	add	r3, r2
 801274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012752:	461a      	mov	r2, r3
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012758:	79fb      	ldrb	r3, [r7, #7]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801275e:	2300      	movs	r3, #0
 8012760:	e04e      	b.n	8012800 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	78db      	ldrb	r3, [r3, #3]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d149      	bne.n	80127fe <USB_HC_StartXfer+0x276>
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	695b      	ldr	r3, [r3, #20]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d045      	beq.n	80127fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	79db      	ldrb	r3, [r3, #7]
 8012776:	2b03      	cmp	r3, #3
 8012778:	d830      	bhi.n	80127dc <USB_HC_StartXfer+0x254>
 801277a:	a201      	add	r2, pc, #4	; (adr r2, 8012780 <USB_HC_StartXfer+0x1f8>)
 801277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012780:	08012791 	.word	0x08012791
 8012784:	080127b5 	.word	0x080127b5
 8012788:	08012791 	.word	0x08012791
 801278c:	080127b5 	.word	0x080127b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	695b      	ldr	r3, [r3, #20]
 8012794:	3303      	adds	r3, #3
 8012796:	089b      	lsrs	r3, r3, #2
 8012798:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801279a:	8afa      	ldrh	r2, [r7, #22]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d91c      	bls.n	80127e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	699b      	ldr	r3, [r3, #24]
 80127aa:	f043 0220 	orr.w	r2, r3, #32
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80127b2:	e015      	b.n	80127e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	3303      	adds	r3, #3
 80127ba:	089b      	lsrs	r3, r3, #2
 80127bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80127be:	8afa      	ldrh	r2, [r7, #22]
 80127c0:	6a3b      	ldr	r3, [r7, #32]
 80127c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127c6:	691b      	ldr	r3, [r3, #16]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d90a      	bls.n	80127e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	699b      	ldr	r3, [r3, #24]
 80127d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80127da:	e003      	b.n	80127e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80127dc:	bf00      	nop
 80127de:	e002      	b.n	80127e6 <USB_HC_StartXfer+0x25e>
        break;
 80127e0:	bf00      	nop
 80127e2:	e000      	b.n	80127e6 <USB_HC_StartXfer+0x25e>
        break;
 80127e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	68d9      	ldr	r1, [r3, #12]
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	785a      	ldrb	r2, [r3, #1]
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	695b      	ldr	r3, [r3, #20]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	2000      	movs	r0, #0
 80127f6:	9000      	str	r0, [sp, #0]
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f7ff fb8d 	bl	8011f18 <USB_WritePacket>
  }

  return HAL_OK;
 80127fe:	2300      	movs	r3, #0
}
 8012800:	4618      	mov	r0, r3
 8012802:	3728      	adds	r7, #40	; 0x28
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	1ff80000 	.word	0x1ff80000

0801280c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801281e:	695b      	ldr	r3, [r3, #20]
 8012820:	b29b      	uxth	r3, r3
}
 8012822:	4618      	mov	r0, r3
 8012824:	3714      	adds	r7, #20
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr

0801282e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801282e:	b480      	push	{r7}
 8012830:	b089      	sub	sp, #36	; 0x24
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	460b      	mov	r3, r1
 8012838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 801283e:	78fb      	ldrb	r3, [r7, #3]
 8012840:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8012842:	2300      	movs	r3, #0
 8012844:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	015a      	lsls	r2, r3, #5
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	4413      	add	r3, r2
 801284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	0c9b      	lsrs	r3, r3, #18
 8012856:	f003 0303 	and.w	r3, r3, #3
 801285a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	015a      	lsls	r2, r3, #5
 8012860:	69bb      	ldr	r3, [r7, #24]
 8012862:	4413      	add	r3, r2
 8012864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	0fdb      	lsrs	r3, r3, #31
 801286c:	f003 0301 	and.w	r3, r3, #1
 8012870:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	689b      	ldr	r3, [r3, #8]
 8012876:	f003 0320 	and.w	r3, r3, #32
 801287a:	2b20      	cmp	r3, #32
 801287c:	d104      	bne.n	8012888 <USB_HC_Halt+0x5a>
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	e0e8      	b.n	8012a5a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <USB_HC_Halt+0x66>
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b02      	cmp	r3, #2
 8012892:	d173      	bne.n	801297c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	015a      	lsls	r2, r3, #5
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	4413      	add	r3, r2
 801289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	697a      	ldr	r2, [r7, #20]
 80128a4:	0151      	lsls	r1, r2, #5
 80128a6:	69ba      	ldr	r2, [r7, #24]
 80128a8:	440a      	add	r2, r1
 80128aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80128b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	689b      	ldr	r3, [r3, #8]
 80128b8:	f003 0320 	and.w	r3, r3, #32
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f040 80cb 	bne.w	8012a58 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d143      	bne.n	8012956 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	015a      	lsls	r2, r3, #5
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	4413      	add	r3, r2
 80128d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	697a      	ldr	r2, [r7, #20]
 80128de:	0151      	lsls	r1, r2, #5
 80128e0:	69ba      	ldr	r2, [r7, #24]
 80128e2:	440a      	add	r2, r1
 80128e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	015a      	lsls	r2, r3, #5
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	4413      	add	r3, r2
 80128f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	697a      	ldr	r2, [r7, #20]
 80128fe:	0151      	lsls	r1, r2, #5
 8012900:	69ba      	ldr	r2, [r7, #24]
 8012902:	440a      	add	r2, r1
 8012904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801290c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	015a      	lsls	r2, r3, #5
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	4413      	add	r3, r2
 8012916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	697a      	ldr	r2, [r7, #20]
 801291e:	0151      	lsls	r1, r2, #5
 8012920:	69ba      	ldr	r2, [r7, #24]
 8012922:	440a      	add	r2, r1
 8012924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801292c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	3301      	adds	r3, #1
 8012932:	61fb      	str	r3, [r7, #28]
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801293a:	d81d      	bhi.n	8012978 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	015a      	lsls	r2, r3, #5
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	4413      	add	r3, r2
 8012944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801294e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012952:	d0ec      	beq.n	801292e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012954:	e080      	b.n	8012a58 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	015a      	lsls	r2, r3, #5
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	4413      	add	r3, r2
 801295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	697a      	ldr	r2, [r7, #20]
 8012966:	0151      	lsls	r1, r2, #5
 8012968:	69ba      	ldr	r2, [r7, #24]
 801296a:	440a      	add	r2, r1
 801296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012974:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012976:	e06f      	b.n	8012a58 <USB_HC_Halt+0x22a>
            break;
 8012978:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801297a:	e06d      	b.n	8012a58 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	015a      	lsls	r2, r3, #5
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	4413      	add	r3, r2
 8012984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	0151      	lsls	r1, r2, #5
 801298e:	69ba      	ldr	r2, [r7, #24]
 8012990:	440a      	add	r2, r1
 8012992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801299a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80129a2:	691b      	ldr	r3, [r3, #16]
 80129a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d143      	bne.n	8012a34 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	015a      	lsls	r2, r3, #5
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	4413      	add	r3, r2
 80129b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	697a      	ldr	r2, [r7, #20]
 80129bc:	0151      	lsls	r1, r2, #5
 80129be:	69ba      	ldr	r2, [r7, #24]
 80129c0:	440a      	add	r2, r1
 80129c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80129c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	015a      	lsls	r2, r3, #5
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	4413      	add	r3, r2
 80129d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	0151      	lsls	r1, r2, #5
 80129de:	69ba      	ldr	r2, [r7, #24]
 80129e0:	440a      	add	r2, r1
 80129e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80129e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80129ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	015a      	lsls	r2, r3, #5
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	4413      	add	r3, r2
 80129f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	697a      	ldr	r2, [r7, #20]
 80129fc:	0151      	lsls	r1, r2, #5
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	440a      	add	r2, r1
 8012a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012a0a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	61fb      	str	r3, [r7, #28]
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a18:	d81d      	bhi.n	8012a56 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	015a      	lsls	r2, r3, #5
 8012a1e:	69bb      	ldr	r3, [r7, #24]
 8012a20:	4413      	add	r3, r2
 8012a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a30:	d0ec      	beq.n	8012a0c <USB_HC_Halt+0x1de>
 8012a32:	e011      	b.n	8012a58 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	015a      	lsls	r2, r3, #5
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	697a      	ldr	r2, [r7, #20]
 8012a44:	0151      	lsls	r1, r2, #5
 8012a46:	69ba      	ldr	r2, [r7, #24]
 8012a48:	440a      	add	r2, r1
 8012a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	e000      	b.n	8012a58 <USB_HC_Halt+0x22a>
          break;
 8012a56:	bf00      	nop
    }
  }

  return HAL_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3724      	adds	r7, #36	; 0x24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr
	...

08012a68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012a78:	78fb      	ldrb	r3, [r7, #3]
 8012a7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	04da      	lsls	r2, r3, #19
 8012a84:	4b15      	ldr	r3, [pc, #84]	; (8012adc <USB_DoPing+0x74>)
 8012a86:	4013      	ands	r3, r2
 8012a88:	693a      	ldr	r2, [r7, #16]
 8012a8a:	0151      	lsls	r1, r2, #5
 8012a8c:	697a      	ldr	r2, [r7, #20]
 8012a8e:	440a      	add	r2, r1
 8012a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	015a      	lsls	r2, r3, #5
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012ab0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012ab8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	015a      	lsls	r2, r3, #5
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	371c      	adds	r7, #28
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	1ff80000 	.word	0x1ff80000

08012ae0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012aec:	2300      	movs	r3, #0
 8012aee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff f98e 	bl	8011e12 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012af6:	2110      	movs	r1, #16
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7ff f9c5 	bl	8011e88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff f9e8 	bl	8011ed4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012b04:	2300      	movs	r3, #0
 8012b06:	613b      	str	r3, [r7, #16]
 8012b08:	e01f      	b.n	8012b4a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	015a      	lsls	r2, r3, #5
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	4413      	add	r3, r2
 8012b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012b30:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	015a      	lsls	r2, r3, #5
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	4413      	add	r3, r2
 8012b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b3e:	461a      	mov	r2, r3
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	3301      	adds	r3, #1
 8012b48:	613b      	str	r3, [r7, #16]
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	2b0f      	cmp	r3, #15
 8012b4e:	d9dc      	bls.n	8012b0a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012b50:	2300      	movs	r3, #0
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	e034      	b.n	8012bc0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	015a      	lsls	r2, r3, #5
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012b74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012b7c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	015a      	lsls	r2, r3, #5
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	4413      	add	r3, r2
 8012b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	3301      	adds	r3, #1
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012b9c:	d80c      	bhi.n	8012bb8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	015a      	lsls	r2, r3, #5
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bb4:	d0ec      	beq.n	8012b90 <USB_StopHost+0xb0>
 8012bb6:	e000      	b.n	8012bba <USB_StopHost+0xda>
        break;
 8012bb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	613b      	str	r3, [r7, #16]
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	2b0f      	cmp	r3, #15
 8012bc4:	d9c7      	bls.n	8012b56 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bcc:	461a      	mov	r2, r3
 8012bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff f907 	bl	8011df0 <USB_EnableGlobalInt>

  return HAL_OK;
 8012be2:	2300      	movs	r3, #0
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3718      	adds	r7, #24
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012bf0:	4904      	ldr	r1, [pc, #16]	; (8012c04 <MX_FATFS_Init+0x18>)
 8012bf2:	4805      	ldr	r0, [pc, #20]	; (8012c08 <MX_FATFS_Init+0x1c>)
 8012bf4:	f002 fbf0 	bl	80153d8 <FATFS_LinkDriver>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	4b03      	ldr	r3, [pc, #12]	; (8012c0c <MX_FATFS_Init+0x20>)
 8012bfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012c00:	bf00      	nop
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	2004a270 	.word	0x2004a270
 8012c08:	0801d1f0 	.word	0x0801d1f0
 8012c0c:	2004a26c 	.word	0x2004a26c

08012c10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012c16:	2300      	movs	r3, #0
 8012c18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012c1a:	f000 f87b 	bl	8012d14 <BSP_SD_IsDetected>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d001      	beq.n	8012c28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012c24:	2302      	movs	r3, #2
 8012c26:	e012      	b.n	8012c4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012c28:	480b      	ldr	r0, [pc, #44]	; (8012c58 <BSP_SD_Init+0x48>)
 8012c2a:	f7fb fae4 	bl	800e1f6 <HAL_SD_Init>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d109      	bne.n	8012c4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012c3c:	4806      	ldr	r0, [pc, #24]	; (8012c58 <BSP_SD_Init+0x48>)
 8012c3e:	f7fb ff33 	bl	800eaa8 <HAL_SD_ConfigWideBusOperation>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	2000a090 	.word	0x2000a090

08012c5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	68ba      	ldr	r2, [r7, #8]
 8012c70:	68f9      	ldr	r1, [r7, #12]
 8012c72:	4806      	ldr	r0, [pc, #24]	; (8012c8c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012c74:	f7fb fb76 	bl	800e364 <HAL_SD_ReadBlocks_DMA>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d001      	beq.n	8012c82 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3718      	adds	r7, #24
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	2000a090 	.word	0x2000a090

08012c90 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b086      	sub	sp, #24
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	68ba      	ldr	r2, [r7, #8]
 8012ca4:	68f9      	ldr	r1, [r7, #12]
 8012ca6:	4806      	ldr	r0, [pc, #24]	; (8012cc0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012ca8:	f7fb fc3e 	bl	800e528 <HAL_SD_WriteBlocks_DMA>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d001      	beq.n	8012cb6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3718      	adds	r7, #24
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	2000a090 	.word	0x2000a090

08012cc4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012cc8:	4805      	ldr	r0, [pc, #20]	; (8012ce0 <BSP_SD_GetCardState+0x1c>)
 8012cca:	f7fb ff87 	bl	800ebdc <HAL_SD_GetCardState>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2b04      	cmp	r3, #4
 8012cd2:	bf14      	ite	ne
 8012cd4:	2301      	movne	r3, #1
 8012cd6:	2300      	moveq	r3, #0
 8012cd8:	b2db      	uxtb	r3, r3
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	2000a090 	.word	0x2000a090

08012ce4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012cec:	6879      	ldr	r1, [r7, #4]
 8012cee:	4803      	ldr	r0, [pc, #12]	; (8012cfc <BSP_SD_GetCardInfo+0x18>)
 8012cf0:	f7fb feae 	bl	800ea50 <HAL_SD_GetCardInfo>
}
 8012cf4:	bf00      	nop
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	2000a090 	.word	0x2000a090

08012d00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012d08:	f000 f9b2 	bl	8013070 <BSP_SD_ReadCpltCallback>
}
 8012d0c:	bf00      	nop
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012d1e:	f000 f80b 	bl	8012d38 <BSP_PlatformIsDetected>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d101      	bne.n	8012d2c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	b2db      	uxtb	r3, r3
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3708      	adds	r7, #8
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d46:	4806      	ldr	r0, [pc, #24]	; (8012d60 <BSP_PlatformIsDetected+0x28>)
 8012d48:	f7f5 fa4c 	bl	80081e4 <HAL_GPIO_ReadPin>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d001      	beq.n	8012d56 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012d52:	2300      	movs	r3, #0
 8012d54:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012d56:	79fb      	ldrb	r3, [r7, #7]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	40020800 	.word	0x40020800

08012d64 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012d6c:	f002 fb80 	bl	8015470 <osKernelSysTick>
 8012d70:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012d72:	e006      	b.n	8012d82 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012d74:	f7ff ffa6 	bl	8012cc4 <BSP_SD_GetCardState>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e009      	b.n	8012d96 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012d82:	f002 fb75 	bl	8015470 <osKernelSysTick>
 8012d86:	4602      	mov	r2, r0
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d8f0      	bhi.n	8012d74 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
	...

08012da0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	4603      	mov	r3, r0
 8012da8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012daa:	4b0b      	ldr	r3, [pc, #44]	; (8012dd8 <SD_CheckStatus+0x38>)
 8012dac:	2201      	movs	r2, #1
 8012dae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012db0:	f7ff ff88 	bl	8012cc4 <BSP_SD_GetCardState>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d107      	bne.n	8012dca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012dba:	4b07      	ldr	r3, [pc, #28]	; (8012dd8 <SD_CheckStatus+0x38>)
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	f023 0301 	bic.w	r3, r3, #1
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	4b04      	ldr	r3, [pc, #16]	; (8012dd8 <SD_CheckStatus+0x38>)
 8012dc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012dca:	4b03      	ldr	r3, [pc, #12]	; (8012dd8 <SD_CheckStatus+0x38>)
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	b2db      	uxtb	r3, r3
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	20000029 	.word	0x20000029

08012ddc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012ddc:	b590      	push	{r4, r7, lr}
 8012dde:	b087      	sub	sp, #28
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012de6:	4b20      	ldr	r3, [pc, #128]	; (8012e68 <SD_initialize+0x8c>)
 8012de8:	2201      	movs	r2, #1
 8012dea:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012dec:	f002 fb34 	bl	8015458 <osKernelRunning>
 8012df0:	4603      	mov	r3, r0
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d030      	beq.n	8012e58 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012df6:	f7ff ff0b 	bl	8012c10 <BSP_SD_Init>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d107      	bne.n	8012e10 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012e00:	79fb      	ldrb	r3, [r7, #7]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7ff ffcc 	bl	8012da0 <SD_CheckStatus>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	4b16      	ldr	r3, [pc, #88]	; (8012e68 <SD_initialize+0x8c>)
 8012e0e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012e10:	4b15      	ldr	r3, [pc, #84]	; (8012e68 <SD_initialize+0x8c>)
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d01e      	beq.n	8012e58 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8012e1a:	4b14      	ldr	r3, [pc, #80]	; (8012e6c <SD_initialize+0x90>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d10e      	bne.n	8012e40 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012e22:	4b13      	ldr	r3, [pc, #76]	; (8012e70 <SD_initialize+0x94>)
 8012e24:	f107 0408 	add.w	r4, r7, #8
 8012e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012e2e:	f107 0308 	add.w	r3, r7, #8
 8012e32:	2100      	movs	r1, #0
 8012e34:	4618      	mov	r0, r3
 8012e36:	f002 fc17 	bl	8015668 <osMessageCreate>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	4a0b      	ldr	r2, [pc, #44]	; (8012e6c <SD_initialize+0x90>)
 8012e3e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012e40:	4b0a      	ldr	r3, [pc, #40]	; (8012e6c <SD_initialize+0x90>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d107      	bne.n	8012e58 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8012e48:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <SD_initialize+0x8c>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	f043 0301 	orr.w	r3, r3, #1
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	4b04      	ldr	r3, [pc, #16]	; (8012e68 <SD_initialize+0x8c>)
 8012e56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012e58:	4b03      	ldr	r3, [pc, #12]	; (8012e68 <SD_initialize+0x8c>)
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	b2db      	uxtb	r3, r3
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	371c      	adds	r7, #28
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd90      	pop	{r4, r7, pc}
 8012e66:	bf00      	nop
 8012e68:	20000029 	.word	0x20000029
 8012e6c:	20000390 	.word	0x20000390
 8012e70:	0801b250 	.word	0x0801b250

08012e74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ff ff8d 	bl	8012da0 <SD_CheckStatus>
 8012e86:	4603      	mov	r3, r0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b08a      	sub	sp, #40	; 0x28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60b9      	str	r1, [r7, #8]
 8012e98:	607a      	str	r2, [r7, #4]
 8012e9a:	603b      	str	r3, [r7, #0]
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012ea6:	f247 5030 	movw	r0, #30000	; 0x7530
 8012eaa:	f7ff ff5b 	bl	8012d64 <SD_CheckStatusWithTimeout>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	da02      	bge.n	8012eba <SD_read+0x2a>
  {
    return res;
 8012eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eb8:	e032      	b.n	8012f20 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012eba:	683a      	ldr	r2, [r7, #0]
 8012ebc:	6879      	ldr	r1, [r7, #4]
 8012ebe:	68b8      	ldr	r0, [r7, #8]
 8012ec0:	f7ff fecc 	bl	8012c5c <BSP_SD_ReadBlocks_DMA>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8012eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d124      	bne.n	8012f1c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012ed2:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <SD_read+0x98>)
 8012ed4:	6819      	ldr	r1, [r3, #0]
 8012ed6:	f107 0314 	add.w	r3, r7, #20
 8012eda:	f247 5230 	movw	r2, #30000	; 0x7530
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f002 fc2a 	bl	8015738 <osMessageGet>

    if (event.status == osEventMessage)
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	2b10      	cmp	r3, #16
 8012ee8:	d118      	bne.n	8012f1c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d115      	bne.n	8012f1c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012ef0:	f002 fabe 	bl	8015470 <osKernelSysTick>
 8012ef4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012ef6:	e008      	b.n	8012f0a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012ef8:	f7ff fee4 	bl	8012cc4 <BSP_SD_GetCardState>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d103      	bne.n	8012f0a <SD_read+0x7a>
              {
                res = RES_OK;
 8012f02:	2300      	movs	r3, #0
 8012f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012f08:	e008      	b.n	8012f1c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012f0a:	f002 fab1 	bl	8015470 <osKernelSysTick>
 8012f0e:	4602      	mov	r2, r0
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	f247 522f 	movw	r2, #29999	; 0x752f
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d9ed      	bls.n	8012ef8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3728      	adds	r7, #40	; 0x28
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	20000390 	.word	0x20000390

08012f2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b08a      	sub	sp, #40	; 0x28
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60b9      	str	r1, [r7, #8]
 8012f34:	607a      	str	r2, [r7, #4]
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	4603      	mov	r3, r0
 8012f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012f42:	f247 5030 	movw	r0, #30000	; 0x7530
 8012f46:	f7ff ff0d 	bl	8012d64 <SD_CheckStatusWithTimeout>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	da02      	bge.n	8012f56 <SD_write+0x2a>
  {
    return res;
 8012f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f54:	e02e      	b.n	8012fb4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012f56:	683a      	ldr	r2, [r7, #0]
 8012f58:	6879      	ldr	r1, [r7, #4]
 8012f5a:	68b8      	ldr	r0, [r7, #8]
 8012f5c:	f7ff fe98 	bl	8012c90 <BSP_SD_WriteBlocks_DMA>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d124      	bne.n	8012fb0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012f66:	4b15      	ldr	r3, [pc, #84]	; (8012fbc <SD_write+0x90>)
 8012f68:	6819      	ldr	r1, [r3, #0]
 8012f6a:	f107 0314 	add.w	r3, r7, #20
 8012f6e:	f247 5230 	movw	r2, #30000	; 0x7530
 8012f72:	4618      	mov	r0, r3
 8012f74:	f002 fbe0 	bl	8015738 <osMessageGet>

    if (event.status == osEventMessage)
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	2b10      	cmp	r3, #16
 8012f7c:	d118      	bne.n	8012fb0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d115      	bne.n	8012fb0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012f84:	f002 fa74 	bl	8015470 <osKernelSysTick>
 8012f88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012f8a:	e008      	b.n	8012f9e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012f8c:	f7ff fe9a 	bl	8012cc4 <BSP_SD_GetCardState>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d103      	bne.n	8012f9e <SD_write+0x72>
          {
            res = RES_OK;
 8012f96:	2300      	movs	r3, #0
 8012f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012f9c:	e008      	b.n	8012fb0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012f9e:	f002 fa67 	bl	8015470 <osKernelSysTick>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	f247 522f 	movw	r2, #29999	; 0x752f
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d9ed      	bls.n	8012f8c <SD_write+0x60>
    }

  }
#endif

  return res;
 8012fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3728      	adds	r7, #40	; 0x28
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	20000390 	.word	0x20000390

08012fc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b08c      	sub	sp, #48	; 0x30
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	603a      	str	r2, [r7, #0]
 8012fca:	71fb      	strb	r3, [r7, #7]
 8012fcc:	460b      	mov	r3, r1
 8012fce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012fd6:	4b25      	ldr	r3, [pc, #148]	; (801306c <SD_ioctl+0xac>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	f003 0301 	and.w	r3, r3, #1
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <SD_ioctl+0x28>
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	e03c      	b.n	8013062 <SD_ioctl+0xa2>

  switch (cmd)
 8012fe8:	79bb      	ldrb	r3, [r7, #6]
 8012fea:	2b03      	cmp	r3, #3
 8012fec:	d834      	bhi.n	8013058 <SD_ioctl+0x98>
 8012fee:	a201      	add	r2, pc, #4	; (adr r2, 8012ff4 <SD_ioctl+0x34>)
 8012ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff4:	08013005 	.word	0x08013005
 8012ff8:	0801300d 	.word	0x0801300d
 8012ffc:	08013025 	.word	0x08013025
 8013000:	0801303f 	.word	0x0801303f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013004:	2300      	movs	r3, #0
 8013006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801300a:	e028      	b.n	801305e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801300c:	f107 030c 	add.w	r3, r7, #12
 8013010:	4618      	mov	r0, r3
 8013012:	f7ff fe67 	bl	8012ce4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801301c:	2300      	movs	r3, #0
 801301e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013022:	e01c      	b.n	801305e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013024:	f107 030c 	add.w	r3, r7, #12
 8013028:	4618      	mov	r0, r3
 801302a:	f7ff fe5b 	bl	8012ce4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013030:	b29a      	uxth	r2, r3
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013036:	2300      	movs	r3, #0
 8013038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801303c:	e00f      	b.n	801305e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801303e:	f107 030c 	add.w	r3, r7, #12
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff fe4e 	bl	8012ce4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304a:	0a5a      	lsrs	r2, r3, #9
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013050:	2300      	movs	r3, #0
 8013052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013056:	e002      	b.n	801305e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013058:	2304      	movs	r3, #4
 801305a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801305e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013062:	4618      	mov	r0, r3
 8013064:	3730      	adds	r7, #48	; 0x30
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	20000029 	.word	0x20000029

08013070 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8013074:	4b04      	ldr	r3, [pc, #16]	; (8013088 <BSP_SD_ReadCpltCallback+0x18>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2200      	movs	r2, #0
 801307a:	2101      	movs	r1, #1
 801307c:	4618      	mov	r0, r3
 801307e:	f002 fb1b 	bl	80156b8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8013082:	bf00      	nop
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	20000390 	.word	0x20000390

0801308c <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 801308c:	b480      	push	{r7}
 801308e:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8013090:	bf00      	nop
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr

0801309a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801309a:	b590      	push	{r4, r7, lr}
 801309c:	b089      	sub	sp, #36	; 0x24
 801309e:	af04      	add	r7, sp, #16
 80130a0:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80130a2:	2301      	movs	r3, #1
 80130a4:	2202      	movs	r2, #2
 80130a6:	2102      	movs	r1, #2
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 fcb9 	bl	8013a20 <USBH_FindInterface>
 80130ae:	4603      	mov	r3, r0
 80130b0:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80130b2:	7bfb      	ldrb	r3, [r7, #15]
 80130b4:	2bff      	cmp	r3, #255	; 0xff
 80130b6:	d002      	beq.n	80130be <USBH_CDC_InterfaceInit+0x24>
 80130b8:	7bfb      	ldrb	r3, [r7, #15]
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d901      	bls.n	80130c2 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80130be:	2302      	movs	r3, #2
 80130c0:	e13d      	b.n	801333e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80130c2:	7bfb      	ldrb	r3, [r7, #15]
 80130c4:	4619      	mov	r1, r3
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f000 fc8e 	bl	80139e8 <USBH_SelectInterface>
 80130cc:	4603      	mov	r3, r0
 80130ce:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80130d0:	7bbb      	ldrb	r3, [r7, #14]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d001      	beq.n	80130da <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80130d6:	2302      	movs	r3, #2
 80130d8:	e131      	b.n	801333e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80130e0:	2050      	movs	r0, #80	; 0x50
 80130e2:	f006 fb33 	bl	801974c <malloc>
 80130e6:	4603      	mov	r3, r0
 80130e8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130f0:	69db      	ldr	r3, [r3, #28]
 80130f2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80130fa:	2302      	movs	r3, #2
 80130fc:	e11f      	b.n	801333e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80130fe:	2250      	movs	r2, #80	; 0x50
 8013100:	2100      	movs	r1, #0
 8013102:	68b8      	ldr	r0, [r7, #8]
 8013104:	f006 fb40 	bl	8019788 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013108:	7bfb      	ldrb	r3, [r7, #15]
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	211a      	movs	r1, #26
 801310e:	fb01 f303 	mul.w	r3, r1, r3
 8013112:	4413      	add	r3, r2
 8013114:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	b25b      	sxtb	r3, r3
 801311c:	2b00      	cmp	r3, #0
 801311e:	da15      	bge.n	801314c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013120:	7bfb      	ldrb	r3, [r7, #15]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	211a      	movs	r1, #26
 8013126:	fb01 f303 	mul.w	r3, r1, r3
 801312a:	4413      	add	r3, r2
 801312c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013130:	781a      	ldrb	r2, [r3, #0]
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013136:	7bfb      	ldrb	r3, [r7, #15]
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	211a      	movs	r1, #26
 801313c:	fb01 f303 	mul.w	r3, r1, r3
 8013140:	4413      	add	r3, r2
 8013142:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013146:	881a      	ldrh	r2, [r3, #0]
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	785b      	ldrb	r3, [r3, #1]
 8013150:	4619      	mov	r1, r3
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f002 f891 	bl	801527a <USBH_AllocPipe>
 8013158:	4603      	mov	r3, r0
 801315a:	461a      	mov	r2, r3
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	7819      	ldrb	r1, [r3, #0]
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	7858      	ldrb	r0, [r3, #1]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013174:	68ba      	ldr	r2, [r7, #8]
 8013176:	8952      	ldrh	r2, [r2, #10]
 8013178:	9202      	str	r2, [sp, #8]
 801317a:	2203      	movs	r2, #3
 801317c:	9201      	str	r2, [sp, #4]
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	4623      	mov	r3, r4
 8013182:	4602      	mov	r2, r0
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f002 f849 	bl	801521c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2200      	movs	r2, #0
 8013190:	4619      	mov	r1, r3
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f005 f93a 	bl	801840c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8013198:	2300      	movs	r3, #0
 801319a:	2200      	movs	r2, #0
 801319c:	210a      	movs	r1, #10
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 fc3e 	bl	8013a20 <USBH_FindInterface>
 80131a4:	4603      	mov	r3, r0
 80131a6:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80131a8:	7bfb      	ldrb	r3, [r7, #15]
 80131aa:	2bff      	cmp	r3, #255	; 0xff
 80131ac:	d002      	beq.n	80131b4 <USBH_CDC_InterfaceInit+0x11a>
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d901      	bls.n	80131b8 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80131b4:	2302      	movs	r3, #2
 80131b6:	e0c2      	b.n	801333e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80131b8:	7bfb      	ldrb	r3, [r7, #15]
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	211a      	movs	r1, #26
 80131be:	fb01 f303 	mul.w	r3, r1, r3
 80131c2:	4413      	add	r3, r2
 80131c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	b25b      	sxtb	r3, r3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	da16      	bge.n	80131fe <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	211a      	movs	r1, #26
 80131d6:	fb01 f303 	mul.w	r3, r1, r3
 80131da:	4413      	add	r3, r2
 80131dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80131e0:	781a      	ldrb	r2, [r3, #0]
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80131e6:	7bfb      	ldrb	r3, [r7, #15]
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	211a      	movs	r1, #26
 80131ec:	fb01 f303 	mul.w	r3, r1, r3
 80131f0:	4413      	add	r3, r2
 80131f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80131f6:	881a      	ldrh	r2, [r3, #0]
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	835a      	strh	r2, [r3, #26]
 80131fc:	e015      	b.n	801322a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80131fe:	7bfb      	ldrb	r3, [r7, #15]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	211a      	movs	r1, #26
 8013204:	fb01 f303 	mul.w	r3, r1, r3
 8013208:	4413      	add	r3, r2
 801320a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801320e:	781a      	ldrb	r2, [r3, #0]
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013214:	7bfb      	ldrb	r3, [r7, #15]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	211a      	movs	r1, #26
 801321a:	fb01 f303 	mul.w	r3, r1, r3
 801321e:	4413      	add	r3, r2
 8013220:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8013224:	881a      	ldrh	r2, [r3, #0]
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 801322a:	7bfb      	ldrb	r3, [r7, #15]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	211a      	movs	r1, #26
 8013230:	fb01 f303 	mul.w	r3, r1, r3
 8013234:	4413      	add	r3, r2
 8013236:	f203 3356 	addw	r3, r3, #854	; 0x356
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	b25b      	sxtb	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	da16      	bge.n	8013270 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013242:	7bfb      	ldrb	r3, [r7, #15]
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	211a      	movs	r1, #26
 8013248:	fb01 f303 	mul.w	r3, r1, r3
 801324c:	4413      	add	r3, r2
 801324e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013252:	781a      	ldrb	r2, [r3, #0]
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013258:	7bfb      	ldrb	r3, [r7, #15]
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	211a      	movs	r1, #26
 801325e:	fb01 f303 	mul.w	r3, r1, r3
 8013262:	4413      	add	r3, r2
 8013264:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013268:	881a      	ldrh	r2, [r3, #0]
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	835a      	strh	r2, [r3, #26]
 801326e:	e015      	b.n	801329c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	211a      	movs	r1, #26
 8013276:	fb01 f303 	mul.w	r3, r1, r3
 801327a:	4413      	add	r3, r2
 801327c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013280:	781a      	ldrb	r2, [r3, #0]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013286:	7bfb      	ldrb	r3, [r7, #15]
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	211a      	movs	r1, #26
 801328c:	fb01 f303 	mul.w	r3, r1, r3
 8013290:	4413      	add	r3, r2
 8013292:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013296:	881a      	ldrh	r2, [r3, #0]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	7b9b      	ldrb	r3, [r3, #14]
 80132a0:	4619      	mov	r1, r3
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f001 ffe9 	bl	801527a <USBH_AllocPipe>
 80132a8:	4603      	mov	r3, r0
 80132aa:	461a      	mov	r2, r3
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	7bdb      	ldrb	r3, [r3, #15]
 80132b4:	4619      	mov	r1, r3
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f001 ffdf 	bl	801527a <USBH_AllocPipe>
 80132bc:	4603      	mov	r3, r0
 80132be:	461a      	mov	r2, r3
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	7b59      	ldrb	r1, [r3, #13]
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	7b98      	ldrb	r0, [r3, #14]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80132d8:	68ba      	ldr	r2, [r7, #8]
 80132da:	8b12      	ldrh	r2, [r2, #24]
 80132dc:	9202      	str	r2, [sp, #8]
 80132de:	2202      	movs	r2, #2
 80132e0:	9201      	str	r2, [sp, #4]
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	4623      	mov	r3, r4
 80132e6:	4602      	mov	r2, r0
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f001 ff97 	bl	801521c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	7b19      	ldrb	r1, [r3, #12]
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	7bd8      	ldrb	r0, [r3, #15]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013302:	68ba      	ldr	r2, [r7, #8]
 8013304:	8b52      	ldrh	r2, [r2, #26]
 8013306:	9202      	str	r2, [sp, #8]
 8013308:	2202      	movs	r2, #2
 801330a:	9201      	str	r2, [sp, #4]
 801330c:	9300      	str	r3, [sp, #0]
 801330e:	4623      	mov	r3, r4
 8013310:	4602      	mov	r2, r0
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f001 ff82 	bl	801521c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2200      	movs	r2, #0
 801331c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	7b5b      	ldrb	r3, [r3, #13]
 8013324:	2200      	movs	r2, #0
 8013326:	4619      	mov	r1, r3
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f005 f86f 	bl	801840c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	7b1b      	ldrb	r3, [r3, #12]
 8013332:	2200      	movs	r2, #0
 8013334:	4619      	mov	r1, r3
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f005 f868 	bl	801840c <USBH_LL_SetToggle>

  return USBH_OK;
 801333c:	2300      	movs	r3, #0
}
 801333e:	4618      	mov	r0, r3
 8013340:	3714      	adds	r7, #20
 8013342:	46bd      	mov	sp, r7
 8013344:	bd90      	pop	{r4, r7, pc}

08013346 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8013346:	b580      	push	{r7, lr}
 8013348:	b084      	sub	sp, #16
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013354:	69db      	ldr	r3, [r3, #28]
 8013356:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d00e      	beq.n	801337e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	4619      	mov	r1, r3
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f001 ff77 	bl	801525a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	4619      	mov	r1, r3
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f001 ffa2 	bl	80152bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	7b1b      	ldrb	r3, [r3, #12]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00e      	beq.n	80133a4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	7b1b      	ldrb	r3, [r3, #12]
 801338a:	4619      	mov	r1, r3
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f001 ff64 	bl	801525a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	7b1b      	ldrb	r3, [r3, #12]
 8013396:	4619      	mov	r1, r3
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f001 ff8f 	bl	80152bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2200      	movs	r2, #0
 80133a2:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	7b5b      	ldrb	r3, [r3, #13]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00e      	beq.n	80133ca <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	7b5b      	ldrb	r3, [r3, #13]
 80133b0:	4619      	mov	r1, r3
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f001 ff51 	bl	801525a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	7b5b      	ldrb	r3, [r3, #13]
 80133bc:	4619      	mov	r1, r3
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f001 ff7c 	bl	80152bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2200      	movs	r2, #0
 80133c8:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133d0:	69db      	ldr	r3, [r3, #28]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00b      	beq.n	80133ee <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133dc:	69db      	ldr	r3, [r3, #28]
 80133de:	4618      	mov	r0, r3
 80133e0:	f006 f9bc 	bl	801975c <free>
    phost->pActiveClass->pData = 0U;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133ea:	2200      	movs	r2, #0
 80133ec:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80133ee:	2300      	movs	r3, #0
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013406:	69db      	ldr	r3, [r3, #28]
 8013408:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	3340      	adds	r3, #64	; 0x40
 801340e:	4619      	mov	r1, r3
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 f8b2 	bl	801357a <GetLineCoding>
 8013416:	4603      	mov	r3, r0
 8013418:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 801341a:	7afb      	ldrb	r3, [r7, #11]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d105      	bne.n	801342c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013426:	2102      	movs	r1, #2
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801342c:	7afb      	ldrb	r3, [r7, #11]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013440:	2301      	movs	r3, #1
 8013442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8013444:	2300      	movs	r3, #0
 8013446:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801344e:	69db      	ldr	r3, [r3, #28]
 8013450:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013458:	2b04      	cmp	r3, #4
 801345a:	d877      	bhi.n	801354c <USBH_CDC_Process+0x114>
 801345c:	a201      	add	r2, pc, #4	; (adr r2, 8013464 <USBH_CDC_Process+0x2c>)
 801345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013462:	bf00      	nop
 8013464:	08013479 	.word	0x08013479
 8013468:	0801347f 	.word	0x0801347f
 801346c:	080134af 	.word	0x080134af
 8013470:	08013523 	.word	0x08013523
 8013474:	08013531 	.word	0x08013531
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013478:	2300      	movs	r3, #0
 801347a:	73fb      	strb	r3, [r7, #15]
      break;
 801347c:	e06d      	b.n	801355a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 f897 	bl	80135b8 <SetLineCoding>
 801348a:	4603      	mov	r3, r0
 801348c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801348e:	7bbb      	ldrb	r3, [r7, #14]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d104      	bne.n	801349e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	2202      	movs	r2, #2
 8013498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801349c:	e058      	b.n	8013550 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801349e:	7bbb      	ldrb	r3, [r7, #14]
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	d055      	beq.n	8013550 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	2204      	movs	r2, #4
 80134a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80134ac:	e050      	b.n	8013550 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	3340      	adds	r3, #64	; 0x40
 80134b2:	4619      	mov	r1, r3
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f000 f860 	bl	801357a <GetLineCoding>
 80134ba:	4603      	mov	r3, r0
 80134bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80134be:	7bbb      	ldrb	r3, [r7, #14]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d126      	bne.n	8013512 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	2200      	movs	r2, #0
 80134c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134d6:	791b      	ldrb	r3, [r3, #4]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d13b      	bne.n	8013554 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d133      	bne.n	8013554 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d12b      	bne.n	8013554 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013504:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013506:	429a      	cmp	r2, r3
 8013508:	d124      	bne.n	8013554 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f000 f982 	bl	8013814 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013510:	e020      	b.n	8013554 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8013512:	7bbb      	ldrb	r3, [r7, #14]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d01d      	beq.n	8013554 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2204      	movs	r2, #4
 801351c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013520:	e018      	b.n	8013554 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 f867 	bl	80135f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 f8f6 	bl	801371a <CDC_ProcessReception>
      break;
 801352e:	e014      	b.n	801355a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8013530:	2100      	movs	r1, #0
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f001 f951 	bl	80147da <USBH_ClrFeature>
 8013538:	4603      	mov	r3, r0
 801353a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801353c:	7bbb      	ldrb	r3, [r7, #14]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d10a      	bne.n	8013558 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	2200      	movs	r2, #0
 8013546:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 801354a:	e005      	b.n	8013558 <USBH_CDC_Process+0x120>

    default:
      break;
 801354c:	bf00      	nop
 801354e:	e004      	b.n	801355a <USBH_CDC_Process+0x122>
      break;
 8013550:	bf00      	nop
 8013552:	e002      	b.n	801355a <USBH_CDC_Process+0x122>
      break;
 8013554:	bf00      	nop
 8013556:	e000      	b.n	801355a <USBH_CDC_Process+0x122>
      break;
 8013558:	bf00      	nop

  }

  return status;
 801355a:	7bfb      	ldrb	r3, [r7, #15]
}
 801355c:	4618      	mov	r0, r3
 801355e:	3710      	adds	r7, #16
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801356c:	2300      	movs	r3, #0
}
 801356e:	4618      	mov	r0, r3
 8013570:	370c      	adds	r7, #12
 8013572:	46bd      	mov	sp, r7
 8013574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013578:	4770      	bx	lr

0801357a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b082      	sub	sp, #8
 801357e:	af00      	add	r7, sp, #0
 8013580:	6078      	str	r0, [r7, #4]
 8013582:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	22a1      	movs	r2, #161	; 0xa1
 8013588:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2221      	movs	r2, #33	; 0x21
 801358e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2207      	movs	r2, #7
 80135a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2207      	movs	r2, #7
 80135a6:	4619      	mov	r1, r3
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f001 faf6 	bl	8014b9a <USBH_CtlReq>
 80135ae:	4603      	mov	r3, r0
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3708      	adds	r7, #8
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2221      	movs	r2, #33	; 0x21
 80135c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2220      	movs	r2, #32
 80135cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2200      	movs	r2, #0
 80135d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2200      	movs	r2, #0
 80135d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2207      	movs	r2, #7
 80135de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	2207      	movs	r2, #7
 80135e4:	4619      	mov	r1, r3
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f001 fad7 	bl	8014b9a <USBH_CtlReq>
 80135ec:	4603      	mov	r3, r0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3708      	adds	r7, #8
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b086      	sub	sp, #24
 80135fa:	af02      	add	r7, sp, #8
 80135fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013604:	69db      	ldr	r3, [r3, #28]
 8013606:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013608:	2300      	movs	r3, #0
 801360a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013612:	2b01      	cmp	r3, #1
 8013614:	d002      	beq.n	801361c <CDC_ProcessTransmission+0x26>
 8013616:	2b02      	cmp	r3, #2
 8013618:	d023      	beq.n	8013662 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 801361a:	e07a      	b.n	8013712 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013620:	68fa      	ldr	r2, [r7, #12]
 8013622:	8b12      	ldrh	r2, [r2, #24]
 8013624:	4293      	cmp	r3, r2
 8013626:	d90b      	bls.n	8013640 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	69d9      	ldr	r1, [r3, #28]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	8b1a      	ldrh	r2, [r3, #24]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	7b5b      	ldrb	r3, [r3, #13]
 8013634:	2001      	movs	r0, #1
 8013636:	9000      	str	r0, [sp, #0]
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f001 fdac 	bl	8015196 <USBH_BulkSendData>
 801363e:	e00b      	b.n	8013658 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8013648:	b29a      	uxth	r2, r3
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	7b5b      	ldrb	r3, [r3, #13]
 801364e:	2001      	movs	r0, #1
 8013650:	9000      	str	r0, [sp, #0]
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f001 fd9f 	bl	8015196 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	2202      	movs	r2, #2
 801365c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8013660:	e057      	b.n	8013712 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	7b5b      	ldrb	r3, [r3, #13]
 8013666:	4619      	mov	r1, r3
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f004 fea5 	bl	80183b8 <USBH_LL_GetURBState>
 801366e:	4603      	mov	r3, r0
 8013670:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8013672:	7afb      	ldrb	r3, [r7, #11]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d136      	bne.n	80136e6 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	8b12      	ldrh	r2, [r2, #24]
 8013680:	4293      	cmp	r3, r2
 8013682:	d90e      	bls.n	80136a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013688:	68fa      	ldr	r2, [r7, #12]
 801368a:	8b12      	ldrh	r2, [r2, #24]
 801368c:	1a9a      	subs	r2, r3, r2
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	69db      	ldr	r3, [r3, #28]
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	8b12      	ldrh	r2, [r2, #24]
 801369a:	441a      	add	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	61da      	str	r2, [r3, #28]
 80136a0:	e002      	b.n	80136a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2200      	movs	r2, #0
 80136a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d004      	beq.n	80136ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2201      	movs	r2, #1
 80136b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80136b8:	e006      	b.n	80136c8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 f892 	bl	80137ec <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2204      	movs	r2, #4
 80136cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80136dc:	2200      	movs	r2, #0
 80136de:	4619      	mov	r1, r3
 80136e0:	f001 ffea 	bl	80156b8 <osMessagePut>
      break;
 80136e4:	e014      	b.n	8013710 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80136e6:	7afb      	ldrb	r3, [r7, #11]
 80136e8:	2b02      	cmp	r3, #2
 80136ea:	d111      	bne.n	8013710 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2201      	movs	r2, #1
 80136f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2204      	movs	r2, #4
 80136f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013708:	2200      	movs	r2, #0
 801370a:	4619      	mov	r1, r3
 801370c:	f001 ffd4 	bl	80156b8 <osMessagePut>
      break;
 8013710:	bf00      	nop
  }
}
 8013712:	bf00      	nop
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b086      	sub	sp, #24
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013728:	69db      	ldr	r3, [r3, #28]
 801372a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801372c:	2300      	movs	r3, #0
 801372e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013736:	2b03      	cmp	r3, #3
 8013738:	d002      	beq.n	8013740 <CDC_ProcessReception+0x26>
 801373a:	2b04      	cmp	r3, #4
 801373c:	d00e      	beq.n	801375c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801373e:	e051      	b.n	80137e4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	6a19      	ldr	r1, [r3, #32]
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	8b5a      	ldrh	r2, [r3, #26]
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	7b1b      	ldrb	r3, [r3, #12]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f001 fd47 	bl	80151e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2204      	movs	r2, #4
 8013756:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801375a:	e043      	b.n	80137e4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	7b1b      	ldrb	r3, [r3, #12]
 8013760:	4619      	mov	r1, r3
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f004 fe28 	bl	80183b8 <USBH_LL_GetURBState>
 8013768:	4603      	mov	r3, r0
 801376a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 801376c:	7cfb      	ldrb	r3, [r7, #19]
 801376e:	2b01      	cmp	r3, #1
 8013770:	d137      	bne.n	80137e2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	7b1b      	ldrb	r3, [r3, #12]
 8013776:	4619      	mov	r1, r3
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f004 fd8b 	bl	8018294 <USBH_LL_GetLastXferSize>
 801377e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	429a      	cmp	r2, r3
 8013788:	d016      	beq.n	80137b8 <CDC_ProcessReception+0x9e>
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	8b5b      	ldrh	r3, [r3, #26]
 801378e:	461a      	mov	r2, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	4293      	cmp	r3, r2
 8013794:	d910      	bls.n	80137b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	1ad2      	subs	r2, r2, r3
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	6a1a      	ldr	r2, [r3, #32]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	441a      	add	r2, r3
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	2203      	movs	r2, #3
 80137b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80137b6:	e006      	b.n	80137c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	2200      	movs	r2, #0
 80137bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 f81d 	bl	8013800 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2204      	movs	r2, #4
 80137ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137da:	2200      	movs	r2, #0
 80137dc:	4619      	mov	r1, r3
 80137de:	f001 ff6b 	bl	80156b8 <osMessagePut>
      break;
 80137e2:	bf00      	nop
  }
}
 80137e4:	bf00      	nop
 80137e6:	3718      	adds	r7, #24
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80137f4:	bf00      	nop
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013808:	bf00      	nop
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801381c:	bf00      	nop
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8013828:	b5b0      	push	{r4, r5, r7, lr}
 801382a:	b090      	sub	sp, #64	; 0x40
 801382c:	af00      	add	r7, sp, #0
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	4613      	mov	r3, r2
 8013834:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d101      	bne.n	8013840 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801383c:	2302      	movs	r3, #2
 801383e:	e04d      	b.n	80138dc <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	79fa      	ldrb	r2, [r7, #7]
 8013844:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2200      	movs	r2, #0
 801384c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2200      	movs	r2, #0
 8013854:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f000 f847 	bl	80138ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2200      	movs	r2, #0
 8013862:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2200      	movs	r2, #0
 801386a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2200      	movs	r2, #0
 801387a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d003      	beq.n	801388c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	68ba      	ldr	r2, [r7, #8]
 8013888:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 801388c:	4b15      	ldr	r3, [pc, #84]	; (80138e4 <USBH_Init+0xbc>)
 801388e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8013892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8013898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801389c:	2100      	movs	r1, #0
 801389e:	4618      	mov	r0, r3
 80138a0:	f001 fee2 	bl	8015668 <osMessageCreate>
 80138a4:	4602      	mov	r2, r0
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80138ac:	4b0e      	ldr	r3, [pc, #56]	; (80138e8 <USBH_Init+0xc0>)
 80138ae:	f107 0414 	add.w	r4, r7, #20
 80138b2:	461d      	mov	r5, r3
 80138b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80138bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80138c0:	f107 0314 	add.w	r3, r7, #20
 80138c4:	68f9      	ldr	r1, [r7, #12]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f001 fde2 	bl	8015490 <osThreadCreate>
 80138cc:	4602      	mov	r2, r0
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80138d4:	68f8      	ldr	r0, [r7, #12]
 80138d6:	f004 fc29 	bl	801812c <USBH_LL_Init>

  return USBH_OK;
 80138da:	2300      	movs	r3, #0
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3740      	adds	r7, #64	; 0x40
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bdb0      	pop	{r4, r5, r7, pc}
 80138e4:	0801b270 	.word	0x0801b270
 80138e8:	0801b280 	.word	0x0801b280

080138ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80138ec:	b480      	push	{r7}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80138f4:	2300      	movs	r3, #0
 80138f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80138f8:	2300      	movs	r3, #0
 80138fa:	60fb      	str	r3, [r7, #12]
 80138fc:	e009      	b.n	8013912 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80138fe:	687a      	ldr	r2, [r7, #4]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	33e0      	adds	r3, #224	; 0xe0
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	4413      	add	r3, r2
 8013908:	2200      	movs	r2, #0
 801390a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	3301      	adds	r3, #1
 8013910:	60fb      	str	r3, [r7, #12]
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2b0e      	cmp	r3, #14
 8013916:	d9f2      	bls.n	80138fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013918:	2300      	movs	r3, #0
 801391a:	60fb      	str	r3, [r7, #12]
 801391c:	e009      	b.n	8013932 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	4413      	add	r3, r2
 8013924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013928:	2200      	movs	r2, #0
 801392a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	3301      	adds	r3, #1
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013938:	d3f1      	bcc.n	801391e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2200      	movs	r2, #0
 801393e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2200      	movs	r2, #0
 8013944:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2201      	movs	r2, #1
 801394a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2201      	movs	r2, #1
 8013958:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2240      	movs	r2, #64	; 0x40
 801395e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2201      	movs	r2, #1
 8013972:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2200      	movs	r2, #0
 801397a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr

08013994 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013994:	b480      	push	{r7}
 8013996:	b085      	sub	sp, #20
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801399e:	2300      	movs	r3, #0
 80139a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d016      	beq.n	80139d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d10e      	bne.n	80139d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80139b8:	1c59      	adds	r1, r3, #1
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	33de      	adds	r3, #222	; 0xde
 80139c4:	6839      	ldr	r1, [r7, #0]
 80139c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	73fb      	strb	r3, [r7, #15]
 80139ce:	e004      	b.n	80139da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80139d0:	2302      	movs	r3, #2
 80139d2:	73fb      	strb	r3, [r7, #15]
 80139d4:	e001      	b.n	80139da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80139d6:	2302      	movs	r3, #2
 80139d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80139da:	7bfb      	ldrb	r3, [r7, #15]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3714      	adds	r7, #20
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80139e8:	b480      	push	{r7}
 80139ea:	b085      	sub	sp, #20
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	460b      	mov	r3, r1
 80139f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80139fe:	78fa      	ldrb	r2, [r7, #3]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d204      	bcs.n	8013a0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	78fa      	ldrb	r2, [r7, #3]
 8013a08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8013a0c:	e001      	b.n	8013a12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013a0e:	2302      	movs	r3, #2
 8013a10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3714      	adds	r7, #20
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	4608      	mov	r0, r1
 8013a2a:	4611      	mov	r1, r2
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	4603      	mov	r3, r0
 8013a30:	70fb      	strb	r3, [r7, #3]
 8013a32:	460b      	mov	r3, r1
 8013a34:	70bb      	strb	r3, [r7, #2]
 8013a36:	4613      	mov	r3, r2
 8013a38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013a48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013a4a:	e025      	b.n	8013a98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013a4c:	7dfb      	ldrb	r3, [r7, #23]
 8013a4e:	221a      	movs	r2, #26
 8013a50:	fb02 f303 	mul.w	r3, r2, r3
 8013a54:	3308      	adds	r3, #8
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	4413      	add	r3, r2
 8013a5a:	3302      	adds	r3, #2
 8013a5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	795b      	ldrb	r3, [r3, #5]
 8013a62:	78fa      	ldrb	r2, [r7, #3]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d002      	beq.n	8013a6e <USBH_FindInterface+0x4e>
 8013a68:	78fb      	ldrb	r3, [r7, #3]
 8013a6a:	2bff      	cmp	r3, #255	; 0xff
 8013a6c:	d111      	bne.n	8013a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013a72:	78ba      	ldrb	r2, [r7, #2]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d002      	beq.n	8013a7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a78:	78bb      	ldrb	r3, [r7, #2]
 8013a7a:	2bff      	cmp	r3, #255	; 0xff
 8013a7c:	d109      	bne.n	8013a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a82:	787a      	ldrb	r2, [r7, #1]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d002      	beq.n	8013a8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013a88:	787b      	ldrb	r3, [r7, #1]
 8013a8a:	2bff      	cmp	r3, #255	; 0xff
 8013a8c:	d101      	bne.n	8013a92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013a8e:	7dfb      	ldrb	r3, [r7, #23]
 8013a90:	e006      	b.n	8013aa0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013a92:	7dfb      	ldrb	r3, [r7, #23]
 8013a94:	3301      	adds	r3, #1
 8013a96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013a98:	7dfb      	ldrb	r3, [r7, #23]
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d9d6      	bls.n	8013a4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013a9e:	23ff      	movs	r3, #255	; 0xff
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	371c      	adds	r7, #28
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr

08013aac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f004 fb75 	bl	80181a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8013aba:	2101      	movs	r1, #1
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f004 fc8e 	bl	80183de <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013ac2:	2300      	movs	r3, #0
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3708      	adds	r7, #8
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b088      	sub	sp, #32
 8013ad0:	af04      	add	r7, sp, #16
 8013ad2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013ad4:	2302      	movs	r3, #2
 8013ad6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	d102      	bne.n	8013aee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2203      	movs	r2, #3
 8013aec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b0b      	cmp	r3, #11
 8013af6:	f200 823c 	bhi.w	8013f72 <USBH_Process+0x4a6>
 8013afa:	a201      	add	r2, pc, #4	; (adr r2, 8013b00 <USBH_Process+0x34>)
 8013afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b00:	08013b31 	.word	0x08013b31
 8013b04:	08013b7f 	.word	0x08013b7f
 8013b08:	08013c03 	.word	0x08013c03
 8013b0c:	08013ef1 	.word	0x08013ef1
 8013b10:	08013f73 	.word	0x08013f73
 8013b14:	08013cc3 	.word	0x08013cc3
 8013b18:	08013e7b 	.word	0x08013e7b
 8013b1c:	08013d15 	.word	0x08013d15
 8013b20:	08013d51 	.word	0x08013d51
 8013b24:	08013d8b 	.word	0x08013d8b
 8013b28:	08013dd3 	.word	0x08013dd3
 8013b2c:	08013ed9 	.word	0x08013ed9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	f000 821c 	beq.w	8013f76 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2201      	movs	r2, #1
 8013b42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013b44:	20c8      	movs	r0, #200	; 0xc8
 8013b46:	f004 fc91 	bl	801846c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f004 fb87 	bl	801825e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2201      	movs	r2, #1
 8013b64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013b74:	2200      	movs	r2, #0
 8013b76:	4619      	mov	r1, r3
 8013b78:	f001 fd9e 	bl	80156b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013b7c:	e1fb      	b.n	8013f76 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d107      	bne.n	8013b98 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2202      	movs	r2, #2
 8013b94:	701a      	strb	r2, [r3, #0]
 8013b96:	e025      	b.n	8013be4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013ba2:	d914      	bls.n	8013bce <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013baa:	3301      	adds	r3, #1
 8013bac:	b2da      	uxtb	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	d903      	bls.n	8013bc6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	220d      	movs	r2, #13
 8013bc2:	701a      	strb	r2, [r3, #0]
 8013bc4:	e00e      	b.n	8013be4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	701a      	strb	r2, [r3, #0]
 8013bcc:	e00a      	b.n	8013be4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013bd4:	f103 020a 	add.w	r2, r3, #10
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8013bde:	200a      	movs	r0, #10
 8013be0:	f004 fc44 	bl	801846c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2201      	movs	r2, #1
 8013be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	f001 fd5c 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013c00:	e1c0      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d005      	beq.n	8013c18 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013c12:	2104      	movs	r1, #4
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013c18:	2064      	movs	r0, #100	; 0x64
 8013c1a:	f004 fc27 	bl	801846c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f004 faf6 	bl	8018210 <USBH_LL_GetSpeed>
 8013c24:	4603      	mov	r3, r0
 8013c26:	461a      	mov	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2205      	movs	r2, #5
 8013c32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013c34:	2100      	movs	r1, #0
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f001 fb1f 	bl	801527a <USBH_AllocPipe>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	461a      	mov	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013c44:	2180      	movs	r1, #128	; 0x80
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f001 fb17 	bl	801527a <USBH_AllocPipe>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7919      	ldrb	r1, [r3, #4]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013c68:	b292      	uxth	r2, r2
 8013c6a:	9202      	str	r2, [sp, #8]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	9201      	str	r2, [sp, #4]
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	4603      	mov	r3, r0
 8013c74:	2280      	movs	r2, #128	; 0x80
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f001 fad0 	bl	801521c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	7959      	ldrb	r1, [r3, #5]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013c8c:	687a      	ldr	r2, [r7, #4]
 8013c8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013c90:	b292      	uxth	r2, r2
 8013c92:	9202      	str	r2, [sp, #8]
 8013c94:	2200      	movs	r2, #0
 8013c96:	9201      	str	r2, [sp, #4]
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f001 fabc 	bl	801521c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013cb8:	2200      	movs	r2, #0
 8013cba:	4619      	mov	r1, r3
 8013cbc:	f001 fcfc 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013cc0:	e160      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f000 f964 	bl	8013f90 <USBH_HandleEnum>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8013ccc:	7bbb      	ldrb	r3, [r7, #14]
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	f040 8152 	bne.w	8013f7a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d103      	bne.n	8013cf0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2208      	movs	r2, #8
 8013cec:	701a      	strb	r2, [r3, #0]
 8013cee:	e002      	b.n	8013cf6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2207      	movs	r2, #7
 8013cf4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2205      	movs	r2, #5
 8013cfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	f001 fcd3 	bl	80156b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013d12:	e132      	b.n	8013f7a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f000 812f 	beq.w	8013f7e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013d26:	2101      	movs	r1, #1
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2208      	movs	r2, #8
 8013d30:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2205      	movs	r2, #5
 8013d36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d46:	2200      	movs	r2, #0
 8013d48:	4619      	mov	r1, r3
 8013d4a:	f001 fcb5 	bl	80156b8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8013d4e:	e116      	b.n	8013f7e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	4619      	mov	r1, r3
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 fcf6 	bl	801474c <USBH_SetCfg>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d102      	bne.n	8013d6c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2209      	movs	r2, #9
 8013d6a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d80:	2200      	movs	r2, #0
 8013d82:	4619      	mov	r1, r3
 8013d84:	f001 fc98 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013d88:	e0fc      	b.n	8013f84 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8013d90:	f003 0320 	and.w	r3, r3, #32
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00a      	beq.n	8013dae <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013d98:	2101      	movs	r1, #1
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f000 fcf9 	bl	8014792 <USBH_SetFeature>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d106      	bne.n	8013db4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	220a      	movs	r2, #10
 8013daa:	701a      	strb	r2, [r3, #0]
 8013dac:	e002      	b.n	8013db4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	220a      	movs	r2, #10
 8013db2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2201      	movs	r2, #1
 8013db8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4619      	mov	r1, r3
 8013dcc:	f001 fc74 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013dd0:	e0d8      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d03f      	beq.n	8013e5c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013de4:	2300      	movs	r3, #0
 8013de6:	73fb      	strb	r3, [r7, #15]
 8013de8:	e016      	b.n	8013e18 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013dea:	7bfa      	ldrb	r2, [r7, #15]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	32de      	adds	r2, #222	; 0xde
 8013df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013df4:	791a      	ldrb	r2, [r3, #4]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d108      	bne.n	8013e12 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013e00:	7bfa      	ldrb	r2, [r7, #15]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	32de      	adds	r2, #222	; 0xde
 8013e06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8013e10:	e005      	b.n	8013e1e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013e12:	7bfb      	ldrb	r3, [r7, #15]
 8013e14:	3301      	adds	r3, #1
 8013e16:	73fb      	strb	r3, [r7, #15]
 8013e18:	7bfb      	ldrb	r3, [r7, #15]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d0e5      	beq.n	8013dea <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d016      	beq.n	8013e56 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	4798      	blx	r3
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d109      	bne.n	8013e4e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2206      	movs	r2, #6
 8013e3e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013e46:	2103      	movs	r1, #3
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	4798      	blx	r3
 8013e4c:	e006      	b.n	8013e5c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	220d      	movs	r2, #13
 8013e52:	701a      	strb	r2, [r3, #0]
 8013e54:	e002      	b.n	8013e5c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	220d      	movs	r2, #13
 8013e5a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2205      	movs	r2, #5
 8013e60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013e70:	2200      	movs	r2, #0
 8013e72:	4619      	mov	r1, r3
 8013e74:	f001 fc20 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013e78:	e084      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d017      	beq.n	8013eb4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e8a:	691b      	ldr	r3, [r3, #16]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	4798      	blx	r3
 8013e90:	4603      	mov	r3, r0
 8013e92:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013e94:	7bbb      	ldrb	r3, [r7, #14]
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d103      	bne.n	8013ea4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	220b      	movs	r2, #11
 8013ea0:	701a      	strb	r2, [r3, #0]
 8013ea2:	e00a      	b.n	8013eba <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013ea4:	7bbb      	ldrb	r3, [r7, #14]
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	2b02      	cmp	r3, #2
 8013eaa:	d106      	bne.n	8013eba <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	220d      	movs	r2, #13
 8013eb0:	701a      	strb	r2, [r3, #0]
 8013eb2:	e002      	b.n	8013eba <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	220d      	movs	r2, #13
 8013eb8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2205      	movs	r2, #5
 8013ebe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013ece:	2200      	movs	r2, #0
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	f001 fbf1 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013ed6:	e055      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d04f      	beq.n	8013f82 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ee8:	695b      	ldr	r3, [r3, #20]
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	4798      	blx	r3
      }
      break;
 8013eee:	e048      	b.n	8013f82 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff fcf7 	bl	80138ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d009      	beq.n	8013f1c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d005      	beq.n	8013f32 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013f2c:	2105      	movs	r1, #5
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d107      	bne.n	8013f4e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7ff fdb0 	bl	8013aac <USBH_Start>
 8013f4c:	e002      	b.n	8013f54 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f004 f928 	bl	80181a4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f68:	2200      	movs	r2, #0
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	f001 fba4 	bl	80156b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013f70:	e008      	b.n	8013f84 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8013f72:	bf00      	nop
 8013f74:	e006      	b.n	8013f84 <USBH_Process+0x4b8>
      break;
 8013f76:	bf00      	nop
 8013f78:	e004      	b.n	8013f84 <USBH_Process+0x4b8>
      break;
 8013f7a:	bf00      	nop
 8013f7c:	e002      	b.n	8013f84 <USBH_Process+0x4b8>
    break;
 8013f7e:	bf00      	nop
 8013f80:	e000      	b.n	8013f84 <USBH_Process+0x4b8>
      break;
 8013f82:	bf00      	nop
  }
  return USBH_OK;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop

08013f90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b088      	sub	sp, #32
 8013f94:	af04      	add	r7, sp, #16
 8013f96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	785b      	ldrb	r3, [r3, #1]
 8013fa4:	2b07      	cmp	r3, #7
 8013fa6:	f200 8208 	bhi.w	80143ba <USBH_HandleEnum+0x42a>
 8013faa:	a201      	add	r2, pc, #4	; (adr r2, 8013fb0 <USBH_HandleEnum+0x20>)
 8013fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb0:	08013fd1 	.word	0x08013fd1
 8013fb4:	0801408f 	.word	0x0801408f
 8013fb8:	080140f9 	.word	0x080140f9
 8013fbc:	08014187 	.word	0x08014187
 8013fc0:	080141f1 	.word	0x080141f1
 8013fc4:	08014261 	.word	0x08014261
 8013fc8:	080142fd 	.word	0x080142fd
 8013fcc:	0801437b 	.word	0x0801437b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013fd0:	2108      	movs	r1, #8
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 faea 	bl	80145ac <USBH_Get_DevDesc>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013fdc:	7bbb      	ldrb	r3, [r7, #14]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d130      	bne.n	8014044 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	7919      	ldrb	r1, [r3, #4]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014006:	b292      	uxth	r2, r2
 8014008:	9202      	str	r2, [sp, #8]
 801400a:	2200      	movs	r2, #0
 801400c:	9201      	str	r2, [sp, #4]
 801400e:	9300      	str	r3, [sp, #0]
 8014010:	4603      	mov	r3, r0
 8014012:	2280      	movs	r2, #128	; 0x80
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f001 f901 	bl	801521c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	7959      	ldrb	r1, [r3, #5]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801402e:	b292      	uxth	r2, r2
 8014030:	9202      	str	r2, [sp, #8]
 8014032:	2200      	movs	r2, #0
 8014034:	9201      	str	r2, [sp, #4]
 8014036:	9300      	str	r3, [sp, #0]
 8014038:	4603      	mov	r3, r0
 801403a:	2200      	movs	r2, #0
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f001 f8ed 	bl	801521c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014042:	e1bc      	b.n	80143be <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014044:	7bbb      	ldrb	r3, [r7, #14]
 8014046:	2b03      	cmp	r3, #3
 8014048:	f040 81b9 	bne.w	80143be <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014052:	3301      	adds	r3, #1
 8014054:	b2da      	uxtb	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014062:	2b03      	cmp	r3, #3
 8014064:	d903      	bls.n	801406e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	220d      	movs	r2, #13
 801406a:	701a      	strb	r2, [r3, #0]
      break;
 801406c:	e1a7      	b.n	80143be <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	795b      	ldrb	r3, [r3, #5]
 8014072:	4619      	mov	r1, r3
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f001 f921 	bl	80152bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	791b      	ldrb	r3, [r3, #4]
 801407e:	4619      	mov	r1, r3
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f001 f91b 	bl	80152bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2200      	movs	r2, #0
 801408a:	701a      	strb	r2, [r3, #0]
      break;
 801408c:	e197      	b.n	80143be <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801408e:	2112      	movs	r1, #18
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f000 fa8b 	bl	80145ac <USBH_Get_DevDesc>
 8014096:	4603      	mov	r3, r0
 8014098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801409a:	7bbb      	ldrb	r3, [r7, #14]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d103      	bne.n	80140a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2202      	movs	r2, #2
 80140a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80140a6:	e18c      	b.n	80143c2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80140a8:	7bbb      	ldrb	r3, [r7, #14]
 80140aa:	2b03      	cmp	r3, #3
 80140ac:	f040 8189 	bne.w	80143c2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80140b6:	3301      	adds	r3, #1
 80140b8:	b2da      	uxtb	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80140c6:	2b03      	cmp	r3, #3
 80140c8:	d903      	bls.n	80140d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	220d      	movs	r2, #13
 80140ce:	701a      	strb	r2, [r3, #0]
      break;
 80140d0:	e177      	b.n	80143c2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	795b      	ldrb	r3, [r3, #5]
 80140d6:	4619      	mov	r1, r3
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f001 f8ef 	bl	80152bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	791b      	ldrb	r3, [r3, #4]
 80140e2:	4619      	mov	r1, r3
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f001 f8e9 	bl	80152bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2200      	movs	r2, #0
 80140ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2200      	movs	r2, #0
 80140f4:	701a      	strb	r2, [r3, #0]
      break;
 80140f6:	e164      	b.n	80143c2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80140f8:	2101      	movs	r1, #1
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 fb02 	bl	8014704 <USBH_SetAddress>
 8014100:	4603      	mov	r3, r0
 8014102:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014104:	7bbb      	ldrb	r3, [r7, #14]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d132      	bne.n	8014170 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801410a:	2002      	movs	r0, #2
 801410c:	f004 f9ae 	bl	801846c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2201      	movs	r2, #1
 8014114:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2203      	movs	r2, #3
 801411c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	7919      	ldrb	r1, [r3, #4]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014132:	b292      	uxth	r2, r2
 8014134:	9202      	str	r2, [sp, #8]
 8014136:	2200      	movs	r2, #0
 8014138:	9201      	str	r2, [sp, #4]
 801413a:	9300      	str	r3, [sp, #0]
 801413c:	4603      	mov	r3, r0
 801413e:	2280      	movs	r2, #128	; 0x80
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f001 f86b 	bl	801521c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	7959      	ldrb	r1, [r3, #5]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801415a:	b292      	uxth	r2, r2
 801415c:	9202      	str	r2, [sp, #8]
 801415e:	2200      	movs	r2, #0
 8014160:	9201      	str	r2, [sp, #4]
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	4603      	mov	r3, r0
 8014166:	2200      	movs	r2, #0
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f001 f857 	bl	801521c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801416e:	e12a      	b.n	80143c6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014170:	7bbb      	ldrb	r3, [r7, #14]
 8014172:	2b03      	cmp	r3, #3
 8014174:	f040 8127 	bne.w	80143c6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	220d      	movs	r2, #13
 801417c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2200      	movs	r2, #0
 8014182:	705a      	strb	r2, [r3, #1]
      break;
 8014184:	e11f      	b.n	80143c6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8014186:	2109      	movs	r1, #9
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 fa37 	bl	80145fc <USBH_Get_CfgDesc>
 801418e:	4603      	mov	r3, r0
 8014190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014192:	7bbb      	ldrb	r3, [r7, #14]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d103      	bne.n	80141a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2204      	movs	r2, #4
 801419c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801419e:	e114      	b.n	80143ca <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80141a0:	7bbb      	ldrb	r3, [r7, #14]
 80141a2:	2b03      	cmp	r3, #3
 80141a4:	f040 8111 	bne.w	80143ca <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80141ae:	3301      	adds	r3, #1
 80141b0:	b2da      	uxtb	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d903      	bls.n	80141ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	220d      	movs	r2, #13
 80141c6:	701a      	strb	r2, [r3, #0]
      break;
 80141c8:	e0ff      	b.n	80143ca <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	795b      	ldrb	r3, [r3, #5]
 80141ce:	4619      	mov	r1, r3
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f001 f873 	bl	80152bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	791b      	ldrb	r3, [r3, #4]
 80141da:	4619      	mov	r1, r3
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f001 f86d 	bl	80152bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2200      	movs	r2, #0
 80141e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2200      	movs	r2, #0
 80141ec:	701a      	strb	r2, [r3, #0]
      break;
 80141ee:	e0ec      	b.n	80143ca <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80141f6:	4619      	mov	r1, r3
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f000 f9ff 	bl	80145fc <USBH_Get_CfgDesc>
 80141fe:	4603      	mov	r3, r0
 8014200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014202:	7bbb      	ldrb	r3, [r7, #14]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d103      	bne.n	8014210 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2205      	movs	r2, #5
 801420c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801420e:	e0de      	b.n	80143ce <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014210:	7bbb      	ldrb	r3, [r7, #14]
 8014212:	2b03      	cmp	r3, #3
 8014214:	f040 80db 	bne.w	80143ce <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801421e:	3301      	adds	r3, #1
 8014220:	b2da      	uxtb	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801422e:	2b03      	cmp	r3, #3
 8014230:	d903      	bls.n	801423a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	220d      	movs	r2, #13
 8014236:	701a      	strb	r2, [r3, #0]
      break;
 8014238:	e0c9      	b.n	80143ce <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	795b      	ldrb	r3, [r3, #5]
 801423e:	4619      	mov	r1, r3
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f001 f83b 	bl	80152bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	791b      	ldrb	r3, [r3, #4]
 801424a:	4619      	mov	r1, r3
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f001 f835 	bl	80152bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2200      	movs	r2, #0
 8014256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	701a      	strb	r2, [r3, #0]
      break;
 801425e:	e0b6      	b.n	80143ce <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8014266:	2b00      	cmp	r3, #0
 8014268:	d036      	beq.n	80142d8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014276:	23ff      	movs	r3, #255	; 0xff
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 f9e3 	bl	8014644 <USBH_Get_StringDesc>
 801427e:	4603      	mov	r3, r0
 8014280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014282:	7bbb      	ldrb	r3, [r7, #14]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d111      	bne.n	80142ac <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2206      	movs	r2, #6
 801428c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2205      	movs	r2, #5
 8014292:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142a2:	2200      	movs	r2, #0
 80142a4:	4619      	mov	r1, r3
 80142a6:	f001 fa07 	bl	80156b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80142aa:	e092      	b.n	80143d2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80142ac:	7bbb      	ldrb	r3, [r7, #14]
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	f040 808f 	bne.w	80143d2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2206      	movs	r2, #6
 80142b8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2205      	movs	r2, #5
 80142be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142ce:	2200      	movs	r2, #0
 80142d0:	4619      	mov	r1, r3
 80142d2:	f001 f9f1 	bl	80156b8 <osMessagePut>
      break;
 80142d6:	e07c      	b.n	80143d2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2206      	movs	r2, #6
 80142dc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2205      	movs	r2, #5
 80142e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142f2:	2200      	movs	r2, #0
 80142f4:	4619      	mov	r1, r3
 80142f6:	f001 f9df 	bl	80156b8 <osMessagePut>
      break;
 80142fa:	e06a      	b.n	80143d2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8014302:	2b00      	cmp	r3, #0
 8014304:	d027      	beq.n	8014356 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014312:	23ff      	movs	r3, #255	; 0xff
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f000 f995 	bl	8014644 <USBH_Get_StringDesc>
 801431a:	4603      	mov	r3, r0
 801431c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801431e:	7bbb      	ldrb	r3, [r7, #14]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d103      	bne.n	801432c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2207      	movs	r2, #7
 8014328:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801432a:	e054      	b.n	80143d6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801432c:	7bbb      	ldrb	r3, [r7, #14]
 801432e:	2b03      	cmp	r3, #3
 8014330:	d151      	bne.n	80143d6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2207      	movs	r2, #7
 8014336:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2205      	movs	r2, #5
 801433c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801434c:	2200      	movs	r2, #0
 801434e:	4619      	mov	r1, r3
 8014350:	f001 f9b2 	bl	80156b8 <osMessagePut>
      break;
 8014354:	e03f      	b.n	80143d6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2207      	movs	r2, #7
 801435a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2205      	movs	r2, #5
 8014360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014370:	2200      	movs	r2, #0
 8014372:	4619      	mov	r1, r3
 8014374:	f001 f9a0 	bl	80156b8 <osMessagePut>
      break;
 8014378:	e02d      	b.n	80143d6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8014380:	2b00      	cmp	r3, #0
 8014382:	d017      	beq.n	80143b4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014390:	23ff      	movs	r3, #255	; 0xff
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 f956 	bl	8014644 <USBH_Get_StringDesc>
 8014398:	4603      	mov	r3, r0
 801439a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801439c:	7bbb      	ldrb	r3, [r7, #14]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d102      	bne.n	80143a8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80143a2:	2300      	movs	r3, #0
 80143a4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80143a6:	e018      	b.n	80143da <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80143a8:	7bbb      	ldrb	r3, [r7, #14]
 80143aa:	2b03      	cmp	r3, #3
 80143ac:	d115      	bne.n	80143da <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80143ae:	2300      	movs	r3, #0
 80143b0:	73fb      	strb	r3, [r7, #15]
      break;
 80143b2:	e012      	b.n	80143da <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80143b4:	2300      	movs	r3, #0
 80143b6:	73fb      	strb	r3, [r7, #15]
      break;
 80143b8:	e00f      	b.n	80143da <USBH_HandleEnum+0x44a>

    default:
      break;
 80143ba:	bf00      	nop
 80143bc:	e00e      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143be:	bf00      	nop
 80143c0:	e00c      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143c2:	bf00      	nop
 80143c4:	e00a      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143c6:	bf00      	nop
 80143c8:	e008      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143ca:	bf00      	nop
 80143cc:	e006      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143ce:	bf00      	nop
 80143d0:	e004      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143d2:	bf00      	nop
 80143d4:	e002      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143d6:	bf00      	nop
 80143d8:	e000      	b.n	80143dc <USBH_HandleEnum+0x44c>
      break;
 80143da:	bf00      	nop
  }
  return Status;
 80143dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3710      	adds	r7, #16
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop

080143e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	683a      	ldr	r2, [r7, #0]
 80143f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80143fa:	bf00      	nop
 80143fc:	370c      	adds	r7, #12
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr

08014406 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014414:	1c5a      	adds	r2, r3, #1
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f804 	bl	801442a <USBH_HandleSof>
}
 8014422:	bf00      	nop
 8014424:	3708      	adds	r7, #8
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}

0801442a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b082      	sub	sp, #8
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b2db      	uxtb	r3, r3
 8014438:	2b0b      	cmp	r3, #11
 801443a:	d10a      	bne.n	8014452 <USBH_HandleSof+0x28>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014442:	2b00      	cmp	r3, #0
 8014444:	d005      	beq.n	8014452 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801444c:	699b      	ldr	r3, [r3, #24]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	4798      	blx	r3
  }
}
 8014452:	bf00      	nop
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b082      	sub	sp, #8
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2201      	movs	r2, #1
 8014466:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2201      	movs	r2, #1
 801446e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801447e:	2200      	movs	r2, #0
 8014480:	4619      	mov	r1, r3
 8014482:	f001 f919 	bl	80156b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8014486:	bf00      	nop
}
 8014488:	3708      	adds	r7, #8
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801448e:	b480      	push	{r7}
 8014490:	b083      	sub	sp, #12
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801449e:	bf00      	nop
}
 80144a0:	370c      	adds	r7, #12
 80144a2:	46bd      	mov	sp, r7
 80144a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a8:	4770      	bx	lr

080144aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80144aa:	b580      	push	{r7, lr}
 80144ac:	b082      	sub	sp, #8
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2201      	movs	r2, #1
 80144b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2200      	movs	r2, #0
 80144be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2201      	movs	r2, #1
 80144ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80144de:	2200      	movs	r2, #0
 80144e0:	4619      	mov	r1, r3
 80144e2:	f001 f8e9 	bl	80156b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80144e6:	2300      	movs	r3, #0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2200      	movs	r2, #0
 8014504:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2200      	movs	r2, #0
 801450c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f003 fe62 	bl	80181da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	791b      	ldrb	r3, [r3, #4]
 801451a:	4619      	mov	r1, r3
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fecd 	bl	80152bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	795b      	ldrb	r3, [r3, #5]
 8014526:	4619      	mov	r1, r3
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f000 fec7 	bl	80152bc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2201      	movs	r2, #1
 8014532:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014542:	2200      	movs	r2, #0
 8014544:	4619      	mov	r1, r3
 8014546:	f001 f8b7 	bl	80156b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801454a:	2300      	movs	r3, #0
}
 801454c:	4618      	mov	r0, r3
 801454e:	3708      	adds	r7, #8
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b086      	sub	sp, #24
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8014562:	f107 030c 	add.w	r3, r7, #12
 8014566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801456a:	4618      	mov	r0, r3
 801456c:	f001 f8e4 	bl	8015738 <osMessageGet>
    if (event.status == osEventMessage)
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2b10      	cmp	r3, #16
 8014574:	d1f2      	bne.n	801455c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7ff faa8 	bl	8013acc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801457c:	e7ee      	b.n	801455c <USBH_Process_OS+0x8>

0801457e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b082      	sub	sp, #8
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2201      	movs	r2, #1
 801458a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801459a:	2200      	movs	r2, #0
 801459c:	4619      	mov	r1, r3
 801459e:	f001 f88b 	bl	80156b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af02      	add	r7, sp, #8
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80145be:	78fb      	ldrb	r3, [r7, #3]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4613      	mov	r3, r2
 80145c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80145ca:	2100      	movs	r1, #0
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f000 f864 	bl	801469a <USBH_GetDescriptor>
 80145d2:	4603      	mov	r3, r0
 80145d4:	73fb      	strb	r3, [r7, #15]
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d10a      	bne.n	80145f2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80145e8:	78fa      	ldrb	r2, [r7, #3]
 80145ea:	b292      	uxth	r2, r2
 80145ec:	4619      	mov	r1, r3
 80145ee:	f000 f918 	bl	8014822 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80145f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3710      	adds	r7, #16
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b086      	sub	sp, #24
 8014600:	af02      	add	r7, sp, #8
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	460b      	mov	r3, r1
 8014606:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	331c      	adds	r3, #28
 801460c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801460e:	887b      	ldrh	r3, [r7, #2]
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014618:	2100      	movs	r1, #0
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 f83d 	bl	801469a <USBH_GetDescriptor>
 8014620:	4603      	mov	r3, r0
 8014622:	72fb      	strb	r3, [r7, #11]
 8014624:	7afb      	ldrb	r3, [r7, #11]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d107      	bne.n	801463a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014630:	887a      	ldrh	r2, [r7, #2]
 8014632:	68f9      	ldr	r1, [r7, #12]
 8014634:	4618      	mov	r0, r3
 8014636:	f000 f964 	bl	8014902 <USBH_ParseCfgDesc>
  }

  return status;
 801463a:	7afb      	ldrb	r3, [r7, #11]
}
 801463c:	4618      	mov	r0, r3
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b088      	sub	sp, #32
 8014648:	af02      	add	r7, sp, #8
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	607a      	str	r2, [r7, #4]
 801464e:	461a      	mov	r2, r3
 8014650:	460b      	mov	r3, r1
 8014652:	72fb      	strb	r3, [r7, #11]
 8014654:	4613      	mov	r3, r2
 8014656:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8014658:	7afb      	ldrb	r3, [r7, #11]
 801465a:	b29b      	uxth	r3, r3
 801465c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8014660:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014668:	893b      	ldrh	r3, [r7, #8]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	460b      	mov	r3, r1
 801466e:	2100      	movs	r1, #0
 8014670:	68f8      	ldr	r0, [r7, #12]
 8014672:	f000 f812 	bl	801469a <USBH_GetDescriptor>
 8014676:	4603      	mov	r3, r0
 8014678:	75fb      	strb	r3, [r7, #23]
 801467a:	7dfb      	ldrb	r3, [r7, #23]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d107      	bne.n	8014690 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014686:	893a      	ldrh	r2, [r7, #8]
 8014688:	6879      	ldr	r1, [r7, #4]
 801468a:	4618      	mov	r0, r3
 801468c:	f000 fa37 	bl	8014afe <USBH_ParseStringDesc>
  }

  return status;
 8014690:	7dfb      	ldrb	r3, [r7, #23]
}
 8014692:	4618      	mov	r0, r3
 8014694:	3718      	adds	r7, #24
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b084      	sub	sp, #16
 801469e:	af00      	add	r7, sp, #0
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	607b      	str	r3, [r7, #4]
 80146a4:	460b      	mov	r3, r1
 80146a6:	72fb      	strb	r3, [r7, #11]
 80146a8:	4613      	mov	r3, r2
 80146aa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	789b      	ldrb	r3, [r3, #2]
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d11c      	bne.n	80146ee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80146b4:	7afb      	ldrb	r3, [r7, #11]
 80146b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146ba:	b2da      	uxtb	r2, r3
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2206      	movs	r2, #6
 80146c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	893a      	ldrh	r2, [r7, #8]
 80146ca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80146cc:	893b      	ldrh	r3, [r7, #8]
 80146ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80146d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80146d6:	d104      	bne.n	80146e2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f240 4209 	movw	r2, #1033	; 0x409
 80146de:	829a      	strh	r2, [r3, #20]
 80146e0:	e002      	b.n	80146e8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2200      	movs	r2, #0
 80146e6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	8b3a      	ldrh	r2, [r7, #24]
 80146ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80146ee:	8b3b      	ldrh	r3, [r7, #24]
 80146f0:	461a      	mov	r2, r3
 80146f2:	6879      	ldr	r1, [r7, #4]
 80146f4:	68f8      	ldr	r0, [r7, #12]
 80146f6:	f000 fa50 	bl	8014b9a <USBH_CtlReq>
 80146fa:	4603      	mov	r3, r0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3710      	adds	r7, #16
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	460b      	mov	r3, r1
 801470e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	789b      	ldrb	r3, [r3, #2]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d10f      	bne.n	8014738 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2200      	movs	r2, #0
 801471c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2205      	movs	r2, #5
 8014722:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8014724:	78fb      	ldrb	r3, [r7, #3]
 8014726:	b29a      	uxth	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2200      	movs	r2, #0
 8014730:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2200      	movs	r2, #0
 8014736:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014738:	2200      	movs	r2, #0
 801473a:	2100      	movs	r1, #0
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 fa2c 	bl	8014b9a <USBH_CtlReq>
 8014742:	4603      	mov	r3, r0
}
 8014744:	4618      	mov	r0, r3
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	460b      	mov	r3, r1
 8014756:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	789b      	ldrb	r3, [r3, #2]
 801475c:	2b01      	cmp	r3, #1
 801475e:	d10e      	bne.n	801477e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2209      	movs	r2, #9
 801476a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	887a      	ldrh	r2, [r7, #2]
 8014770:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801477e:	2200      	movs	r2, #0
 8014780:	2100      	movs	r1, #0
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fa09 	bl	8014b9a <USBH_CtlReq>
 8014788:	4603      	mov	r3, r0
}
 801478a:	4618      	mov	r0, r3
 801478c:	3708      	adds	r7, #8
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8014792:	b580      	push	{r7, lr}
 8014794:	b082      	sub	sp, #8
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
 801479a:	460b      	mov	r3, r1
 801479c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	789b      	ldrb	r3, [r3, #2]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d10f      	bne.n	80147c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2200      	movs	r2, #0
 80147aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2203      	movs	r2, #3
 80147b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80147b2:	78fb      	ldrb	r3, [r7, #3]
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2200      	movs	r2, #0
 80147c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80147c6:	2200      	movs	r2, #0
 80147c8:	2100      	movs	r1, #0
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 f9e5 	bl	8014b9a <USBH_CtlReq>
 80147d0:	4603      	mov	r3, r0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}

080147da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80147da:	b580      	push	{r7, lr}
 80147dc:	b082      	sub	sp, #8
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
 80147e2:	460b      	mov	r3, r1
 80147e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	789b      	ldrb	r3, [r3, #2]
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d10f      	bne.n	801480e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2202      	movs	r2, #2
 80147f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2201      	movs	r2, #1
 80147f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014800:	78fb      	ldrb	r3, [r7, #3]
 8014802:	b29a      	uxth	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2200      	movs	r2, #0
 801480c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801480e:	2200      	movs	r2, #0
 8014810:	2100      	movs	r1, #0
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 f9c1 	bl	8014b9a <USBH_CtlReq>
 8014818:	4603      	mov	r3, r0
}
 801481a:	4618      	mov	r0, r3
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}

08014822 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8014822:	b480      	push	{r7}
 8014824:	b085      	sub	sp, #20
 8014826:	af00      	add	r7, sp, #0
 8014828:	60f8      	str	r0, [r7, #12]
 801482a:	60b9      	str	r1, [r7, #8]
 801482c:	4613      	mov	r3, r2
 801482e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	781a      	ldrb	r2, [r3, #0]
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	785a      	ldrb	r2, [r3, #1]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	3302      	adds	r3, #2
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	b29a      	uxth	r2, r3
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	3303      	adds	r3, #3
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	b29b      	uxth	r3, r3
 8014850:	021b      	lsls	r3, r3, #8
 8014852:	b29b      	uxth	r3, r3
 8014854:	4313      	orrs	r3, r2
 8014856:	b29a      	uxth	r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	791a      	ldrb	r2, [r3, #4]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	795a      	ldrb	r2, [r3, #5]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	799a      	ldrb	r2, [r3, #6]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	79da      	ldrb	r2, [r3, #7]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 801487c:	88fb      	ldrh	r3, [r7, #6]
 801487e:	2b08      	cmp	r3, #8
 8014880:	d939      	bls.n	80148f6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	3308      	adds	r3, #8
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	b29a      	uxth	r2, r3
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	3309      	adds	r3, #9
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	b29b      	uxth	r3, r3
 8014892:	021b      	lsls	r3, r3, #8
 8014894:	b29b      	uxth	r3, r3
 8014896:	4313      	orrs	r3, r2
 8014898:	b29a      	uxth	r2, r3
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	330a      	adds	r3, #10
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	330b      	adds	r3, #11
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	021b      	lsls	r3, r3, #8
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	4313      	orrs	r3, r2
 80148b4:	b29a      	uxth	r2, r3
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	330c      	adds	r3, #12
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	330d      	adds	r3, #13
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	021b      	lsls	r3, r3, #8
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	4313      	orrs	r3, r2
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	7b9a      	ldrb	r2, [r3, #14]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	7bda      	ldrb	r2, [r3, #15]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	7c1a      	ldrb	r2, [r3, #16]
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	7c5a      	ldrb	r2, [r3, #17]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	745a      	strb	r2, [r3, #17]
  }
}
 80148f6:	bf00      	nop
 80148f8:	3714      	adds	r7, #20
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b08a      	sub	sp, #40	; 0x28
 8014906:	af00      	add	r7, sp, #0
 8014908:	60f8      	str	r0, [r7, #12]
 801490a:	60b9      	str	r1, [r7, #8]
 801490c:	4613      	mov	r3, r2
 801490e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014914:	2300      	movs	r3, #0
 8014916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801491a:	2300      	movs	r3, #0
 801491c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	781a      	ldrb	r2, [r3, #0]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	785a      	ldrb	r2, [r3, #1]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	3302      	adds	r3, #2
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	b29a      	uxth	r2, r3
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	3303      	adds	r3, #3
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	b29b      	uxth	r3, r3
 8014944:	021b      	lsls	r3, r3, #8
 8014946:	b29b      	uxth	r3, r3
 8014948:	4313      	orrs	r3, r2
 801494a:	b29a      	uxth	r2, r3
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	791a      	ldrb	r2, [r3, #4]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	795a      	ldrb	r2, [r3, #5]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	799a      	ldrb	r2, [r3, #6]
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	79da      	ldrb	r2, [r3, #7]
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	7a1a      	ldrb	r2, [r3, #8]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014978:	88fb      	ldrh	r3, [r7, #6]
 801497a:	2b09      	cmp	r3, #9
 801497c:	d95f      	bls.n	8014a3e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801497e:	2309      	movs	r3, #9
 8014980:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8014982:	2300      	movs	r3, #0
 8014984:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014986:	e051      	b.n	8014a2c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014988:	f107 0316 	add.w	r3, r7, #22
 801498c:	4619      	mov	r1, r3
 801498e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014990:	f000 f8e8 	bl	8014b64 <USBH_GetNextDesc>
 8014994:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014998:	785b      	ldrb	r3, [r3, #1]
 801499a:	2b04      	cmp	r3, #4
 801499c:	d146      	bne.n	8014a2c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801499e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149a2:	221a      	movs	r2, #26
 80149a4:	fb02 f303 	mul.w	r3, r2, r3
 80149a8:	3308      	adds	r3, #8
 80149aa:	68fa      	ldr	r2, [r7, #12]
 80149ac:	4413      	add	r3, r2
 80149ae:	3302      	adds	r3, #2
 80149b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80149b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149b4:	69f8      	ldr	r0, [r7, #28]
 80149b6:	f000 f846 	bl	8014a46 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80149ba:	2300      	movs	r3, #0
 80149bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80149c0:	2300      	movs	r3, #0
 80149c2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80149c4:	e022      	b.n	8014a0c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80149c6:	f107 0316 	add.w	r3, r7, #22
 80149ca:	4619      	mov	r1, r3
 80149cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149ce:	f000 f8c9 	bl	8014b64 <USBH_GetNextDesc>
 80149d2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	785b      	ldrb	r3, [r3, #1]
 80149d8:	2b05      	cmp	r3, #5
 80149da:	d117      	bne.n	8014a0c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80149dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149e4:	3201      	adds	r2, #1
 80149e6:	00d2      	lsls	r2, r2, #3
 80149e8:	211a      	movs	r1, #26
 80149ea:	fb01 f303 	mul.w	r3, r1, r3
 80149ee:	4413      	add	r3, r2
 80149f0:	3308      	adds	r3, #8
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	4413      	add	r3, r2
 80149f6:	3304      	adds	r3, #4
 80149f8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80149fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149fc:	69b8      	ldr	r0, [r7, #24]
 80149fe:	f000 f851 	bl	8014aa4 <USBH_ParseEPDesc>
            ep_ix++;
 8014a02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014a06:	3301      	adds	r3, #1
 8014a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	791b      	ldrb	r3, [r3, #4]
 8014a10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d204      	bcs.n	8014a22 <USBH_ParseCfgDesc+0x120>
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	885a      	ldrh	r2, [r3, #2]
 8014a1c:	8afb      	ldrh	r3, [r7, #22]
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d8d1      	bhi.n	80149c6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8014a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a26:	3301      	adds	r3, #1
 8014a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d804      	bhi.n	8014a3e <USBH_ParseCfgDesc+0x13c>
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	885a      	ldrh	r2, [r3, #2]
 8014a38:	8afb      	ldrh	r3, [r7, #22]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d8a4      	bhi.n	8014988 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8014a3e:	bf00      	nop
 8014a40:	3728      	adds	r7, #40	; 0x28
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8014a46:	b480      	push	{r7}
 8014a48:	b083      	sub	sp, #12
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	6078      	str	r0, [r7, #4]
 8014a4e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	781a      	ldrb	r2, [r3, #0]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	785a      	ldrb	r2, [r3, #1]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	789a      	ldrb	r2, [r3, #2]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	78da      	ldrb	r2, [r3, #3]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	791a      	ldrb	r2, [r3, #4]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	795a      	ldrb	r2, [r3, #5]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	799a      	ldrb	r2, [r3, #6]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	79da      	ldrb	r2, [r3, #7]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	7a1a      	ldrb	r2, [r3, #8]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	721a      	strb	r2, [r3, #8]
}
 8014a98:	bf00      	nop
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	781a      	ldrb	r2, [r3, #0]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	785a      	ldrb	r2, [r3, #1]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	789a      	ldrb	r2, [r3, #2]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	78da      	ldrb	r2, [r3, #3]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	3305      	adds	r3, #5
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	021b      	lsls	r3, r3, #8
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	799a      	ldrb	r2, [r3, #6]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	719a      	strb	r2, [r3, #6]
}
 8014af2:	bf00      	nop
 8014af4:	370c      	adds	r7, #12
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr

08014afe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8014afe:	b480      	push	{r7}
 8014b00:	b087      	sub	sp, #28
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	60f8      	str	r0, [r7, #12]
 8014b06:	60b9      	str	r1, [r7, #8]
 8014b08:	4613      	mov	r3, r2
 8014b0a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	3301      	adds	r3, #1
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	2b03      	cmp	r3, #3
 8014b14:	d120      	bne.n	8014b58 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	1e9a      	subs	r2, r3, #2
 8014b1c:	88fb      	ldrh	r3, [r7, #6]
 8014b1e:	4293      	cmp	r3, r2
 8014b20:	bf28      	it	cs
 8014b22:	4613      	movcs	r3, r2
 8014b24:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	3302      	adds	r3, #2
 8014b2a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	82fb      	strh	r3, [r7, #22]
 8014b30:	e00b      	b.n	8014b4a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014b32:	8afb      	ldrh	r3, [r7, #22]
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	4413      	add	r3, r2
 8014b38:	781a      	ldrb	r2, [r3, #0]
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	3301      	adds	r3, #1
 8014b42:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014b44:	8afb      	ldrh	r3, [r7, #22]
 8014b46:	3302      	adds	r3, #2
 8014b48:	82fb      	strh	r3, [r7, #22]
 8014b4a:	8afa      	ldrh	r2, [r7, #22]
 8014b4c:	8abb      	ldrh	r3, [r7, #20]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d3ef      	bcc.n	8014b32 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2200      	movs	r2, #0
 8014b56:	701a      	strb	r2, [r3, #0]
  }
}
 8014b58:	bf00      	nop
 8014b5a:	371c      	adds	r7, #28
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr

08014b64 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8014b64:	b480      	push	{r7}
 8014b66:	b085      	sub	sp, #20
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	881a      	ldrh	r2, [r3, #0]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	4413      	add	r3, r2
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	4413      	add	r3, r2
 8014b8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014b8c:	68fb      	ldr	r3, [r7, #12]
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3714      	adds	r7, #20
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr

08014b9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b086      	sub	sp, #24
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	60f8      	str	r0, [r7, #12]
 8014ba2:	60b9      	str	r1, [r7, #8]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014ba8:	2301      	movs	r3, #1
 8014baa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	789b      	ldrb	r3, [r3, #2]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d002      	beq.n	8014bba <USBH_CtlReq+0x20>
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d01d      	beq.n	8014bf4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8014bb8:	e043      	b.n	8014c42 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	68ba      	ldr	r2, [r7, #8]
 8014bbe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	88fa      	ldrh	r2, [r7, #6]
 8014bc4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2202      	movs	r2, #2
 8014bd0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2203      	movs	r2, #3
 8014bda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014bea:	2200      	movs	r2, #0
 8014bec:	4619      	mov	r1, r3
 8014bee:	f000 fd63 	bl	80156b8 <osMessagePut>
      break;
 8014bf2:	e026      	b.n	8014c42 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f000 f829 	bl	8014c4c <USBH_HandleControl>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014bfe:	7dfb      	ldrb	r3, [r7, #23]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d002      	beq.n	8014c0a <USBH_CtlReq+0x70>
 8014c04:	7dfb      	ldrb	r3, [r7, #23]
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	d106      	bne.n	8014c18 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2200      	movs	r2, #0
 8014c14:	761a      	strb	r2, [r3, #24]
 8014c16:	e005      	b.n	8014c24 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8014c18:	7dfb      	ldrb	r3, [r7, #23]
 8014c1a:	2b02      	cmp	r3, #2
 8014c1c:	d102      	bne.n	8014c24 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2201      	movs	r2, #1
 8014c22:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	2203      	movs	r2, #3
 8014c28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c38:	2200      	movs	r2, #0
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	f000 fd3c 	bl	80156b8 <osMessagePut>
      break;
 8014c40:	bf00      	nop
  }
  return status;
 8014c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3718      	adds	r7, #24
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af02      	add	r7, sp, #8
 8014c52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014c54:	2301      	movs	r3, #1
 8014c56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	7e1b      	ldrb	r3, [r3, #24]
 8014c60:	3b01      	subs	r3, #1
 8014c62:	2b0a      	cmp	r3, #10
 8014c64:	f200 8229 	bhi.w	80150ba <USBH_HandleControl+0x46e>
 8014c68:	a201      	add	r2, pc, #4	; (adr r2, 8014c70 <USBH_HandleControl+0x24>)
 8014c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c6e:	bf00      	nop
 8014c70:	08014c9d 	.word	0x08014c9d
 8014c74:	08014cb7 	.word	0x08014cb7
 8014c78:	08014d59 	.word	0x08014d59
 8014c7c:	08014d7f 	.word	0x08014d7f
 8014c80:	08014e0b 	.word	0x08014e0b
 8014c84:	08014e35 	.word	0x08014e35
 8014c88:	08014ef7 	.word	0x08014ef7
 8014c8c:	08014f19 	.word	0x08014f19
 8014c90:	08014fab 	.word	0x08014fab
 8014c94:	08014fd1 	.word	0x08014fd1
 8014c98:	08015063 	.word	0x08015063
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f103 0110 	add.w	r1, r3, #16
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	795b      	ldrb	r3, [r3, #5]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f000 fa17 	bl	80150dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2202      	movs	r2, #2
 8014cb2:	761a      	strb	r2, [r3, #24]
      break;
 8014cb4:	e20c      	b.n	80150d0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	795b      	ldrb	r3, [r3, #5]
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f003 fb7b 	bl	80183b8 <USBH_LL_GetURBState>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014cc6:	7bbb      	ldrb	r3, [r7, #14]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d12c      	bne.n	8014d26 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	7c1b      	ldrb	r3, [r3, #16]
 8014cd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014cd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	8adb      	ldrh	r3, [r3, #22]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d00a      	beq.n	8014cf4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8014cde:	7b7b      	ldrb	r3, [r7, #13]
 8014ce0:	2b80      	cmp	r3, #128	; 0x80
 8014ce2:	d103      	bne.n	8014cec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2203      	movs	r2, #3
 8014ce8:	761a      	strb	r2, [r3, #24]
 8014cea:	e00d      	b.n	8014d08 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2205      	movs	r2, #5
 8014cf0:	761a      	strb	r2, [r3, #24]
 8014cf2:	e009      	b.n	8014d08 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014cf4:	7b7b      	ldrb	r3, [r7, #13]
 8014cf6:	2b80      	cmp	r3, #128	; 0x80
 8014cf8:	d103      	bne.n	8014d02 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2209      	movs	r2, #9
 8014cfe:	761a      	strb	r2, [r3, #24]
 8014d00:	e002      	b.n	8014d08 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2207      	movs	r2, #7
 8014d06:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2203      	movs	r2, #3
 8014d0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	4619      	mov	r1, r3
 8014d20:	f000 fcca 	bl	80156b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014d24:	e1cb      	b.n	80150be <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014d26:	7bbb      	ldrb	r3, [r7, #14]
 8014d28:	2b04      	cmp	r3, #4
 8014d2a:	d003      	beq.n	8014d34 <USBH_HandleControl+0xe8>
 8014d2c:	7bbb      	ldrb	r3, [r7, #14]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	f040 81c5 	bne.w	80150be <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	220b      	movs	r2, #11
 8014d38:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2203      	movs	r2, #3
 8014d3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d4e:	2200      	movs	r2, #0
 8014d50:	4619      	mov	r1, r3
 8014d52:	f000 fcb1 	bl	80156b8 <osMessagePut>
      break;
 8014d56:	e1b2      	b.n	80150be <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6899      	ldr	r1, [r3, #8]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	899a      	ldrh	r2, [r3, #12]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	791b      	ldrb	r3, [r3, #4]
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f000 f9f2 	bl	801515a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2204      	movs	r2, #4
 8014d7a:	761a      	strb	r2, [r3, #24]
      break;
 8014d7c:	e1a8      	b.n	80150d0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	791b      	ldrb	r3, [r3, #4]
 8014d82:	4619      	mov	r1, r3
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f003 fb17 	bl	80183b8 <USBH_LL_GetURBState>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8014d8e:	7bbb      	ldrb	r3, [r7, #14]
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d110      	bne.n	8014db6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2209      	movs	r2, #9
 8014d98:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2203      	movs	r2, #3
 8014d9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014dae:	2200      	movs	r2, #0
 8014db0:	4619      	mov	r1, r3
 8014db2:	f000 fc81 	bl	80156b8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8014db6:	7bbb      	ldrb	r3, [r7, #14]
 8014db8:	2b05      	cmp	r3, #5
 8014dba:	d110      	bne.n	8014dde <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014dbc:	2303      	movs	r3, #3
 8014dbe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2203      	movs	r2, #3
 8014dc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	f000 fc6e 	bl	80156b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014ddc:	e171      	b.n	80150c2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8014dde:	7bbb      	ldrb	r3, [r7, #14]
 8014de0:	2b04      	cmp	r3, #4
 8014de2:	f040 816e 	bne.w	80150c2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	220b      	movs	r2, #11
 8014dea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2203      	movs	r2, #3
 8014df0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e00:	2200      	movs	r2, #0
 8014e02:	4619      	mov	r1, r3
 8014e04:	f000 fc58 	bl	80156b8 <osMessagePut>
      break;
 8014e08:	e15b      	b.n	80150c2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6899      	ldr	r1, [r3, #8]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	899a      	ldrh	r2, [r3, #12]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	795b      	ldrb	r3, [r3, #5]
 8014e16:	2001      	movs	r0, #1
 8014e18:	9000      	str	r0, [sp, #0]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 f978 	bl	8015110 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2206      	movs	r2, #6
 8014e30:	761a      	strb	r2, [r3, #24]
      break;
 8014e32:	e14d      	b.n	80150d0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	795b      	ldrb	r3, [r3, #5]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f003 fabc 	bl	80183b8 <USBH_LL_GetURBState>
 8014e40:	4603      	mov	r3, r0
 8014e42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014e44:	7bbb      	ldrb	r3, [r7, #14]
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d111      	bne.n	8014e6e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2207      	movs	r2, #7
 8014e4e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2203      	movs	r2, #3
 8014e54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e64:	2200      	movs	r2, #0
 8014e66:	4619      	mov	r1, r3
 8014e68:	f000 fc26 	bl	80156b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014e6c:	e12b      	b.n	80150c6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8014e6e:	7bbb      	ldrb	r3, [r7, #14]
 8014e70:	2b05      	cmp	r3, #5
 8014e72:	d113      	bne.n	8014e9c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	220c      	movs	r2, #12
 8014e78:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014e7a:	2303      	movs	r3, #3
 8014e7c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2203      	movs	r2, #3
 8014e82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e92:	2200      	movs	r2, #0
 8014e94:	4619      	mov	r1, r3
 8014e96:	f000 fc0f 	bl	80156b8 <osMessagePut>
      break;
 8014e9a:	e114      	b.n	80150c6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014e9c:	7bbb      	ldrb	r3, [r7, #14]
 8014e9e:	2b02      	cmp	r3, #2
 8014ea0:	d111      	bne.n	8014ec6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2205      	movs	r2, #5
 8014ea6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2203      	movs	r2, #3
 8014eac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	f000 fbfa 	bl	80156b8 <osMessagePut>
      break;
 8014ec4:	e0ff      	b.n	80150c6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8014ec6:	7bbb      	ldrb	r3, [r7, #14]
 8014ec8:	2b04      	cmp	r3, #4
 8014eca:	f040 80fc 	bne.w	80150c6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	220b      	movs	r2, #11
 8014ed2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014ed4:	2302      	movs	r3, #2
 8014ed6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2203      	movs	r2, #3
 8014edc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014eec:	2200      	movs	r2, #0
 8014eee:	4619      	mov	r1, r3
 8014ef0:	f000 fbe2 	bl	80156b8 <osMessagePut>
      break;
 8014ef4:	e0e7      	b.n	80150c6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	791b      	ldrb	r3, [r3, #4]
 8014efa:	2200      	movs	r2, #0
 8014efc:	2100      	movs	r1, #0
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 f92b 	bl	801515a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2208      	movs	r2, #8
 8014f14:	761a      	strb	r2, [r3, #24]

      break;
 8014f16:	e0db      	b.n	80150d0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	791b      	ldrb	r3, [r3, #4]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f003 fa4a 	bl	80183b8 <USBH_LL_GetURBState>
 8014f24:	4603      	mov	r3, r0
 8014f26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014f28:	7bbb      	ldrb	r3, [r7, #14]
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d113      	bne.n	8014f56 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	220d      	movs	r2, #13
 8014f32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014f34:	2300      	movs	r3, #0
 8014f36:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2203      	movs	r2, #3
 8014f3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	4619      	mov	r1, r3
 8014f50:	f000 fbb2 	bl	80156b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014f54:	e0b9      	b.n	80150ca <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8014f56:	7bbb      	ldrb	r3, [r7, #14]
 8014f58:	2b04      	cmp	r3, #4
 8014f5a:	d111      	bne.n	8014f80 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	220b      	movs	r2, #11
 8014f60:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2203      	movs	r2, #3
 8014f66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f76:	2200      	movs	r2, #0
 8014f78:	4619      	mov	r1, r3
 8014f7a:	f000 fb9d 	bl	80156b8 <osMessagePut>
      break;
 8014f7e:	e0a4      	b.n	80150ca <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8014f80:	7bbb      	ldrb	r3, [r7, #14]
 8014f82:	2b05      	cmp	r3, #5
 8014f84:	f040 80a1 	bne.w	80150ca <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8014f88:	2303      	movs	r3, #3
 8014f8a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2203      	movs	r2, #3
 8014f90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	f000 fb88 	bl	80156b8 <osMessagePut>
      break;
 8014fa8:	e08f      	b.n	80150ca <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	795b      	ldrb	r3, [r3, #5]
 8014fae:	2201      	movs	r2, #1
 8014fb0:	9200      	str	r2, [sp, #0]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	2100      	movs	r1, #0
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f000 f8aa 	bl	8015110 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014fc2:	b29a      	uxth	r2, r3
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	220a      	movs	r2, #10
 8014fcc:	761a      	strb	r2, [r3, #24]
      break;
 8014fce:	e07f      	b.n	80150d0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	795b      	ldrb	r3, [r3, #5]
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f003 f9ee 	bl	80183b8 <USBH_LL_GetURBState>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014fe0:	7bbb      	ldrb	r3, [r7, #14]
 8014fe2:	2b01      	cmp	r3, #1
 8014fe4:	d113      	bne.n	801500e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	220d      	movs	r2, #13
 8014fee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2203      	movs	r2, #3
 8014ff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015004:	2200      	movs	r2, #0
 8015006:	4619      	mov	r1, r3
 8015008:	f000 fb56 	bl	80156b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801500c:	e05f      	b.n	80150ce <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801500e:	7bbb      	ldrb	r3, [r7, #14]
 8015010:	2b02      	cmp	r3, #2
 8015012:	d111      	bne.n	8015038 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2209      	movs	r2, #9
 8015018:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2203      	movs	r2, #3
 801501e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801502e:	2200      	movs	r2, #0
 8015030:	4619      	mov	r1, r3
 8015032:	f000 fb41 	bl	80156b8 <osMessagePut>
      break;
 8015036:	e04a      	b.n	80150ce <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8015038:	7bbb      	ldrb	r3, [r7, #14]
 801503a:	2b04      	cmp	r3, #4
 801503c:	d147      	bne.n	80150ce <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	220b      	movs	r2, #11
 8015042:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2203      	movs	r2, #3
 8015048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015058:	2200      	movs	r2, #0
 801505a:	4619      	mov	r1, r3
 801505c:	f000 fb2c 	bl	80156b8 <osMessagePut>
      break;
 8015060:	e035      	b.n	80150ce <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	7e5b      	ldrb	r3, [r3, #25]
 8015066:	3301      	adds	r3, #1
 8015068:	b2da      	uxtb	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	765a      	strb	r2, [r3, #25]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	7e5b      	ldrb	r3, [r3, #25]
 8015072:	2b02      	cmp	r3, #2
 8015074:	d806      	bhi.n	8015084 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2201      	movs	r2, #1
 801507a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2201      	movs	r2, #1
 8015080:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015082:	e025      	b.n	80150d0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801508a:	2106      	movs	r1, #6
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2200      	movs	r2, #0
 8015094:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	795b      	ldrb	r3, [r3, #5]
 801509a:	4619      	mov	r1, r3
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 f90d 	bl	80152bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	791b      	ldrb	r3, [r3, #4]
 80150a6:	4619      	mov	r1, r3
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f000 f907 	bl	80152bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80150b4:	2302      	movs	r3, #2
 80150b6:	73fb      	strb	r3, [r7, #15]
      break;
 80150b8:	e00a      	b.n	80150d0 <USBH_HandleControl+0x484>

    default:
      break;
 80150ba:	bf00      	nop
 80150bc:	e008      	b.n	80150d0 <USBH_HandleControl+0x484>
      break;
 80150be:	bf00      	nop
 80150c0:	e006      	b.n	80150d0 <USBH_HandleControl+0x484>
      break;
 80150c2:	bf00      	nop
 80150c4:	e004      	b.n	80150d0 <USBH_HandleControl+0x484>
      break;
 80150c6:	bf00      	nop
 80150c8:	e002      	b.n	80150d0 <USBH_HandleControl+0x484>
      break;
 80150ca:	bf00      	nop
 80150cc:	e000      	b.n	80150d0 <USBH_HandleControl+0x484>
      break;
 80150ce:	bf00      	nop
  }

  return status;
 80150d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop

080150dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b088      	sub	sp, #32
 80150e0:	af04      	add	r7, sp, #16
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	4613      	mov	r3, r2
 80150e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80150ea:	79f9      	ldrb	r1, [r7, #7]
 80150ec:	2300      	movs	r3, #0
 80150ee:	9303      	str	r3, [sp, #12]
 80150f0:	2308      	movs	r3, #8
 80150f2:	9302      	str	r3, [sp, #8]
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	9301      	str	r3, [sp, #4]
 80150f8:	2300      	movs	r3, #0
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	2300      	movs	r3, #0
 80150fe:	2200      	movs	r2, #0
 8015100:	68f8      	ldr	r0, [r7, #12]
 8015102:	f003 f928 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8015106:	2300      	movs	r3, #0
}
 8015108:	4618      	mov	r0, r3
 801510a:	3710      	adds	r7, #16
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b088      	sub	sp, #32
 8015114:	af04      	add	r7, sp, #16
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	4611      	mov	r1, r2
 801511c:	461a      	mov	r2, r3
 801511e:	460b      	mov	r3, r1
 8015120:	80fb      	strh	r3, [r7, #6]
 8015122:	4613      	mov	r3, r2
 8015124:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801512c:	2b00      	cmp	r3, #0
 801512e:	d001      	beq.n	8015134 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015130:	2300      	movs	r3, #0
 8015132:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015134:	7979      	ldrb	r1, [r7, #5]
 8015136:	7e3b      	ldrb	r3, [r7, #24]
 8015138:	9303      	str	r3, [sp, #12]
 801513a:	88fb      	ldrh	r3, [r7, #6]
 801513c:	9302      	str	r3, [sp, #8]
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	9301      	str	r3, [sp, #4]
 8015142:	2301      	movs	r3, #1
 8015144:	9300      	str	r3, [sp, #0]
 8015146:	2300      	movs	r3, #0
 8015148:	2200      	movs	r2, #0
 801514a:	68f8      	ldr	r0, [r7, #12]
 801514c:	f003 f903 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015150:	2300      	movs	r3, #0
}
 8015152:	4618      	mov	r0, r3
 8015154:	3710      	adds	r7, #16
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}

0801515a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801515a:	b580      	push	{r7, lr}
 801515c:	b088      	sub	sp, #32
 801515e:	af04      	add	r7, sp, #16
 8015160:	60f8      	str	r0, [r7, #12]
 8015162:	60b9      	str	r1, [r7, #8]
 8015164:	4611      	mov	r1, r2
 8015166:	461a      	mov	r2, r3
 8015168:	460b      	mov	r3, r1
 801516a:	80fb      	strh	r3, [r7, #6]
 801516c:	4613      	mov	r3, r2
 801516e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015170:	7979      	ldrb	r1, [r7, #5]
 8015172:	2300      	movs	r3, #0
 8015174:	9303      	str	r3, [sp, #12]
 8015176:	88fb      	ldrh	r3, [r7, #6]
 8015178:	9302      	str	r3, [sp, #8]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	9301      	str	r3, [sp, #4]
 801517e:	2301      	movs	r3, #1
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	2300      	movs	r3, #0
 8015184:	2201      	movs	r2, #1
 8015186:	68f8      	ldr	r0, [r7, #12]
 8015188:	f003 f8e5 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801518c:	2300      	movs	r3, #0

}
 801518e:	4618      	mov	r0, r3
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b088      	sub	sp, #32
 801519a:	af04      	add	r7, sp, #16
 801519c:	60f8      	str	r0, [r7, #12]
 801519e:	60b9      	str	r1, [r7, #8]
 80151a0:	4611      	mov	r1, r2
 80151a2:	461a      	mov	r2, r3
 80151a4:	460b      	mov	r3, r1
 80151a6:	80fb      	strh	r3, [r7, #6]
 80151a8:	4613      	mov	r3, r2
 80151aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80151b6:	2300      	movs	r3, #0
 80151b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80151ba:	7979      	ldrb	r1, [r7, #5]
 80151bc:	7e3b      	ldrb	r3, [r7, #24]
 80151be:	9303      	str	r3, [sp, #12]
 80151c0:	88fb      	ldrh	r3, [r7, #6]
 80151c2:	9302      	str	r3, [sp, #8]
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	9301      	str	r3, [sp, #4]
 80151c8:	2301      	movs	r3, #1
 80151ca:	9300      	str	r3, [sp, #0]
 80151cc:	2302      	movs	r3, #2
 80151ce:	2200      	movs	r2, #0
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f003 f8c0 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80151d6:	2300      	movs	r3, #0
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b088      	sub	sp, #32
 80151e4:	af04      	add	r7, sp, #16
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	4611      	mov	r1, r2
 80151ec:	461a      	mov	r2, r3
 80151ee:	460b      	mov	r3, r1
 80151f0:	80fb      	strh	r3, [r7, #6]
 80151f2:	4613      	mov	r3, r2
 80151f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80151f6:	7979      	ldrb	r1, [r7, #5]
 80151f8:	2300      	movs	r3, #0
 80151fa:	9303      	str	r3, [sp, #12]
 80151fc:	88fb      	ldrh	r3, [r7, #6]
 80151fe:	9302      	str	r3, [sp, #8]
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	9301      	str	r3, [sp, #4]
 8015204:	2301      	movs	r3, #1
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	2302      	movs	r3, #2
 801520a:	2201      	movs	r2, #1
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f003 f8a2 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015212:	2300      	movs	r3, #0
}
 8015214:	4618      	mov	r0, r3
 8015216:	3710      	adds	r7, #16
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}

0801521c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b086      	sub	sp, #24
 8015220:	af04      	add	r7, sp, #16
 8015222:	6078      	str	r0, [r7, #4]
 8015224:	4608      	mov	r0, r1
 8015226:	4611      	mov	r1, r2
 8015228:	461a      	mov	r2, r3
 801522a:	4603      	mov	r3, r0
 801522c:	70fb      	strb	r3, [r7, #3]
 801522e:	460b      	mov	r3, r1
 8015230:	70bb      	strb	r3, [r7, #2]
 8015232:	4613      	mov	r3, r2
 8015234:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8015236:	7878      	ldrb	r0, [r7, #1]
 8015238:	78ba      	ldrb	r2, [r7, #2]
 801523a:	78f9      	ldrb	r1, [r7, #3]
 801523c:	8b3b      	ldrh	r3, [r7, #24]
 801523e:	9302      	str	r3, [sp, #8]
 8015240:	7d3b      	ldrb	r3, [r7, #20]
 8015242:	9301      	str	r3, [sp, #4]
 8015244:	7c3b      	ldrb	r3, [r7, #16]
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	4603      	mov	r3, r0
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f003 f835 	bl	80182ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8015250:	2300      	movs	r3, #0
}
 8015252:	4618      	mov	r0, r3
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801525a:	b580      	push	{r7, lr}
 801525c:	b082      	sub	sp, #8
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
 8015262:	460b      	mov	r3, r1
 8015264:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8015266:	78fb      	ldrb	r3, [r7, #3]
 8015268:	4619      	mov	r1, r3
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f003 f854 	bl	8018318 <USBH_LL_ClosePipe>

  return USBH_OK;
 8015270:	2300      	movs	r3, #0
}
 8015272:	4618      	mov	r0, r3
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}

0801527a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801527a:	b580      	push	{r7, lr}
 801527c:	b084      	sub	sp, #16
 801527e:	af00      	add	r7, sp, #0
 8015280:	6078      	str	r0, [r7, #4]
 8015282:	460b      	mov	r3, r1
 8015284:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f000 f836 	bl	80152f8 <USBH_GetFreePipe>
 801528c:	4603      	mov	r3, r0
 801528e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8015290:	89fb      	ldrh	r3, [r7, #14]
 8015292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015296:	4293      	cmp	r3, r2
 8015298:	d00a      	beq.n	80152b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801529a:	78fa      	ldrb	r2, [r7, #3]
 801529c:	89fb      	ldrh	r3, [r7, #14]
 801529e:	f003 030f 	and.w	r3, r3, #15
 80152a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	33e0      	adds	r3, #224	; 0xe0
 80152aa:	009b      	lsls	r3, r3, #2
 80152ac:	440b      	add	r3, r1
 80152ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80152b0:	89fb      	ldrh	r3, [r7, #14]
 80152b2:	b2db      	uxtb	r3, r3
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	460b      	mov	r3, r1
 80152c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80152c8:	78fb      	ldrb	r3, [r7, #3]
 80152ca:	2b0a      	cmp	r3, #10
 80152cc:	d80d      	bhi.n	80152ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80152ce:	78fb      	ldrb	r3, [r7, #3]
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	33e0      	adds	r3, #224	; 0xe0
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	4413      	add	r3, r2
 80152d8:	685a      	ldr	r2, [r3, #4]
 80152da:	78fb      	ldrb	r3, [r7, #3]
 80152dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80152e0:	6879      	ldr	r1, [r7, #4]
 80152e2:	33e0      	adds	r3, #224	; 0xe0
 80152e4:	009b      	lsls	r3, r3, #2
 80152e6:	440b      	add	r3, r1
 80152e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80152ea:	2300      	movs	r3, #0
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	370c      	adds	r7, #12
 80152f0:	46bd      	mov	sp, r7
 80152f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f6:	4770      	bx	lr

080152f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8015300:	2300      	movs	r3, #0
 8015302:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8015304:	2300      	movs	r3, #0
 8015306:	73fb      	strb	r3, [r7, #15]
 8015308:	e00f      	b.n	801532a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801530a:	7bfb      	ldrb	r3, [r7, #15]
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	33e0      	adds	r3, #224	; 0xe0
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	4413      	add	r3, r2
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801531a:	2b00      	cmp	r3, #0
 801531c:	d102      	bne.n	8015324 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801531e:	7bfb      	ldrb	r3, [r7, #15]
 8015320:	b29b      	uxth	r3, r3
 8015322:	e007      	b.n	8015334 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8015324:	7bfb      	ldrb	r3, [r7, #15]
 8015326:	3301      	adds	r3, #1
 8015328:	73fb      	strb	r3, [r7, #15]
 801532a:	7bfb      	ldrb	r3, [r7, #15]
 801532c:	2b0a      	cmp	r3, #10
 801532e:	d9ec      	bls.n	801530a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8015330:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015334:	4618      	mov	r0, r3
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr

08015340 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015340:	b480      	push	{r7}
 8015342:	b087      	sub	sp, #28
 8015344:	af00      	add	r7, sp, #0
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	4613      	mov	r3, r2
 801534c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801534e:	2301      	movs	r3, #1
 8015350:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015352:	2300      	movs	r3, #0
 8015354:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015356:	4b1f      	ldr	r3, [pc, #124]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015358:	7a5b      	ldrb	r3, [r3, #9]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b00      	cmp	r3, #0
 801535e:	d131      	bne.n	80153c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015360:	4b1c      	ldr	r3, [pc, #112]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015362:	7a5b      	ldrb	r3, [r3, #9]
 8015364:	b2db      	uxtb	r3, r3
 8015366:	461a      	mov	r2, r3
 8015368:	4b1a      	ldr	r3, [pc, #104]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 801536a:	2100      	movs	r1, #0
 801536c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801536e:	4b19      	ldr	r3, [pc, #100]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015370:	7a5b      	ldrb	r3, [r3, #9]
 8015372:	b2db      	uxtb	r3, r3
 8015374:	4a17      	ldr	r2, [pc, #92]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	4413      	add	r3, r2
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801537e:	4b15      	ldr	r3, [pc, #84]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015380:	7a5b      	ldrb	r3, [r3, #9]
 8015382:	b2db      	uxtb	r3, r3
 8015384:	461a      	mov	r2, r3
 8015386:	4b13      	ldr	r3, [pc, #76]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015388:	4413      	add	r3, r2
 801538a:	79fa      	ldrb	r2, [r7, #7]
 801538c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801538e:	4b11      	ldr	r3, [pc, #68]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 8015390:	7a5b      	ldrb	r3, [r3, #9]
 8015392:	b2db      	uxtb	r3, r3
 8015394:	1c5a      	adds	r2, r3, #1
 8015396:	b2d1      	uxtb	r1, r2
 8015398:	4a0e      	ldr	r2, [pc, #56]	; (80153d4 <FATFS_LinkDriverEx+0x94>)
 801539a:	7251      	strb	r1, [r2, #9]
 801539c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801539e:	7dbb      	ldrb	r3, [r7, #22]
 80153a0:	3330      	adds	r3, #48	; 0x30
 80153a2:	b2da      	uxtb	r2, r3
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	3301      	adds	r3, #1
 80153ac:	223a      	movs	r2, #58	; 0x3a
 80153ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	3302      	adds	r3, #2
 80153b4:	222f      	movs	r2, #47	; 0x2f
 80153b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	3303      	adds	r3, #3
 80153bc:	2200      	movs	r2, #0
 80153be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80153c0:	2300      	movs	r3, #0
 80153c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80153c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	371c      	adds	r7, #28
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	20000394 	.word	0x20000394

080153d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80153e2:	2200      	movs	r2, #0
 80153e4:	6839      	ldr	r1, [r7, #0]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7ff ffaa 	bl	8015340 <FATFS_LinkDriverEx>
 80153ec:	4603      	mov	r3, r0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80153f6:	b480      	push	{r7}
 80153f8:	b085      	sub	sp, #20
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	4603      	mov	r3, r0
 80153fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015400:	2300      	movs	r3, #0
 8015402:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015408:	2b84      	cmp	r3, #132	; 0x84
 801540a:	d005      	beq.n	8015418 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801540c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	4413      	add	r3, r2
 8015414:	3303      	adds	r3, #3
 8015416:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015418:	68fb      	ldr	r3, [r7, #12]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3714      	adds	r7, #20
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr

08015426 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015426:	b480      	push	{r7}
 8015428:	b083      	sub	sp, #12
 801542a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801542c:	f3ef 8305 	mrs	r3, IPSR
 8015430:	607b      	str	r3, [r7, #4]
  return(result);
 8015432:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015434:	2b00      	cmp	r3, #0
 8015436:	bf14      	ite	ne
 8015438:	2301      	movne	r3, #1
 801543a:	2300      	moveq	r3, #0
 801543c:	b2db      	uxtb	r3, r3
}
 801543e:	4618      	mov	r0, r3
 8015440:	370c      	adds	r7, #12
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr

0801544a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801544e:	f001 f9e7 	bl	8016820 <vTaskStartScheduler>
  
  return osOK;
 8015452:	2300      	movs	r3, #0
}
 8015454:	4618      	mov	r0, r3
 8015456:	bd80      	pop	{r7, pc}

08015458 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801545c:	f001 fe3a 	bl	80170d4 <xTaskGetSchedulerState>
 8015460:	4603      	mov	r3, r0
 8015462:	2b01      	cmp	r3, #1
 8015464:	d101      	bne.n	801546a <osKernelRunning+0x12>
    return 0;
 8015466:	2300      	movs	r3, #0
 8015468:	e000      	b.n	801546c <osKernelRunning+0x14>
  else
    return 1;
 801546a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801546c:	4618      	mov	r0, r3
 801546e:	bd80      	pop	{r7, pc}

08015470 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8015474:	f7ff ffd7 	bl	8015426 <inHandlerMode>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d003      	beq.n	8015486 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801547e:	f001 faef 	bl	8016a60 <xTaskGetTickCountFromISR>
 8015482:	4603      	mov	r3, r0
 8015484:	e002      	b.n	801548c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8015486:	f001 fadb 	bl	8016a40 <xTaskGetTickCount>
 801548a:	4603      	mov	r3, r0
  }
}
 801548c:	4618      	mov	r0, r3
 801548e:	bd80      	pop	{r7, pc}

08015490 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015492:	b089      	sub	sp, #36	; 0x24
 8015494:	af04      	add	r7, sp, #16
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	695b      	ldr	r3, [r3, #20]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d020      	beq.n	80154e4 <osThreadCreate+0x54>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	699b      	ldr	r3, [r3, #24]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d01c      	beq.n	80154e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	685c      	ldr	r4, [r3, #4]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681d      	ldr	r5, [r3, #0]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	691e      	ldr	r6, [r3, #16]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80154bc:	4618      	mov	r0, r3
 80154be:	f7ff ff9a 	bl	80153f6 <makeFreeRtosPriority>
 80154c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	695b      	ldr	r3, [r3, #20]
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154cc:	9202      	str	r2, [sp, #8]
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	9100      	str	r1, [sp, #0]
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	4632      	mov	r2, r6
 80154d6:	4629      	mov	r1, r5
 80154d8:	4620      	mov	r0, r4
 80154da:	f000 ffc5 	bl	8016468 <xTaskCreateStatic>
 80154de:	4603      	mov	r3, r0
 80154e0:	60fb      	str	r3, [r7, #12]
 80154e2:	e01c      	b.n	801551e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	685c      	ldr	r4, [r3, #4]
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154f0:	b29e      	uxth	r6, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7ff ff7c 	bl	80153f6 <makeFreeRtosPriority>
 80154fe:	4602      	mov	r2, r0
 8015500:	f107 030c 	add.w	r3, r7, #12
 8015504:	9301      	str	r3, [sp, #4]
 8015506:	9200      	str	r2, [sp, #0]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	4632      	mov	r2, r6
 801550c:	4629      	mov	r1, r5
 801550e:	4620      	mov	r0, r4
 8015510:	f001 f80d 	bl	801652e <xTaskCreate>
 8015514:	4603      	mov	r3, r0
 8015516:	2b01      	cmp	r3, #1
 8015518:	d001      	beq.n	801551e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801551a:	2300      	movs	r3, #0
 801551c:	e000      	b.n	8015520 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801551e:	68fb      	ldr	r3, [r7, #12]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3714      	adds	r7, #20
 8015524:	46bd      	mov	sp, r7
 8015526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015528 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <osDelay+0x16>
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	e000      	b.n	8015540 <osDelay+0x18>
 801553e:	2301      	movs	r3, #1
 8015540:	4618      	mov	r0, r3
 8015542:	f001 f937 	bl	80167b4 <vTaskDelay>
  
  return osOK;
 8015546:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015548:	4618      	mov	r0, r3
 801554a:	3710      	adds	r7, #16
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b086      	sub	sp, #24
 8015554:	af02      	add	r7, sp, #8
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801555a:	2300      	movs	r3, #0
 801555c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8015562:	f7ff ff60 	bl	8015426 <inHandlerMode>
 8015566:	4603      	mov	r3, r0
 8015568:	2b00      	cmp	r3, #0
 801556a:	d01c      	beq.n	80155a6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	f107 0208 	add.w	r2, r7, #8
 8015572:	f107 030c 	add.w	r3, r7, #12
 8015576:	9300      	str	r3, [sp, #0]
 8015578:	4613      	mov	r3, r2
 801557a:	2201      	movs	r2, #1
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f001 ff67 	bl	8017450 <xTaskGenericNotifyFromISR>
 8015582:	4603      	mov	r3, r0
 8015584:	2b01      	cmp	r3, #1
 8015586:	d002      	beq.n	801558e <osSignalSet+0x3e>
      return 0x80000000;
 8015588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801558c:	e019      	b.n	80155c2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d015      	beq.n	80155c0 <osSignalSet+0x70>
 8015594:	4b0d      	ldr	r3, [pc, #52]	; (80155cc <osSignalSet+0x7c>)
 8015596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801559a:	601a      	str	r2, [r3, #0]
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	f3bf 8f6f 	isb	sy
 80155a4:	e00c      	b.n	80155c0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80155a6:	6839      	ldr	r1, [r7, #0]
 80155a8:	f107 0308 	add.w	r3, r7, #8
 80155ac:	2201      	movs	r2, #1
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f001 fe92 	bl	80172d8 <xTaskGenericNotify>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d002      	beq.n	80155c0 <osSignalSet+0x70>
    return 0x80000000;
 80155ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80155be:	e000      	b.n	80155c2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80155c0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	e000ed04 	.word	0xe000ed04

080155d0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b089      	sub	sp, #36	; 0x24
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80155dc:	2300      	movs	r3, #0
 80155de:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155ea:	d103      	bne.n	80155f4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80155ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155f0:	61fb      	str	r3, [r7, #28]
 80155f2:	e009      	b.n	8015608 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d006      	beq.n	8015608 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d101      	bne.n	8015608 <osSignalWait+0x38>
      ticks = 1;
 8015604:	2301      	movs	r3, #1
 8015606:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8015608:	f7ff ff0d 	bl	8015426 <inHandlerMode>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	d002      	beq.n	8015618 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8015612:	2382      	movs	r3, #130	; 0x82
 8015614:	613b      	str	r3, [r7, #16]
 8015616:	e01b      	b.n	8015650 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8015618:	68b9      	ldr	r1, [r7, #8]
 801561a:	f107 0310 	add.w	r3, r7, #16
 801561e:	1d1a      	adds	r2, r3, #4
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	2000      	movs	r0, #0
 8015624:	f001 fdfe 	bl	8017224 <xTaskNotifyWait>
 8015628:	4603      	mov	r3, r0
 801562a:	2b01      	cmp	r3, #1
 801562c:	d008      	beq.n	8015640 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d102      	bne.n	801563a <osSignalWait+0x6a>
 8015634:	2300      	movs	r3, #0
 8015636:	613b      	str	r3, [r7, #16]
 8015638:	e00a      	b.n	8015650 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801563a:	2340      	movs	r3, #64	; 0x40
 801563c:	613b      	str	r3, [r7, #16]
 801563e:	e007      	b.n	8015650 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	2b00      	cmp	r3, #0
 8015644:	da02      	bge.n	801564c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8015646:	2386      	movs	r3, #134	; 0x86
 8015648:	613b      	str	r3, [r7, #16]
 801564a:	e001      	b.n	8015650 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 801564c:	2308      	movs	r3, #8
 801564e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	461c      	mov	r4, r3
 8015654:	f107 0310 	add.w	r3, r7, #16
 8015658:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801565c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	3724      	adds	r7, #36	; 0x24
 8015664:	46bd      	mov	sp, r7
 8015666:	bd90      	pop	{r4, r7, pc}

08015668 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015668:	b590      	push	{r4, r7, lr}
 801566a:	b085      	sub	sp, #20
 801566c:	af02      	add	r7, sp, #8
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	689b      	ldr	r3, [r3, #8]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d011      	beq.n	801569e <osMessageCreate+0x36>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d00d      	beq.n	801569e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6818      	ldr	r0, [r3, #0]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6859      	ldr	r1, [r3, #4]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	689a      	ldr	r2, [r3, #8]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	2400      	movs	r4, #0
 8015694:	9400      	str	r4, [sp, #0]
 8015696:	f000 f9e1 	bl	8015a5c <xQueueGenericCreateStatic>
 801569a:	4603      	mov	r3, r0
 801569c:	e008      	b.n	80156b0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6818      	ldr	r0, [r3, #0]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	4619      	mov	r1, r3
 80156aa:	f000 fa59 	bl	8015b60 <xQueueGenericCreate>
 80156ae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	370c      	adds	r7, #12
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd90      	pop	{r4, r7, pc}

080156b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b086      	sub	sp, #24
 80156bc:	af00      	add	r7, sp, #0
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80156c4:	2300      	movs	r3, #0
 80156c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d101      	bne.n	80156d6 <osMessagePut+0x1e>
    ticks = 1;
 80156d2:	2301      	movs	r3, #1
 80156d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80156d6:	f7ff fea6 	bl	8015426 <inHandlerMode>
 80156da:	4603      	mov	r3, r0
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d018      	beq.n	8015712 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80156e0:	f107 0210 	add.w	r2, r7, #16
 80156e4:	f107 0108 	add.w	r1, r7, #8
 80156e8:	2300      	movs	r3, #0
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	f000 fba0 	bl	8015e30 <xQueueGenericSendFromISR>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d001      	beq.n	80156fa <osMessagePut+0x42>
      return osErrorOS;
 80156f6:	23ff      	movs	r3, #255	; 0xff
 80156f8:	e018      	b.n	801572c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d014      	beq.n	801572a <osMessagePut+0x72>
 8015700:	4b0c      	ldr	r3, [pc, #48]	; (8015734 <osMessagePut+0x7c>)
 8015702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015706:	601a      	str	r2, [r3, #0]
 8015708:	f3bf 8f4f 	dsb	sy
 801570c:	f3bf 8f6f 	isb	sy
 8015710:	e00b      	b.n	801572a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015712:	f107 0108 	add.w	r1, r7, #8
 8015716:	2300      	movs	r3, #0
 8015718:	697a      	ldr	r2, [r7, #20]
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f000 fa82 	bl	8015c24 <xQueueGenericSend>
 8015720:	4603      	mov	r3, r0
 8015722:	2b01      	cmp	r3, #1
 8015724:	d001      	beq.n	801572a <osMessagePut+0x72>
      return osErrorOS;
 8015726:	23ff      	movs	r3, #255	; 0xff
 8015728:	e000      	b.n	801572c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801572a:	2300      	movs	r3, #0
}
 801572c:	4618      	mov	r0, r3
 801572e:	3718      	adds	r7, #24
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}
 8015734:	e000ed04 	.word	0xe000ed04

08015738 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015738:	b590      	push	{r4, r7, lr}
 801573a:	b08b      	sub	sp, #44	; 0x2c
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d10a      	bne.n	8015768 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015752:	2380      	movs	r3, #128	; 0x80
 8015754:	617b      	str	r3, [r7, #20]
    return event;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	461c      	mov	r4, r3
 801575a:	f107 0314 	add.w	r3, r7, #20
 801575e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015766:	e054      	b.n	8015812 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015768:	2300      	movs	r3, #0
 801576a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801576c:	2300      	movs	r3, #0
 801576e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015776:	d103      	bne.n	8015780 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801577c:	627b      	str	r3, [r7, #36]	; 0x24
 801577e:	e009      	b.n	8015794 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d006      	beq.n	8015794 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <osMessageGet+0x5c>
      ticks = 1;
 8015790:	2301      	movs	r3, #1
 8015792:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015794:	f7ff fe47 	bl	8015426 <inHandlerMode>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d01c      	beq.n	80157d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801579e:	f107 0220 	add.w	r2, r7, #32
 80157a2:	f107 0314 	add.w	r3, r7, #20
 80157a6:	3304      	adds	r3, #4
 80157a8:	4619      	mov	r1, r3
 80157aa:	68b8      	ldr	r0, [r7, #8]
 80157ac:	f000 fcc6 	bl	801613c <xQueueReceiveFromISR>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d102      	bne.n	80157bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80157b6:	2310      	movs	r3, #16
 80157b8:	617b      	str	r3, [r7, #20]
 80157ba:	e001      	b.n	80157c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80157bc:	2300      	movs	r3, #0
 80157be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80157c0:	6a3b      	ldr	r3, [r7, #32]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d01d      	beq.n	8015802 <osMessageGet+0xca>
 80157c6:	4b15      	ldr	r3, [pc, #84]	; (801581c <osMessageGet+0xe4>)
 80157c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157cc:	601a      	str	r2, [r3, #0]
 80157ce:	f3bf 8f4f 	dsb	sy
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	e014      	b.n	8015802 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80157d8:	f107 0314 	add.w	r3, r7, #20
 80157dc:	3304      	adds	r3, #4
 80157de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157e0:	4619      	mov	r1, r3
 80157e2:	68b8      	ldr	r0, [r7, #8]
 80157e4:	f000 fbc4 	bl	8015f70 <xQueueReceive>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d102      	bne.n	80157f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80157ee:	2310      	movs	r3, #16
 80157f0:	617b      	str	r3, [r7, #20]
 80157f2:	e006      	b.n	8015802 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80157f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d101      	bne.n	80157fe <osMessageGet+0xc6>
 80157fa:	2300      	movs	r3, #0
 80157fc:	e000      	b.n	8015800 <osMessageGet+0xc8>
 80157fe:	2340      	movs	r3, #64	; 0x40
 8015800:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	461c      	mov	r4, r3
 8015806:	f107 0314 	add.w	r3, r7, #20
 801580a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801580e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015812:	68f8      	ldr	r0, [r7, #12]
 8015814:	372c      	adds	r7, #44	; 0x2c
 8015816:	46bd      	mov	sp, r7
 8015818:	bd90      	pop	{r4, r7, pc}
 801581a:	bf00      	nop
 801581c:	e000ed04 	.word	0xe000ed04

08015820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015820:	b480      	push	{r7}
 8015822:	b083      	sub	sp, #12
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f103 0208 	add.w	r2, r3, #8
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f103 0208 	add.w	r2, r3, #8
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f103 0208 	add.w	r2, r3, #8
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2200      	movs	r2, #0
 8015852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801586e:	bf00      	nop
 8015870:	370c      	adds	r7, #12
 8015872:	46bd      	mov	sp, r7
 8015874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015878:	4770      	bx	lr

0801587a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801587a:	b480      	push	{r7}
 801587c:	b085      	sub	sp, #20
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
 8015882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	68fa      	ldr	r2, [r7, #12]
 801588e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	689a      	ldr	r2, [r3, #8]
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	683a      	ldr	r2, [r7, #0]
 801589e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	683a      	ldr	r2, [r7, #0]
 80158a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	1c5a      	adds	r2, r3, #1
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	601a      	str	r2, [r3, #0]
}
 80158b6:	bf00      	nop
 80158b8:	3714      	adds	r7, #20
 80158ba:	46bd      	mov	sp, r7
 80158bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c0:	4770      	bx	lr

080158c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80158c2:	b480      	push	{r7}
 80158c4:	b085      	sub	sp, #20
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	6078      	str	r0, [r7, #4]
 80158ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158d8:	d103      	bne.n	80158e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	e00c      	b.n	80158fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	3308      	adds	r3, #8
 80158e6:	60fb      	str	r3, [r7, #12]
 80158e8:	e002      	b.n	80158f0 <vListInsert+0x2e>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	60fb      	str	r3, [r7, #12]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	68ba      	ldr	r2, [r7, #8]
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d2f6      	bcs.n	80158ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	685a      	ldr	r2, [r3, #4]
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	683a      	ldr	r2, [r7, #0]
 801590a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	683a      	ldr	r2, [r7, #0]
 8015916:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	687a      	ldr	r2, [r7, #4]
 801591c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	1c5a      	adds	r2, r3, #1
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	601a      	str	r2, [r3, #0]
}
 8015928:	bf00      	nop
 801592a:	3714      	adds	r7, #20
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr

08015934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015934:	b480      	push	{r7}
 8015936:	b085      	sub	sp, #20
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	691b      	ldr	r3, [r3, #16]
 8015940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	6892      	ldr	r2, [r2, #8]
 801594a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	6852      	ldr	r2, [r2, #4]
 8015954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	429a      	cmp	r2, r3
 801595e:	d103      	bne.n	8015968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	689a      	ldr	r2, [r3, #8]
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2200      	movs	r2, #0
 801596c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	1e5a      	subs	r2, r3, #1
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	681b      	ldr	r3, [r3, #0]
}
 801597c:	4618      	mov	r0, r3
 801597e:	3714      	adds	r7, #20
 8015980:	46bd      	mov	sp, r7
 8015982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015986:	4770      	bx	lr

08015988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d10c      	bne.n	80159b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a0:	b672      	cpsid	i
 80159a2:	f383 8811 	msr	BASEPRI, r3
 80159a6:	f3bf 8f6f 	isb	sy
 80159aa:	f3bf 8f4f 	dsb	sy
 80159ae:	b662      	cpsie	i
 80159b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80159b2:	bf00      	nop
 80159b4:	e7fe      	b.n	80159b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80159b6:	f001 ffa1 	bl	80178fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159c2:	68f9      	ldr	r1, [r7, #12]
 80159c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80159c6:	fb01 f303 	mul.w	r3, r1, r3
 80159ca:	441a      	add	r2, r3
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	2200      	movs	r2, #0
 80159d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159e6:	3b01      	subs	r3, #1
 80159e8:	68f9      	ldr	r1, [r7, #12]
 80159ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80159ec:	fb01 f303 	mul.w	r3, r1, r3
 80159f0:	441a      	add	r2, r3
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	22ff      	movs	r2, #255	; 0xff
 80159fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	22ff      	movs	r2, #255	; 0xff
 8015a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d114      	bne.n	8015a36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	691b      	ldr	r3, [r3, #16]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d01a      	beq.n	8015a4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	3310      	adds	r3, #16
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f001 f995 	bl	8016d48 <xTaskRemoveFromEventList>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d012      	beq.n	8015a4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015a24:	4b0c      	ldr	r3, [pc, #48]	; (8015a58 <xQueueGenericReset+0xd0>)
 8015a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a2a:	601a      	str	r2, [r3, #0]
 8015a2c:	f3bf 8f4f 	dsb	sy
 8015a30:	f3bf 8f6f 	isb	sy
 8015a34:	e009      	b.n	8015a4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	3310      	adds	r3, #16
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7ff fef0 	bl	8015820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	3324      	adds	r3, #36	; 0x24
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7ff feeb 	bl	8015820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015a4a:	f001 ff8b 	bl	8017964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015a4e:	2301      	movs	r3, #1
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	e000ed04 	.word	0xe000ed04

08015a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08e      	sub	sp, #56	; 0x38
 8015a60:	af02      	add	r7, sp, #8
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d10c      	bne.n	8015a8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8015a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a74:	b672      	cpsid	i
 8015a76:	f383 8811 	msr	BASEPRI, r3
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	b662      	cpsie	i
 8015a84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015a86:	bf00      	nop
 8015a88:	e7fe      	b.n	8015a88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d10c      	bne.n	8015aaa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8015a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a94:	b672      	cpsid	i
 8015a96:	f383 8811 	msr	BASEPRI, r3
 8015a9a:	f3bf 8f6f 	isb	sy
 8015a9e:	f3bf 8f4f 	dsb	sy
 8015aa2:	b662      	cpsie	i
 8015aa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015aa6:	bf00      	nop
 8015aa8:	e7fe      	b.n	8015aa8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <xQueueGenericCreateStatic+0x5a>
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d001      	beq.n	8015aba <xQueueGenericCreateStatic+0x5e>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e000      	b.n	8015abc <xQueueGenericCreateStatic+0x60>
 8015aba:	2300      	movs	r3, #0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10c      	bne.n	8015ada <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8015ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac4:	b672      	cpsid	i
 8015ac6:	f383 8811 	msr	BASEPRI, r3
 8015aca:	f3bf 8f6f 	isb	sy
 8015ace:	f3bf 8f4f 	dsb	sy
 8015ad2:	b662      	cpsie	i
 8015ad4:	623b      	str	r3, [r7, #32]
}
 8015ad6:	bf00      	nop
 8015ad8:	e7fe      	b.n	8015ad8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d102      	bne.n	8015ae6 <xQueueGenericCreateStatic+0x8a>
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d101      	bne.n	8015aea <xQueueGenericCreateStatic+0x8e>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	e000      	b.n	8015aec <xQueueGenericCreateStatic+0x90>
 8015aea:	2300      	movs	r3, #0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d10c      	bne.n	8015b0a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	b672      	cpsid	i
 8015af6:	f383 8811 	msr	BASEPRI, r3
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	b662      	cpsie	i
 8015b04:	61fb      	str	r3, [r7, #28]
}
 8015b06:	bf00      	nop
 8015b08:	e7fe      	b.n	8015b08 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015b0a:	2348      	movs	r3, #72	; 0x48
 8015b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	2b48      	cmp	r3, #72	; 0x48
 8015b12:	d00c      	beq.n	8015b2e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8015b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b18:	b672      	cpsid	i
 8015b1a:	f383 8811 	msr	BASEPRI, r3
 8015b1e:	f3bf 8f6f 	isb	sy
 8015b22:	f3bf 8f4f 	dsb	sy
 8015b26:	b662      	cpsie	i
 8015b28:	61bb      	str	r3, [r7, #24]
}
 8015b2a:	bf00      	nop
 8015b2c:	e7fe      	b.n	8015b2c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015b2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d00d      	beq.n	8015b56 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b48:	9300      	str	r3, [sp, #0]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	68b9      	ldr	r1, [r7, #8]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f000 f847 	bl	8015be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3730      	adds	r7, #48	; 0x30
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b08a      	sub	sp, #40	; 0x28
 8015b64:	af02      	add	r7, sp, #8
 8015b66:	60f8      	str	r0, [r7, #12]
 8015b68:	60b9      	str	r1, [r7, #8]
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d10c      	bne.n	8015b8e <xQueueGenericCreate+0x2e>
	__asm volatile
 8015b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b78:	b672      	cpsid	i
 8015b7a:	f383 8811 	msr	BASEPRI, r3
 8015b7e:	f3bf 8f6f 	isb	sy
 8015b82:	f3bf 8f4f 	dsb	sy
 8015b86:	b662      	cpsie	i
 8015b88:	613b      	str	r3, [r7, #16]
}
 8015b8a:	bf00      	nop
 8015b8c:	e7fe      	b.n	8015b8c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015b8e:	68bb      	ldr	r3, [r7, #8]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d102      	bne.n	8015b9a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	61fb      	str	r3, [r7, #28]
 8015b98:	e004      	b.n	8015ba4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	68ba      	ldr	r2, [r7, #8]
 8015b9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ba2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015ba4:	69fb      	ldr	r3, [r7, #28]
 8015ba6:	3348      	adds	r3, #72	; 0x48
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f001 ffd3 	bl	8017b54 <pvPortMalloc>
 8015bae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015bb0:	69bb      	ldr	r3, [r7, #24]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d011      	beq.n	8015bda <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015bb6:	69bb      	ldr	r3, [r7, #24]
 8015bb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	3348      	adds	r3, #72	; 0x48
 8015bbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015bc8:	79fa      	ldrb	r2, [r7, #7]
 8015bca:	69bb      	ldr	r3, [r7, #24]
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	697a      	ldr	r2, [r7, #20]
 8015bd2:	68b9      	ldr	r1, [r7, #8]
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f000 f805 	bl	8015be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015bda:	69bb      	ldr	r3, [r7, #24]
	}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3720      	adds	r7, #32
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}

08015be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	60b9      	str	r1, [r7, #8]
 8015bee:	607a      	str	r2, [r7, #4]
 8015bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d103      	bne.n	8015c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	69ba      	ldr	r2, [r7, #24]
 8015bfc:	601a      	str	r2, [r3, #0]
 8015bfe:	e002      	b.n	8015c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	68fa      	ldr	r2, [r7, #12]
 8015c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015c0c:	69bb      	ldr	r3, [r7, #24]
 8015c0e:	68ba      	ldr	r2, [r7, #8]
 8015c10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c12:	2101      	movs	r1, #1
 8015c14:	69b8      	ldr	r0, [r7, #24]
 8015c16:	f7ff feb7 	bl	8015988 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015c1a:	bf00      	nop
 8015c1c:	3710      	adds	r7, #16
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
	...

08015c24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b08e      	sub	sp, #56	; 0x38
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	60f8      	str	r0, [r7, #12]
 8015c2c:	60b9      	str	r1, [r7, #8]
 8015c2e:	607a      	str	r2, [r7, #4]
 8015c30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015c32:	2300      	movs	r3, #0
 8015c34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d10c      	bne.n	8015c5a <xQueueGenericSend+0x36>
	__asm volatile
 8015c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c44:	b672      	cpsid	i
 8015c46:	f383 8811 	msr	BASEPRI, r3
 8015c4a:	f3bf 8f6f 	isb	sy
 8015c4e:	f3bf 8f4f 	dsb	sy
 8015c52:	b662      	cpsie	i
 8015c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c56:	bf00      	nop
 8015c58:	e7fe      	b.n	8015c58 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d103      	bne.n	8015c68 <xQueueGenericSend+0x44>
 8015c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d101      	bne.n	8015c6c <xQueueGenericSend+0x48>
 8015c68:	2301      	movs	r3, #1
 8015c6a:	e000      	b.n	8015c6e <xQueueGenericSend+0x4a>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d10c      	bne.n	8015c8c <xQueueGenericSend+0x68>
	__asm volatile
 8015c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c76:	b672      	cpsid	i
 8015c78:	f383 8811 	msr	BASEPRI, r3
 8015c7c:	f3bf 8f6f 	isb	sy
 8015c80:	f3bf 8f4f 	dsb	sy
 8015c84:	b662      	cpsie	i
 8015c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c88:	bf00      	nop
 8015c8a:	e7fe      	b.n	8015c8a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	2b02      	cmp	r3, #2
 8015c90:	d103      	bne.n	8015c9a <xQueueGenericSend+0x76>
 8015c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d101      	bne.n	8015c9e <xQueueGenericSend+0x7a>
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	e000      	b.n	8015ca0 <xQueueGenericSend+0x7c>
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10c      	bne.n	8015cbe <xQueueGenericSend+0x9a>
	__asm volatile
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	b672      	cpsid	i
 8015caa:	f383 8811 	msr	BASEPRI, r3
 8015cae:	f3bf 8f6f 	isb	sy
 8015cb2:	f3bf 8f4f 	dsb	sy
 8015cb6:	b662      	cpsie	i
 8015cb8:	623b      	str	r3, [r7, #32]
}
 8015cba:	bf00      	nop
 8015cbc:	e7fe      	b.n	8015cbc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015cbe:	f001 fa09 	bl	80170d4 <xTaskGetSchedulerState>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d102      	bne.n	8015cce <xQueueGenericSend+0xaa>
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <xQueueGenericSend+0xae>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e000      	b.n	8015cd4 <xQueueGenericSend+0xb0>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d10c      	bne.n	8015cf2 <xQueueGenericSend+0xce>
	__asm volatile
 8015cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cdc:	b672      	cpsid	i
 8015cde:	f383 8811 	msr	BASEPRI, r3
 8015ce2:	f3bf 8f6f 	isb	sy
 8015ce6:	f3bf 8f4f 	dsb	sy
 8015cea:	b662      	cpsie	i
 8015cec:	61fb      	str	r3, [r7, #28]
}
 8015cee:	bf00      	nop
 8015cf0:	e7fe      	b.n	8015cf0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015cf2:	f001 fe03 	bl	80178fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d302      	bcc.n	8015d08 <xQueueGenericSend+0xe4>
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	2b02      	cmp	r3, #2
 8015d06:	d129      	bne.n	8015d5c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d08:	683a      	ldr	r2, [r7, #0]
 8015d0a:	68b9      	ldr	r1, [r7, #8]
 8015d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d0e:	f000 fa9b 	bl	8016248 <prvCopyDataToQueue>
 8015d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d010      	beq.n	8015d3e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1e:	3324      	adds	r3, #36	; 0x24
 8015d20:	4618      	mov	r0, r3
 8015d22:	f001 f811 	bl	8016d48 <xTaskRemoveFromEventList>
 8015d26:	4603      	mov	r3, r0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d013      	beq.n	8015d54 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015d2c:	4b3f      	ldr	r3, [pc, #252]	; (8015e2c <xQueueGenericSend+0x208>)
 8015d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d32:	601a      	str	r2, [r3, #0]
 8015d34:	f3bf 8f4f 	dsb	sy
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	e00a      	b.n	8015d54 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d007      	beq.n	8015d54 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015d44:	4b39      	ldr	r3, [pc, #228]	; (8015e2c <xQueueGenericSend+0x208>)
 8015d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d4a:	601a      	str	r2, [r3, #0]
 8015d4c:	f3bf 8f4f 	dsb	sy
 8015d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015d54:	f001 fe06 	bl	8017964 <vPortExitCritical>
				return pdPASS;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	e063      	b.n	8015e24 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d103      	bne.n	8015d6a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d62:	f001 fdff 	bl	8017964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015d66:	2300      	movs	r3, #0
 8015d68:	e05c      	b.n	8015e24 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d106      	bne.n	8015d7e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d70:	f107 0314 	add.w	r3, r7, #20
 8015d74:	4618      	mov	r0, r3
 8015d76:	f001 f84b 	bl	8016e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d7e:	f001 fdf1 	bl	8017964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d82:	f000 fdb1 	bl	80168e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d86:	f001 fdb9 	bl	80178fc <vPortEnterCritical>
 8015d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d90:	b25b      	sxtb	r3, r3
 8015d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d96:	d103      	bne.n	8015da0 <xQueueGenericSend+0x17c>
 8015d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015da6:	b25b      	sxtb	r3, r3
 8015da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dac:	d103      	bne.n	8015db6 <xQueueGenericSend+0x192>
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	2200      	movs	r2, #0
 8015db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015db6:	f001 fdd5 	bl	8017964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015dba:	1d3a      	adds	r2, r7, #4
 8015dbc:	f107 0314 	add.w	r3, r7, #20
 8015dc0:	4611      	mov	r1, r2
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f001 f83a 	bl	8016e3c <xTaskCheckForTimeOut>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d124      	bne.n	8015e18 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dd0:	f000 fb32 	bl	8016438 <prvIsQueueFull>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d018      	beq.n	8015e0c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ddc:	3310      	adds	r3, #16
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	4611      	mov	r1, r2
 8015de2:	4618      	mov	r0, r3
 8015de4:	f000 ff8a 	bl	8016cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dea:	f000 fabd 	bl	8016368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015dee:	f000 fd89 	bl	8016904 <xTaskResumeAll>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	f47f af7c 	bne.w	8015cf2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8015dfa:	4b0c      	ldr	r3, [pc, #48]	; (8015e2c <xQueueGenericSend+0x208>)
 8015dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e00:	601a      	str	r2, [r3, #0]
 8015e02:	f3bf 8f4f 	dsb	sy
 8015e06:	f3bf 8f6f 	isb	sy
 8015e0a:	e772      	b.n	8015cf2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e0e:	f000 faab 	bl	8016368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e12:	f000 fd77 	bl	8016904 <xTaskResumeAll>
 8015e16:	e76c      	b.n	8015cf2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e1a:	f000 faa5 	bl	8016368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e1e:	f000 fd71 	bl	8016904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3738      	adds	r7, #56	; 0x38
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	e000ed04 	.word	0xe000ed04

08015e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b08e      	sub	sp, #56	; 0x38
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
 8015e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d10c      	bne.n	8015e62 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8015e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4c:	b672      	cpsid	i
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	b662      	cpsie	i
 8015e5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e5e:	bf00      	nop
 8015e60:	e7fe      	b.n	8015e60 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d103      	bne.n	8015e70 <xQueueGenericSendFromISR+0x40>
 8015e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <xQueueGenericSendFromISR+0x44>
 8015e70:	2301      	movs	r3, #1
 8015e72:	e000      	b.n	8015e76 <xQueueGenericSendFromISR+0x46>
 8015e74:	2300      	movs	r3, #0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d10c      	bne.n	8015e94 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7e:	b672      	cpsid	i
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	b662      	cpsie	i
 8015e8e:	623b      	str	r3, [r7, #32]
}
 8015e90:	bf00      	nop
 8015e92:	e7fe      	b.n	8015e92 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	2b02      	cmp	r3, #2
 8015e98:	d103      	bne.n	8015ea2 <xQueueGenericSendFromISR+0x72>
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d101      	bne.n	8015ea6 <xQueueGenericSendFromISR+0x76>
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	e000      	b.n	8015ea8 <xQueueGenericSendFromISR+0x78>
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d10c      	bne.n	8015ec6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb0:	b672      	cpsid	i
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	b662      	cpsie	i
 8015ec0:	61fb      	str	r3, [r7, #28]
}
 8015ec2:	bf00      	nop
 8015ec4:	e7fe      	b.n	8015ec4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ec6:	f001 fe01 	bl	8017acc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015eca:	f3ef 8211 	mrs	r2, BASEPRI
 8015ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed2:	b672      	cpsid	i
 8015ed4:	f383 8811 	msr	BASEPRI, r3
 8015ed8:	f3bf 8f6f 	isb	sy
 8015edc:	f3bf 8f4f 	dsb	sy
 8015ee0:	b662      	cpsie	i
 8015ee2:	61ba      	str	r2, [r7, #24]
 8015ee4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015ee6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d302      	bcc.n	8015efc <xQueueGenericSendFromISR+0xcc>
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	2b02      	cmp	r3, #2
 8015efa:	d12c      	bne.n	8015f56 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f06:	683a      	ldr	r2, [r7, #0]
 8015f08:	68b9      	ldr	r1, [r7, #8]
 8015f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f0c:	f000 f99c 	bl	8016248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015f10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f18:	d112      	bne.n	8015f40 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d016      	beq.n	8015f50 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	3324      	adds	r3, #36	; 0x24
 8015f26:	4618      	mov	r0, r3
 8015f28:	f000 ff0e 	bl	8016d48 <xTaskRemoveFromEventList>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00e      	beq.n	8015f50 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d00b      	beq.n	8015f50 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	601a      	str	r2, [r3, #0]
 8015f3e:	e007      	b.n	8015f50 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015f44:	3301      	adds	r3, #1
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	b25a      	sxtb	r2, r3
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f50:	2301      	movs	r3, #1
 8015f52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015f54:	e001      	b.n	8015f5a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015f56:	2300      	movs	r3, #0
 8015f58:	637b      	str	r3, [r7, #52]	; 0x34
 8015f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015f64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3738      	adds	r7, #56	; 0x38
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b08c      	sub	sp, #48	; 0x30
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	60f8      	str	r0, [r7, #12]
 8015f78:	60b9      	str	r1, [r7, #8]
 8015f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d10c      	bne.n	8015fa4 <xQueueReceive+0x34>
	__asm volatile
 8015f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f8e:	b672      	cpsid	i
 8015f90:	f383 8811 	msr	BASEPRI, r3
 8015f94:	f3bf 8f6f 	isb	sy
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	b662      	cpsie	i
 8015f9e:	623b      	str	r3, [r7, #32]
}
 8015fa0:	bf00      	nop
 8015fa2:	e7fe      	b.n	8015fa2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d103      	bne.n	8015fb2 <xQueueReceive+0x42>
 8015faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d101      	bne.n	8015fb6 <xQueueReceive+0x46>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e000      	b.n	8015fb8 <xQueueReceive+0x48>
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10c      	bne.n	8015fd6 <xQueueReceive+0x66>
	__asm volatile
 8015fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc0:	b672      	cpsid	i
 8015fc2:	f383 8811 	msr	BASEPRI, r3
 8015fc6:	f3bf 8f6f 	isb	sy
 8015fca:	f3bf 8f4f 	dsb	sy
 8015fce:	b662      	cpsie	i
 8015fd0:	61fb      	str	r3, [r7, #28]
}
 8015fd2:	bf00      	nop
 8015fd4:	e7fe      	b.n	8015fd4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015fd6:	f001 f87d 	bl	80170d4 <xTaskGetSchedulerState>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d102      	bne.n	8015fe6 <xQueueReceive+0x76>
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d101      	bne.n	8015fea <xQueueReceive+0x7a>
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	e000      	b.n	8015fec <xQueueReceive+0x7c>
 8015fea:	2300      	movs	r3, #0
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d10c      	bne.n	801600a <xQueueReceive+0x9a>
	__asm volatile
 8015ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff4:	b672      	cpsid	i
 8015ff6:	f383 8811 	msr	BASEPRI, r3
 8015ffa:	f3bf 8f6f 	isb	sy
 8015ffe:	f3bf 8f4f 	dsb	sy
 8016002:	b662      	cpsie	i
 8016004:	61bb      	str	r3, [r7, #24]
}
 8016006:	bf00      	nop
 8016008:	e7fe      	b.n	8016008 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801600a:	f001 fc77 	bl	80178fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016016:	2b00      	cmp	r3, #0
 8016018:	d01f      	beq.n	801605a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801601a:	68b9      	ldr	r1, [r7, #8]
 801601c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801601e:	f000 f97d 	bl	801631c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016024:	1e5a      	subs	r2, r3, #1
 8016026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	691b      	ldr	r3, [r3, #16]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d00f      	beq.n	8016052 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016034:	3310      	adds	r3, #16
 8016036:	4618      	mov	r0, r3
 8016038:	f000 fe86 	bl	8016d48 <xTaskRemoveFromEventList>
 801603c:	4603      	mov	r3, r0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d007      	beq.n	8016052 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016042:	4b3d      	ldr	r3, [pc, #244]	; (8016138 <xQueueReceive+0x1c8>)
 8016044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016048:	601a      	str	r2, [r3, #0]
 801604a:	f3bf 8f4f 	dsb	sy
 801604e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016052:	f001 fc87 	bl	8017964 <vPortExitCritical>
				return pdPASS;
 8016056:	2301      	movs	r3, #1
 8016058:	e069      	b.n	801612e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d103      	bne.n	8016068 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016060:	f001 fc80 	bl	8017964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016064:	2300      	movs	r3, #0
 8016066:	e062      	b.n	801612e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606a:	2b00      	cmp	r3, #0
 801606c:	d106      	bne.n	801607c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801606e:	f107 0310 	add.w	r3, r7, #16
 8016072:	4618      	mov	r0, r3
 8016074:	f000 fecc 	bl	8016e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016078:	2301      	movs	r3, #1
 801607a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801607c:	f001 fc72 	bl	8017964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016080:	f000 fc32 	bl	80168e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016084:	f001 fc3a 	bl	80178fc <vPortEnterCritical>
 8016088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801608a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801608e:	b25b      	sxtb	r3, r3
 8016090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016094:	d103      	bne.n	801609e <xQueueReceive+0x12e>
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	2200      	movs	r2, #0
 801609a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80160a4:	b25b      	sxtb	r3, r3
 80160a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160aa:	d103      	bne.n	80160b4 <xQueueReceive+0x144>
 80160ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ae:	2200      	movs	r2, #0
 80160b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80160b4:	f001 fc56 	bl	8017964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80160b8:	1d3a      	adds	r2, r7, #4
 80160ba:	f107 0310 	add.w	r3, r7, #16
 80160be:	4611      	mov	r1, r2
 80160c0:	4618      	mov	r0, r3
 80160c2:	f000 febb 	bl	8016e3c <xTaskCheckForTimeOut>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d123      	bne.n	8016114 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160ce:	f000 f99d 	bl	801640c <prvIsQueueEmpty>
 80160d2:	4603      	mov	r3, r0
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d017      	beq.n	8016108 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80160d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160da:	3324      	adds	r3, #36	; 0x24
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	4611      	mov	r1, r2
 80160e0:	4618      	mov	r0, r3
 80160e2:	f000 fe0b 	bl	8016cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160e8:	f000 f93e 	bl	8016368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160ec:	f000 fc0a 	bl	8016904 <xTaskResumeAll>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d189      	bne.n	801600a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80160f6:	4b10      	ldr	r3, [pc, #64]	; (8016138 <xQueueReceive+0x1c8>)
 80160f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160fc:	601a      	str	r2, [r3, #0]
 80160fe:	f3bf 8f4f 	dsb	sy
 8016102:	f3bf 8f6f 	isb	sy
 8016106:	e780      	b.n	801600a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801610a:	f000 f92d 	bl	8016368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801610e:	f000 fbf9 	bl	8016904 <xTaskResumeAll>
 8016112:	e77a      	b.n	801600a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016116:	f000 f927 	bl	8016368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801611a:	f000 fbf3 	bl	8016904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801611e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016120:	f000 f974 	bl	801640c <prvIsQueueEmpty>
 8016124:	4603      	mov	r3, r0
 8016126:	2b00      	cmp	r3, #0
 8016128:	f43f af6f 	beq.w	801600a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801612c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801612e:	4618      	mov	r0, r3
 8016130:	3730      	adds	r7, #48	; 0x30
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	e000ed04 	.word	0xe000ed04

0801613c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b08e      	sub	sp, #56	; 0x38
 8016140:	af00      	add	r7, sp, #0
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614e:	2b00      	cmp	r3, #0
 8016150:	d10c      	bne.n	801616c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8016152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016156:	b672      	cpsid	i
 8016158:	f383 8811 	msr	BASEPRI, r3
 801615c:	f3bf 8f6f 	isb	sy
 8016160:	f3bf 8f4f 	dsb	sy
 8016164:	b662      	cpsie	i
 8016166:	623b      	str	r3, [r7, #32]
}
 8016168:	bf00      	nop
 801616a:	e7fe      	b.n	801616a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d103      	bne.n	801617a <xQueueReceiveFromISR+0x3e>
 8016172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016176:	2b00      	cmp	r3, #0
 8016178:	d101      	bne.n	801617e <xQueueReceiveFromISR+0x42>
 801617a:	2301      	movs	r3, #1
 801617c:	e000      	b.n	8016180 <xQueueReceiveFromISR+0x44>
 801617e:	2300      	movs	r3, #0
 8016180:	2b00      	cmp	r3, #0
 8016182:	d10c      	bne.n	801619e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8016184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016188:	b672      	cpsid	i
 801618a:	f383 8811 	msr	BASEPRI, r3
 801618e:	f3bf 8f6f 	isb	sy
 8016192:	f3bf 8f4f 	dsb	sy
 8016196:	b662      	cpsie	i
 8016198:	61fb      	str	r3, [r7, #28]
}
 801619a:	bf00      	nop
 801619c:	e7fe      	b.n	801619c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801619e:	f001 fc95 	bl	8017acc <vPortValidateInterruptPriority>
	__asm volatile
 80161a2:	f3ef 8211 	mrs	r2, BASEPRI
 80161a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161aa:	b672      	cpsid	i
 80161ac:	f383 8811 	msr	BASEPRI, r3
 80161b0:	f3bf 8f6f 	isb	sy
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	b662      	cpsie	i
 80161ba:	61ba      	str	r2, [r7, #24]
 80161bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80161be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80161c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d02f      	beq.n	801622e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80161d8:	68b9      	ldr	r1, [r7, #8]
 80161da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161dc:	f000 f89e 	bl	801631c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80161e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e2:	1e5a      	subs	r2, r3, #1
 80161e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80161e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161f0:	d112      	bne.n	8016218 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f4:	691b      	ldr	r3, [r3, #16]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d016      	beq.n	8016228 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fc:	3310      	adds	r3, #16
 80161fe:	4618      	mov	r0, r3
 8016200:	f000 fda2 	bl	8016d48 <xTaskRemoveFromEventList>
 8016204:	4603      	mov	r3, r0
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00e      	beq.n	8016228 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00b      	beq.n	8016228 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2201      	movs	r2, #1
 8016214:	601a      	str	r2, [r3, #0]
 8016216:	e007      	b.n	8016228 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801621c:	3301      	adds	r3, #1
 801621e:	b2db      	uxtb	r3, r3
 8016220:	b25a      	sxtb	r2, r3
 8016222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016228:	2301      	movs	r3, #1
 801622a:	637b      	str	r3, [r7, #52]	; 0x34
 801622c:	e001      	b.n	8016232 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801622e:	2300      	movs	r3, #0
 8016230:	637b      	str	r3, [r7, #52]	; 0x34
 8016232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016234:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	f383 8811 	msr	BASEPRI, r3
}
 801623c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016240:	4618      	mov	r0, r3
 8016242:	3738      	adds	r7, #56	; 0x38
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}

08016248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b086      	sub	sp, #24
 801624c:	af00      	add	r7, sp, #0
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	60b9      	str	r1, [r7, #8]
 8016252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016254:	2300      	movs	r3, #0
 8016256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801625c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016262:	2b00      	cmp	r3, #0
 8016264:	d10d      	bne.n	8016282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d14d      	bne.n	801630a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	689b      	ldr	r3, [r3, #8]
 8016272:	4618      	mov	r0, r3
 8016274:	f000 ff4c 	bl	8017110 <xTaskPriorityDisinherit>
 8016278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2200      	movs	r2, #0
 801627e:	609a      	str	r2, [r3, #8]
 8016280:	e043      	b.n	801630a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d119      	bne.n	80162bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	6858      	ldr	r0, [r3, #4]
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016290:	461a      	mov	r2, r3
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	f003 fa6a 	bl	801976c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	685a      	ldr	r2, [r3, #4]
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a0:	441a      	add	r2, r3
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	685a      	ldr	r2, [r3, #4]
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	689b      	ldr	r3, [r3, #8]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d32b      	bcc.n	801630a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	605a      	str	r2, [r3, #4]
 80162ba:	e026      	b.n	801630a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	68d8      	ldr	r0, [r3, #12]
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162c4:	461a      	mov	r2, r3
 80162c6:	68b9      	ldr	r1, [r7, #8]
 80162c8:	f003 fa50 	bl	801976c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	68da      	ldr	r2, [r3, #12]
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162d4:	425b      	negs	r3, r3
 80162d6:	441a      	add	r2, r3
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	68da      	ldr	r2, [r3, #12]
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d207      	bcs.n	80162f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	689a      	ldr	r2, [r3, #8]
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f0:	425b      	negs	r3, r3
 80162f2:	441a      	add	r2, r3
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d105      	bne.n	801630a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80162fe:	693b      	ldr	r3, [r7, #16]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d002      	beq.n	801630a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	3b01      	subs	r3, #1
 8016308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	1c5a      	adds	r2, r3, #1
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016312:	697b      	ldr	r3, [r7, #20]
}
 8016314:	4618      	mov	r0, r3
 8016316:	3718      	adds	r7, #24
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}

0801631c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b082      	sub	sp, #8
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
 8016324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801632a:	2b00      	cmp	r3, #0
 801632c:	d018      	beq.n	8016360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	68da      	ldr	r2, [r3, #12]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016336:	441a      	add	r2, r3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	68da      	ldr	r2, [r3, #12]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	429a      	cmp	r2, r3
 8016346:	d303      	bcc.n	8016350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	68d9      	ldr	r1, [r3, #12]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016358:	461a      	mov	r2, r3
 801635a:	6838      	ldr	r0, [r7, #0]
 801635c:	f003 fa06 	bl	801976c <memcpy>
	}
}
 8016360:	bf00      	nop
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016370:	f001 fac4 	bl	80178fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801637a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801637c:	e011      	b.n	80163a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016382:	2b00      	cmp	r3, #0
 8016384:	d012      	beq.n	80163ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	3324      	adds	r3, #36	; 0x24
 801638a:	4618      	mov	r0, r3
 801638c:	f000 fcdc 	bl	8016d48 <xTaskRemoveFromEventList>
 8016390:	4603      	mov	r3, r0
 8016392:	2b00      	cmp	r3, #0
 8016394:	d001      	beq.n	801639a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016396:	f000 fdb7 	bl	8016f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801639a:	7bfb      	ldrb	r3, [r7, #15]
 801639c:	3b01      	subs	r3, #1
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80163a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	dce9      	bgt.n	801637e <prvUnlockQueue+0x16>
 80163aa:	e000      	b.n	80163ae <prvUnlockQueue+0x46>
					break;
 80163ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	22ff      	movs	r2, #255	; 0xff
 80163b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80163b6:	f001 fad5 	bl	8017964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80163ba:	f001 fa9f 	bl	80178fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163c6:	e011      	b.n	80163ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	691b      	ldr	r3, [r3, #16]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d012      	beq.n	80163f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	3310      	adds	r3, #16
 80163d4:	4618      	mov	r0, r3
 80163d6:	f000 fcb7 	bl	8016d48 <xTaskRemoveFromEventList>
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d001      	beq.n	80163e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80163e0:	f000 fd92 	bl	8016f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80163e4:	7bbb      	ldrb	r3, [r7, #14]
 80163e6:	3b01      	subs	r3, #1
 80163e8:	b2db      	uxtb	r3, r3
 80163ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	dce9      	bgt.n	80163c8 <prvUnlockQueue+0x60>
 80163f4:	e000      	b.n	80163f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80163f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	22ff      	movs	r2, #255	; 0xff
 80163fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016400:	f001 fab0 	bl	8017964 <vPortExitCritical>
}
 8016404:	bf00      	nop
 8016406:	3710      	adds	r7, #16
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016414:	f001 fa72 	bl	80178fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801641c:	2b00      	cmp	r3, #0
 801641e:	d102      	bne.n	8016426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016420:	2301      	movs	r3, #1
 8016422:	60fb      	str	r3, [r7, #12]
 8016424:	e001      	b.n	801642a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016426:	2300      	movs	r3, #0
 8016428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801642a:	f001 fa9b 	bl	8017964 <vPortExitCritical>

	return xReturn;
 801642e:	68fb      	ldr	r3, [r7, #12]
}
 8016430:	4618      	mov	r0, r3
 8016432:	3710      	adds	r7, #16
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016440:	f001 fa5c 	bl	80178fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801644c:	429a      	cmp	r2, r3
 801644e:	d102      	bne.n	8016456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016450:	2301      	movs	r3, #1
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	e001      	b.n	801645a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016456:	2300      	movs	r3, #0
 8016458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801645a:	f001 fa83 	bl	8017964 <vPortExitCritical>

	return xReturn;
 801645e:	68fb      	ldr	r3, [r7, #12]
}
 8016460:	4618      	mov	r0, r3
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016468:	b580      	push	{r7, lr}
 801646a:	b08e      	sub	sp, #56	; 0x38
 801646c:	af04      	add	r7, sp, #16
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	607a      	str	r2, [r7, #4]
 8016474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016478:	2b00      	cmp	r3, #0
 801647a:	d10c      	bne.n	8016496 <xTaskCreateStatic+0x2e>
	__asm volatile
 801647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016480:	b672      	cpsid	i
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	b662      	cpsie	i
 8016490:	623b      	str	r3, [r7, #32]
}
 8016492:	bf00      	nop
 8016494:	e7fe      	b.n	8016494 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8016496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016498:	2b00      	cmp	r3, #0
 801649a:	d10c      	bne.n	80164b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 801649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a0:	b672      	cpsid	i
 80164a2:	f383 8811 	msr	BASEPRI, r3
 80164a6:	f3bf 8f6f 	isb	sy
 80164aa:	f3bf 8f4f 	dsb	sy
 80164ae:	b662      	cpsie	i
 80164b0:	61fb      	str	r3, [r7, #28]
}
 80164b2:	bf00      	nop
 80164b4:	e7fe      	b.n	80164b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80164b6:	2358      	movs	r3, #88	; 0x58
 80164b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	2b58      	cmp	r3, #88	; 0x58
 80164be:	d00c      	beq.n	80164da <xTaskCreateStatic+0x72>
	__asm volatile
 80164c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c4:	b672      	cpsid	i
 80164c6:	f383 8811 	msr	BASEPRI, r3
 80164ca:	f3bf 8f6f 	isb	sy
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	b662      	cpsie	i
 80164d4:	61bb      	str	r3, [r7, #24]
}
 80164d6:	bf00      	nop
 80164d8:	e7fe      	b.n	80164d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80164da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80164dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d01e      	beq.n	8016520 <xTaskCreateStatic+0xb8>
 80164e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d01b      	beq.n	8016520 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80164e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80164ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80164f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f4:	2202      	movs	r2, #2
 80164f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80164fa:	2300      	movs	r3, #0
 80164fc:	9303      	str	r3, [sp, #12]
 80164fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016500:	9302      	str	r3, [sp, #8]
 8016502:	f107 0314 	add.w	r3, r7, #20
 8016506:	9301      	str	r3, [sp, #4]
 8016508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650a:	9300      	str	r3, [sp, #0]
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	68b9      	ldr	r1, [r7, #8]
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	f000 f850 	bl	80165b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801651a:	f000 f8e1 	bl	80166e0 <prvAddNewTaskToReadyList>
 801651e:	e001      	b.n	8016524 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016520:	2300      	movs	r3, #0
 8016522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016524:	697b      	ldr	r3, [r7, #20]
	}
 8016526:	4618      	mov	r0, r3
 8016528:	3728      	adds	r7, #40	; 0x28
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801652e:	b580      	push	{r7, lr}
 8016530:	b08c      	sub	sp, #48	; 0x30
 8016532:	af04      	add	r7, sp, #16
 8016534:	60f8      	str	r0, [r7, #12]
 8016536:	60b9      	str	r1, [r7, #8]
 8016538:	603b      	str	r3, [r7, #0]
 801653a:	4613      	mov	r3, r2
 801653c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801653e:	88fb      	ldrh	r3, [r7, #6]
 8016540:	009b      	lsls	r3, r3, #2
 8016542:	4618      	mov	r0, r3
 8016544:	f001 fb06 	bl	8017b54 <pvPortMalloc>
 8016548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00e      	beq.n	801656e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016550:	2058      	movs	r0, #88	; 0x58
 8016552:	f001 faff 	bl	8017b54 <pvPortMalloc>
 8016556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016558:	69fb      	ldr	r3, [r7, #28]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d003      	beq.n	8016566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	697a      	ldr	r2, [r7, #20]
 8016562:	631a      	str	r2, [r3, #48]	; 0x30
 8016564:	e005      	b.n	8016572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016566:	6978      	ldr	r0, [r7, #20]
 8016568:	f001 fbc4 	bl	8017cf4 <vPortFree>
 801656c:	e001      	b.n	8016572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801656e:	2300      	movs	r3, #0
 8016570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d017      	beq.n	80165a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016578:	69fb      	ldr	r3, [r7, #28]
 801657a:	2200      	movs	r2, #0
 801657c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016580:	88fa      	ldrh	r2, [r7, #6]
 8016582:	2300      	movs	r3, #0
 8016584:	9303      	str	r3, [sp, #12]
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	9302      	str	r3, [sp, #8]
 801658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658c:	9301      	str	r3, [sp, #4]
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	9300      	str	r3, [sp, #0]
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	68b9      	ldr	r1, [r7, #8]
 8016596:	68f8      	ldr	r0, [r7, #12]
 8016598:	f000 f80e 	bl	80165b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801659c:	69f8      	ldr	r0, [r7, #28]
 801659e:	f000 f89f 	bl	80166e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80165a2:	2301      	movs	r3, #1
 80165a4:	61bb      	str	r3, [r7, #24]
 80165a6:	e002      	b.n	80165ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80165a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80165ae:	69bb      	ldr	r3, [r7, #24]
	}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3720      	adds	r7, #32
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b088      	sub	sp, #32
 80165bc:	af00      	add	r7, sp, #0
 80165be:	60f8      	str	r0, [r7, #12]
 80165c0:	60b9      	str	r1, [r7, #8]
 80165c2:	607a      	str	r2, [r7, #4]
 80165c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80165c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	009b      	lsls	r3, r3, #2
 80165ce:	461a      	mov	r2, r3
 80165d0:	21a5      	movs	r1, #165	; 0xa5
 80165d2:	f003 f8d9 	bl	8019788 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80165d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80165da:	6879      	ldr	r1, [r7, #4]
 80165dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80165e0:	440b      	add	r3, r1
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	4413      	add	r3, r2
 80165e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80165e8:	69bb      	ldr	r3, [r7, #24]
 80165ea:	f023 0307 	bic.w	r3, r3, #7
 80165ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	f003 0307 	and.w	r3, r3, #7
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d00c      	beq.n	8016614 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80165fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fe:	b672      	cpsid	i
 8016600:	f383 8811 	msr	BASEPRI, r3
 8016604:	f3bf 8f6f 	isb	sy
 8016608:	f3bf 8f4f 	dsb	sy
 801660c:	b662      	cpsie	i
 801660e:	617b      	str	r3, [r7, #20]
}
 8016610:	bf00      	nop
 8016612:	e7fe      	b.n	8016612 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d01f      	beq.n	801665a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801661a:	2300      	movs	r3, #0
 801661c:	61fb      	str	r3, [r7, #28]
 801661e:	e012      	b.n	8016646 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016620:	68ba      	ldr	r2, [r7, #8]
 8016622:	69fb      	ldr	r3, [r7, #28]
 8016624:	4413      	add	r3, r2
 8016626:	7819      	ldrb	r1, [r3, #0]
 8016628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	4413      	add	r3, r2
 801662e:	3334      	adds	r3, #52	; 0x34
 8016630:	460a      	mov	r2, r1
 8016632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016634:	68ba      	ldr	r2, [r7, #8]
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	4413      	add	r3, r2
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d006      	beq.n	801664e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	3301      	adds	r3, #1
 8016644:	61fb      	str	r3, [r7, #28]
 8016646:	69fb      	ldr	r3, [r7, #28]
 8016648:	2b0f      	cmp	r3, #15
 801664a:	d9e9      	bls.n	8016620 <prvInitialiseNewTask+0x68>
 801664c:	e000      	b.n	8016650 <prvInitialiseNewTask+0x98>
			{
				break;
 801664e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016652:	2200      	movs	r2, #0
 8016654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016658:	e003      	b.n	8016662 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665c:	2200      	movs	r2, #0
 801665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016664:	2b06      	cmp	r3, #6
 8016666:	d901      	bls.n	801666c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016668:	2306      	movs	r3, #6
 801666a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801666e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016676:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667a:	2200      	movs	r2, #0
 801667c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016680:	3304      	adds	r3, #4
 8016682:	4618      	mov	r0, r3
 8016684:	f7ff f8ec 	bl	8015860 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668a:	3318      	adds	r3, #24
 801668c:	4618      	mov	r0, r3
 801668e:	f7ff f8e7 	bl	8015860 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669a:	f1c3 0207 	rsb	r2, r3, #7
 801669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80166a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80166a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166aa:	2200      	movs	r2, #0
 80166ac:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	2200      	movs	r2, #0
 80166b2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80166b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b6:	2200      	movs	r2, #0
 80166b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	68f9      	ldr	r1, [r7, #12]
 80166c0:	69b8      	ldr	r0, [r7, #24]
 80166c2:	f001 f80d 	bl	80176e0 <pxPortInitialiseStack>
 80166c6:	4602      	mov	r2, r0
 80166c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80166cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d002      	beq.n	80166d8 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80166d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80166d8:	bf00      	nop
 80166da:	3720      	adds	r7, #32
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80166e8:	f001 f908 	bl	80178fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80166ec:	4b2a      	ldr	r3, [pc, #168]	; (8016798 <prvAddNewTaskToReadyList+0xb8>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	3301      	adds	r3, #1
 80166f2:	4a29      	ldr	r2, [pc, #164]	; (8016798 <prvAddNewTaskToReadyList+0xb8>)
 80166f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80166f6:	4b29      	ldr	r3, [pc, #164]	; (801679c <prvAddNewTaskToReadyList+0xbc>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d109      	bne.n	8016712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80166fe:	4a27      	ldr	r2, [pc, #156]	; (801679c <prvAddNewTaskToReadyList+0xbc>)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016704:	4b24      	ldr	r3, [pc, #144]	; (8016798 <prvAddNewTaskToReadyList+0xb8>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	2b01      	cmp	r3, #1
 801670a:	d110      	bne.n	801672e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801670c:	f000 fc22 	bl	8016f54 <prvInitialiseTaskLists>
 8016710:	e00d      	b.n	801672e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016712:	4b23      	ldr	r3, [pc, #140]	; (80167a0 <prvAddNewTaskToReadyList+0xc0>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d109      	bne.n	801672e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801671a:	4b20      	ldr	r3, [pc, #128]	; (801679c <prvAddNewTaskToReadyList+0xbc>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016724:	429a      	cmp	r2, r3
 8016726:	d802      	bhi.n	801672e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016728:	4a1c      	ldr	r2, [pc, #112]	; (801679c <prvAddNewTaskToReadyList+0xbc>)
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801672e:	4b1d      	ldr	r3, [pc, #116]	; (80167a4 <prvAddNewTaskToReadyList+0xc4>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	3301      	adds	r3, #1
 8016734:	4a1b      	ldr	r2, [pc, #108]	; (80167a4 <prvAddNewTaskToReadyList+0xc4>)
 8016736:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673c:	2201      	movs	r2, #1
 801673e:	409a      	lsls	r2, r3
 8016740:	4b19      	ldr	r3, [pc, #100]	; (80167a8 <prvAddNewTaskToReadyList+0xc8>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4313      	orrs	r3, r2
 8016746:	4a18      	ldr	r2, [pc, #96]	; (80167a8 <prvAddNewTaskToReadyList+0xc8>)
 8016748:	6013      	str	r3, [r2, #0]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801674e:	4613      	mov	r3, r2
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	4413      	add	r3, r2
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	4a15      	ldr	r2, [pc, #84]	; (80167ac <prvAddNewTaskToReadyList+0xcc>)
 8016758:	441a      	add	r2, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	3304      	adds	r3, #4
 801675e:	4619      	mov	r1, r3
 8016760:	4610      	mov	r0, r2
 8016762:	f7ff f88a 	bl	801587a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016766:	f001 f8fd 	bl	8017964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801676a:	4b0d      	ldr	r3, [pc, #52]	; (80167a0 <prvAddNewTaskToReadyList+0xc0>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d00e      	beq.n	8016790 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016772:	4b0a      	ldr	r3, [pc, #40]	; (801679c <prvAddNewTaskToReadyList+0xbc>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801677c:	429a      	cmp	r2, r3
 801677e:	d207      	bcs.n	8016790 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016780:	4b0b      	ldr	r3, [pc, #44]	; (80167b0 <prvAddNewTaskToReadyList+0xd0>)
 8016782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016786:	601a      	str	r2, [r3, #0]
 8016788:	f3bf 8f4f 	dsb	sy
 801678c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016790:	bf00      	nop
 8016792:	3708      	adds	r7, #8
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	200004a0 	.word	0x200004a0
 801679c:	200003a0 	.word	0x200003a0
 80167a0:	200004ac 	.word	0x200004ac
 80167a4:	200004bc 	.word	0x200004bc
 80167a8:	200004a8 	.word	0x200004a8
 80167ac:	200003a4 	.word	0x200003a4
 80167b0:	e000ed04 	.word	0xe000ed04

080167b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80167bc:	2300      	movs	r3, #0
 80167be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d019      	beq.n	80167fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80167c6:	4b14      	ldr	r3, [pc, #80]	; (8016818 <vTaskDelay+0x64>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d00c      	beq.n	80167e8 <vTaskDelay+0x34>
	__asm volatile
 80167ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d2:	b672      	cpsid	i
 80167d4:	f383 8811 	msr	BASEPRI, r3
 80167d8:	f3bf 8f6f 	isb	sy
 80167dc:	f3bf 8f4f 	dsb	sy
 80167e0:	b662      	cpsie	i
 80167e2:	60bb      	str	r3, [r7, #8]
}
 80167e4:	bf00      	nop
 80167e6:	e7fe      	b.n	80167e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80167e8:	f000 f87e 	bl	80168e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80167ec:	2100      	movs	r1, #0
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f000 ff10 	bl	8017614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80167f4:	f000 f886 	bl	8016904 <xTaskResumeAll>
 80167f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d107      	bne.n	8016810 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8016800:	4b06      	ldr	r3, [pc, #24]	; (801681c <vTaskDelay+0x68>)
 8016802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016806:	601a      	str	r2, [r3, #0]
 8016808:	f3bf 8f4f 	dsb	sy
 801680c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016810:	bf00      	nop
 8016812:	3710      	adds	r7, #16
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	200004c8 	.word	0x200004c8
 801681c:	e000ed04 	.word	0xe000ed04

08016820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b08a      	sub	sp, #40	; 0x28
 8016824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016826:	2300      	movs	r3, #0
 8016828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801682a:	2300      	movs	r3, #0
 801682c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801682e:	463a      	mov	r2, r7
 8016830:	1d39      	adds	r1, r7, #4
 8016832:	f107 0308 	add.w	r3, r7, #8
 8016836:	4618      	mov	r0, r3
 8016838:	f7ea fd8e 	bl	8001358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801683c:	6839      	ldr	r1, [r7, #0]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	68ba      	ldr	r2, [r7, #8]
 8016842:	9202      	str	r2, [sp, #8]
 8016844:	9301      	str	r3, [sp, #4]
 8016846:	2300      	movs	r3, #0
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	2300      	movs	r3, #0
 801684c:	460a      	mov	r2, r1
 801684e:	4920      	ldr	r1, [pc, #128]	; (80168d0 <vTaskStartScheduler+0xb0>)
 8016850:	4820      	ldr	r0, [pc, #128]	; (80168d4 <vTaskStartScheduler+0xb4>)
 8016852:	f7ff fe09 	bl	8016468 <xTaskCreateStatic>
 8016856:	4603      	mov	r3, r0
 8016858:	4a1f      	ldr	r2, [pc, #124]	; (80168d8 <vTaskStartScheduler+0xb8>)
 801685a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801685c:	4b1e      	ldr	r3, [pc, #120]	; (80168d8 <vTaskStartScheduler+0xb8>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d002      	beq.n	801686a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016864:	2301      	movs	r3, #1
 8016866:	617b      	str	r3, [r7, #20]
 8016868:	e001      	b.n	801686e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801686a:	2300      	movs	r3, #0
 801686c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	2b01      	cmp	r3, #1
 8016872:	d118      	bne.n	80168a6 <vTaskStartScheduler+0x86>
	__asm volatile
 8016874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016878:	b672      	cpsid	i
 801687a:	f383 8811 	msr	BASEPRI, r3
 801687e:	f3bf 8f6f 	isb	sy
 8016882:	f3bf 8f4f 	dsb	sy
 8016886:	b662      	cpsie	i
 8016888:	613b      	str	r3, [r7, #16]
}
 801688a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801688c:	4b13      	ldr	r3, [pc, #76]	; (80168dc <vTaskStartScheduler+0xbc>)
 801688e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016892:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016894:	4b12      	ldr	r3, [pc, #72]	; (80168e0 <vTaskStartScheduler+0xc0>)
 8016896:	2201      	movs	r2, #1
 8016898:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801689a:	4b12      	ldr	r3, [pc, #72]	; (80168e4 <vTaskStartScheduler+0xc4>)
 801689c:	2200      	movs	r2, #0
 801689e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80168a0:	f000 ffae 	bl	8017800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80168a4:	e010      	b.n	80168c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80168a6:	697b      	ldr	r3, [r7, #20]
 80168a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168ac:	d10c      	bne.n	80168c8 <vTaskStartScheduler+0xa8>
	__asm volatile
 80168ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b2:	b672      	cpsid	i
 80168b4:	f383 8811 	msr	BASEPRI, r3
 80168b8:	f3bf 8f6f 	isb	sy
 80168bc:	f3bf 8f4f 	dsb	sy
 80168c0:	b662      	cpsie	i
 80168c2:	60fb      	str	r3, [r7, #12]
}
 80168c4:	bf00      	nop
 80168c6:	e7fe      	b.n	80168c6 <vTaskStartScheduler+0xa6>
}
 80168c8:	bf00      	nop
 80168ca:	3718      	adds	r7, #24
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	0801b29c 	.word	0x0801b29c
 80168d4:	08016f21 	.word	0x08016f21
 80168d8:	200004c4 	.word	0x200004c4
 80168dc:	200004c0 	.word	0x200004c0
 80168e0:	200004ac 	.word	0x200004ac
 80168e4:	200004a4 	.word	0x200004a4

080168e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80168e8:	b480      	push	{r7}
 80168ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80168ec:	4b04      	ldr	r3, [pc, #16]	; (8016900 <vTaskSuspendAll+0x18>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	3301      	adds	r3, #1
 80168f2:	4a03      	ldr	r2, [pc, #12]	; (8016900 <vTaskSuspendAll+0x18>)
 80168f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80168f6:	bf00      	nop
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr
 8016900:	200004c8 	.word	0x200004c8

08016904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b084      	sub	sp, #16
 8016908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801690a:	2300      	movs	r3, #0
 801690c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801690e:	2300      	movs	r3, #0
 8016910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016912:	4b42      	ldr	r3, [pc, #264]	; (8016a1c <xTaskResumeAll+0x118>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d10c      	bne.n	8016934 <xTaskResumeAll+0x30>
	__asm volatile
 801691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801691e:	b672      	cpsid	i
 8016920:	f383 8811 	msr	BASEPRI, r3
 8016924:	f3bf 8f6f 	isb	sy
 8016928:	f3bf 8f4f 	dsb	sy
 801692c:	b662      	cpsie	i
 801692e:	603b      	str	r3, [r7, #0]
}
 8016930:	bf00      	nop
 8016932:	e7fe      	b.n	8016932 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016934:	f000 ffe2 	bl	80178fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016938:	4b38      	ldr	r3, [pc, #224]	; (8016a1c <xTaskResumeAll+0x118>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	3b01      	subs	r3, #1
 801693e:	4a37      	ldr	r2, [pc, #220]	; (8016a1c <xTaskResumeAll+0x118>)
 8016940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016942:	4b36      	ldr	r3, [pc, #216]	; (8016a1c <xTaskResumeAll+0x118>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d161      	bne.n	8016a0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801694a:	4b35      	ldr	r3, [pc, #212]	; (8016a20 <xTaskResumeAll+0x11c>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d05d      	beq.n	8016a0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016952:	e02e      	b.n	80169b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016954:	4b33      	ldr	r3, [pc, #204]	; (8016a24 <xTaskResumeAll+0x120>)
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	3318      	adds	r3, #24
 8016960:	4618      	mov	r0, r3
 8016962:	f7fe ffe7 	bl	8015934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	3304      	adds	r3, #4
 801696a:	4618      	mov	r0, r3
 801696c:	f7fe ffe2 	bl	8015934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016974:	2201      	movs	r2, #1
 8016976:	409a      	lsls	r2, r3
 8016978:	4b2b      	ldr	r3, [pc, #172]	; (8016a28 <xTaskResumeAll+0x124>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4313      	orrs	r3, r2
 801697e:	4a2a      	ldr	r2, [pc, #168]	; (8016a28 <xTaskResumeAll+0x124>)
 8016980:	6013      	str	r3, [r2, #0]
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016986:	4613      	mov	r3, r2
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	4413      	add	r3, r2
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	4a27      	ldr	r2, [pc, #156]	; (8016a2c <xTaskResumeAll+0x128>)
 8016990:	441a      	add	r2, r3
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	3304      	adds	r3, #4
 8016996:	4619      	mov	r1, r3
 8016998:	4610      	mov	r0, r2
 801699a:	f7fe ff6e 	bl	801587a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a2:	4b23      	ldr	r3, [pc, #140]	; (8016a30 <xTaskResumeAll+0x12c>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d302      	bcc.n	80169b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80169ac:	4b21      	ldr	r3, [pc, #132]	; (8016a34 <xTaskResumeAll+0x130>)
 80169ae:	2201      	movs	r2, #1
 80169b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80169b2:	4b1c      	ldr	r3, [pc, #112]	; (8016a24 <xTaskResumeAll+0x120>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d1cc      	bne.n	8016954 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d001      	beq.n	80169c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80169c0:	f000 fb68 	bl	8017094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80169c4:	4b1c      	ldr	r3, [pc, #112]	; (8016a38 <xTaskResumeAll+0x134>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d010      	beq.n	80169f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80169d0:	f000 f858 	bl	8016a84 <xTaskIncrementTick>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d002      	beq.n	80169e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80169da:	4b16      	ldr	r3, [pc, #88]	; (8016a34 <xTaskResumeAll+0x130>)
 80169dc:	2201      	movs	r2, #1
 80169de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3b01      	subs	r3, #1
 80169e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d1f1      	bne.n	80169d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80169ec:	4b12      	ldr	r3, [pc, #72]	; (8016a38 <xTaskResumeAll+0x134>)
 80169ee:	2200      	movs	r2, #0
 80169f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80169f2:	4b10      	ldr	r3, [pc, #64]	; (8016a34 <xTaskResumeAll+0x130>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d009      	beq.n	8016a0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80169fa:	2301      	movs	r3, #1
 80169fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80169fe:	4b0f      	ldr	r3, [pc, #60]	; (8016a3c <xTaskResumeAll+0x138>)
 8016a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a04:	601a      	str	r2, [r3, #0]
 8016a06:	f3bf 8f4f 	dsb	sy
 8016a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016a0e:	f000 ffa9 	bl	8017964 <vPortExitCritical>

	return xAlreadyYielded;
 8016a12:	68bb      	ldr	r3, [r7, #8]
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3710      	adds	r7, #16
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}
 8016a1c:	200004c8 	.word	0x200004c8
 8016a20:	200004a0 	.word	0x200004a0
 8016a24:	20000460 	.word	0x20000460
 8016a28:	200004a8 	.word	0x200004a8
 8016a2c:	200003a4 	.word	0x200003a4
 8016a30:	200003a0 	.word	0x200003a0
 8016a34:	200004b4 	.word	0x200004b4
 8016a38:	200004b0 	.word	0x200004b0
 8016a3c:	e000ed04 	.word	0xe000ed04

08016a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016a46:	4b05      	ldr	r3, [pc, #20]	; (8016a5c <xTaskGetTickCount+0x1c>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a4c:	687b      	ldr	r3, [r7, #4]
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	370c      	adds	r7, #12
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop
 8016a5c:	200004a4 	.word	0x200004a4

08016a60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a66:	f001 f831 	bl	8017acc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016a6e:	4b04      	ldr	r3, [pc, #16]	; (8016a80 <xTaskGetTickCountFromISR+0x20>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016a74:	683b      	ldr	r3, [r7, #0]
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3708      	adds	r7, #8
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	200004a4 	.word	0x200004a4

08016a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b086      	sub	sp, #24
 8016a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a8e:	4b4f      	ldr	r3, [pc, #316]	; (8016bcc <xTaskIncrementTick+0x148>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f040 808a 	bne.w	8016bac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016a98:	4b4d      	ldr	r3, [pc, #308]	; (8016bd0 <xTaskIncrementTick+0x14c>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	3301      	adds	r3, #1
 8016a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016aa0:	4a4b      	ldr	r2, [pc, #300]	; (8016bd0 <xTaskIncrementTick+0x14c>)
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d122      	bne.n	8016af2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016aac:	4b49      	ldr	r3, [pc, #292]	; (8016bd4 <xTaskIncrementTick+0x150>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00c      	beq.n	8016ad0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8016ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aba:	b672      	cpsid	i
 8016abc:	f383 8811 	msr	BASEPRI, r3
 8016ac0:	f3bf 8f6f 	isb	sy
 8016ac4:	f3bf 8f4f 	dsb	sy
 8016ac8:	b662      	cpsie	i
 8016aca:	603b      	str	r3, [r7, #0]
}
 8016acc:	bf00      	nop
 8016ace:	e7fe      	b.n	8016ace <xTaskIncrementTick+0x4a>
 8016ad0:	4b40      	ldr	r3, [pc, #256]	; (8016bd4 <xTaskIncrementTick+0x150>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	60fb      	str	r3, [r7, #12]
 8016ad6:	4b40      	ldr	r3, [pc, #256]	; (8016bd8 <xTaskIncrementTick+0x154>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	4a3e      	ldr	r2, [pc, #248]	; (8016bd4 <xTaskIncrementTick+0x150>)
 8016adc:	6013      	str	r3, [r2, #0]
 8016ade:	4a3e      	ldr	r2, [pc, #248]	; (8016bd8 <xTaskIncrementTick+0x154>)
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	6013      	str	r3, [r2, #0]
 8016ae4:	4b3d      	ldr	r3, [pc, #244]	; (8016bdc <xTaskIncrementTick+0x158>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	4a3c      	ldr	r2, [pc, #240]	; (8016bdc <xTaskIncrementTick+0x158>)
 8016aec:	6013      	str	r3, [r2, #0]
 8016aee:	f000 fad1 	bl	8017094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016af2:	4b3b      	ldr	r3, [pc, #236]	; (8016be0 <xTaskIncrementTick+0x15c>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	693a      	ldr	r2, [r7, #16]
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d348      	bcc.n	8016b8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016afc:	4b35      	ldr	r3, [pc, #212]	; (8016bd4 <xTaskIncrementTick+0x150>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d104      	bne.n	8016b10 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b06:	4b36      	ldr	r3, [pc, #216]	; (8016be0 <xTaskIncrementTick+0x15c>)
 8016b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b0c:	601a      	str	r2, [r3, #0]
					break;
 8016b0e:	e03e      	b.n	8016b8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b10:	4b30      	ldr	r3, [pc, #192]	; (8016bd4 <xTaskIncrementTick+0x150>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	68db      	ldr	r3, [r3, #12]
 8016b18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016b1a:	68bb      	ldr	r3, [r7, #8]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016b20:	693a      	ldr	r2, [r7, #16]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d203      	bcs.n	8016b30 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016b28:	4a2d      	ldr	r2, [pc, #180]	; (8016be0 <xTaskIncrementTick+0x15c>)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016b2e:	e02e      	b.n	8016b8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	3304      	adds	r3, #4
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7fe fefd 	bl	8015934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d004      	beq.n	8016b4c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	3318      	adds	r3, #24
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fe fef4 	bl	8015934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b50:	2201      	movs	r2, #1
 8016b52:	409a      	lsls	r2, r3
 8016b54:	4b23      	ldr	r3, [pc, #140]	; (8016be4 <xTaskIncrementTick+0x160>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	4313      	orrs	r3, r2
 8016b5a:	4a22      	ldr	r2, [pc, #136]	; (8016be4 <xTaskIncrementTick+0x160>)
 8016b5c:	6013      	str	r3, [r2, #0]
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b62:	4613      	mov	r3, r2
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	4413      	add	r3, r2
 8016b68:	009b      	lsls	r3, r3, #2
 8016b6a:	4a1f      	ldr	r2, [pc, #124]	; (8016be8 <xTaskIncrementTick+0x164>)
 8016b6c:	441a      	add	r2, r3
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	3304      	adds	r3, #4
 8016b72:	4619      	mov	r1, r3
 8016b74:	4610      	mov	r0, r2
 8016b76:	f7fe fe80 	bl	801587a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b7e:	4b1b      	ldr	r3, [pc, #108]	; (8016bec <xTaskIncrementTick+0x168>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d3b9      	bcc.n	8016afc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8016b88:	2301      	movs	r3, #1
 8016b8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b8c:	e7b6      	b.n	8016afc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b8e:	4b17      	ldr	r3, [pc, #92]	; (8016bec <xTaskIncrementTick+0x168>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b94:	4914      	ldr	r1, [pc, #80]	; (8016be8 <xTaskIncrementTick+0x164>)
 8016b96:	4613      	mov	r3, r2
 8016b98:	009b      	lsls	r3, r3, #2
 8016b9a:	4413      	add	r3, r2
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	440b      	add	r3, r1
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2b01      	cmp	r3, #1
 8016ba4:	d907      	bls.n	8016bb6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	617b      	str	r3, [r7, #20]
 8016baa:	e004      	b.n	8016bb6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016bac:	4b10      	ldr	r3, [pc, #64]	; (8016bf0 <xTaskIncrementTick+0x16c>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	4a0f      	ldr	r2, [pc, #60]	; (8016bf0 <xTaskIncrementTick+0x16c>)
 8016bb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016bb6:	4b0f      	ldr	r3, [pc, #60]	; (8016bf4 <xTaskIncrementTick+0x170>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d001      	beq.n	8016bc2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016bc2:	697b      	ldr	r3, [r7, #20]
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3718      	adds	r7, #24
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}
 8016bcc:	200004c8 	.word	0x200004c8
 8016bd0:	200004a4 	.word	0x200004a4
 8016bd4:	20000458 	.word	0x20000458
 8016bd8:	2000045c 	.word	0x2000045c
 8016bdc:	200004b8 	.word	0x200004b8
 8016be0:	200004c0 	.word	0x200004c0
 8016be4:	200004a8 	.word	0x200004a8
 8016be8:	200003a4 	.word	0x200003a4
 8016bec:	200003a0 	.word	0x200003a0
 8016bf0:	200004b0 	.word	0x200004b0
 8016bf4:	200004b4 	.word	0x200004b4

08016bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b088      	sub	sp, #32
 8016bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016bfe:	4b3a      	ldr	r3, [pc, #232]	; (8016ce8 <vTaskSwitchContext+0xf0>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d003      	beq.n	8016c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016c06:	4b39      	ldr	r3, [pc, #228]	; (8016cec <vTaskSwitchContext+0xf4>)
 8016c08:	2201      	movs	r2, #1
 8016c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016c0c:	e068      	b.n	8016ce0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8016c0e:	4b37      	ldr	r3, [pc, #220]	; (8016cec <vTaskSwitchContext+0xf4>)
 8016c10:	2200      	movs	r2, #0
 8016c12:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016c14:	4b36      	ldr	r3, [pc, #216]	; (8016cf0 <vTaskSwitchContext+0xf8>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c1a:	61fb      	str	r3, [r7, #28]
 8016c1c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016c20:	61bb      	str	r3, [r7, #24]
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	69ba      	ldr	r2, [r7, #24]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d111      	bne.n	8016c50 <vTaskSwitchContext+0x58>
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	3304      	adds	r3, #4
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	69ba      	ldr	r2, [r7, #24]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d10b      	bne.n	8016c50 <vTaskSwitchContext+0x58>
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	3308      	adds	r3, #8
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	69ba      	ldr	r2, [r7, #24]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d105      	bne.n	8016c50 <vTaskSwitchContext+0x58>
 8016c44:	69fb      	ldr	r3, [r7, #28]
 8016c46:	330c      	adds	r3, #12
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	69ba      	ldr	r2, [r7, #24]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d008      	beq.n	8016c62 <vTaskSwitchContext+0x6a>
 8016c50:	4b27      	ldr	r3, [pc, #156]	; (8016cf0 <vTaskSwitchContext+0xf8>)
 8016c52:	681a      	ldr	r2, [r3, #0]
 8016c54:	4b26      	ldr	r3, [pc, #152]	; (8016cf0 <vTaskSwitchContext+0xf8>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	3334      	adds	r3, #52	; 0x34
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	4610      	mov	r0, r2
 8016c5e:	f7ea fb68 	bl	8001332 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c62:	4b24      	ldr	r3, [pc, #144]	; (8016cf4 <vTaskSwitchContext+0xfc>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	fab3 f383 	clz	r3, r3
 8016c6e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016c70:	7afb      	ldrb	r3, [r7, #11]
 8016c72:	f1c3 031f 	rsb	r3, r3, #31
 8016c76:	617b      	str	r3, [r7, #20]
 8016c78:	491f      	ldr	r1, [pc, #124]	; (8016cf8 <vTaskSwitchContext+0x100>)
 8016c7a:	697a      	ldr	r2, [r7, #20]
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	009b      	lsls	r3, r3, #2
 8016c80:	4413      	add	r3, r2
 8016c82:	009b      	lsls	r3, r3, #2
 8016c84:	440b      	add	r3, r1
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d10c      	bne.n	8016ca6 <vTaskSwitchContext+0xae>
	__asm volatile
 8016c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c90:	b672      	cpsid	i
 8016c92:	f383 8811 	msr	BASEPRI, r3
 8016c96:	f3bf 8f6f 	isb	sy
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	b662      	cpsie	i
 8016ca0:	607b      	str	r3, [r7, #4]
}
 8016ca2:	bf00      	nop
 8016ca4:	e7fe      	b.n	8016ca4 <vTaskSwitchContext+0xac>
 8016ca6:	697a      	ldr	r2, [r7, #20]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	4413      	add	r3, r2
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	4a11      	ldr	r2, [pc, #68]	; (8016cf8 <vTaskSwitchContext+0x100>)
 8016cb2:	4413      	add	r3, r2
 8016cb4:	613b      	str	r3, [r7, #16]
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	685a      	ldr	r2, [r3, #4]
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	605a      	str	r2, [r3, #4]
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	685a      	ldr	r2, [r3, #4]
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	3308      	adds	r3, #8
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d104      	bne.n	8016cd6 <vTaskSwitchContext+0xde>
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	685a      	ldr	r2, [r3, #4]
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	605a      	str	r2, [r3, #4]
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	68db      	ldr	r3, [r3, #12]
 8016cdc:	4a04      	ldr	r2, [pc, #16]	; (8016cf0 <vTaskSwitchContext+0xf8>)
 8016cde:	6013      	str	r3, [r2, #0]
}
 8016ce0:	bf00      	nop
 8016ce2:	3720      	adds	r7, #32
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	200004c8 	.word	0x200004c8
 8016cec:	200004b4 	.word	0x200004b4
 8016cf0:	200003a0 	.word	0x200003a0
 8016cf4:	200004a8 	.word	0x200004a8
 8016cf8:	200003a4 	.word	0x200003a4

08016cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10c      	bne.n	8016d26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8016d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d10:	b672      	cpsid	i
 8016d12:	f383 8811 	msr	BASEPRI, r3
 8016d16:	f3bf 8f6f 	isb	sy
 8016d1a:	f3bf 8f4f 	dsb	sy
 8016d1e:	b662      	cpsie	i
 8016d20:	60fb      	str	r3, [r7, #12]
}
 8016d22:	bf00      	nop
 8016d24:	e7fe      	b.n	8016d24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016d26:	4b07      	ldr	r3, [pc, #28]	; (8016d44 <vTaskPlaceOnEventList+0x48>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	3318      	adds	r3, #24
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f7fe fdc7 	bl	80158c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016d34:	2101      	movs	r1, #1
 8016d36:	6838      	ldr	r0, [r7, #0]
 8016d38:	f000 fc6c 	bl	8017614 <prvAddCurrentTaskToDelayedList>
}
 8016d3c:	bf00      	nop
 8016d3e:	3710      	adds	r7, #16
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}
 8016d44:	200003a0 	.word	0x200003a0

08016d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b086      	sub	sp, #24
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	68db      	ldr	r3, [r3, #12]
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d10c      	bne.n	8016d78 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8016d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d62:	b672      	cpsid	i
 8016d64:	f383 8811 	msr	BASEPRI, r3
 8016d68:	f3bf 8f6f 	isb	sy
 8016d6c:	f3bf 8f4f 	dsb	sy
 8016d70:	b662      	cpsie	i
 8016d72:	60fb      	str	r3, [r7, #12]
}
 8016d74:	bf00      	nop
 8016d76:	e7fe      	b.n	8016d76 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	3318      	adds	r3, #24
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7fe fdd9 	bl	8015934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d82:	4b1d      	ldr	r3, [pc, #116]	; (8016df8 <xTaskRemoveFromEventList+0xb0>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d11c      	bne.n	8016dc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7fe fdd0 	bl	8015934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d98:	2201      	movs	r2, #1
 8016d9a:	409a      	lsls	r2, r3
 8016d9c:	4b17      	ldr	r3, [pc, #92]	; (8016dfc <xTaskRemoveFromEventList+0xb4>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4313      	orrs	r3, r2
 8016da2:	4a16      	ldr	r2, [pc, #88]	; (8016dfc <xTaskRemoveFromEventList+0xb4>)
 8016da4:	6013      	str	r3, [r2, #0]
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016daa:	4613      	mov	r3, r2
 8016dac:	009b      	lsls	r3, r3, #2
 8016dae:	4413      	add	r3, r2
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	4a13      	ldr	r2, [pc, #76]	; (8016e00 <xTaskRemoveFromEventList+0xb8>)
 8016db4:	441a      	add	r2, r3
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	3304      	adds	r3, #4
 8016dba:	4619      	mov	r1, r3
 8016dbc:	4610      	mov	r0, r2
 8016dbe:	f7fe fd5c 	bl	801587a <vListInsertEnd>
 8016dc2:	e005      	b.n	8016dd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	3318      	adds	r3, #24
 8016dc8:	4619      	mov	r1, r3
 8016dca:	480e      	ldr	r0, [pc, #56]	; (8016e04 <xTaskRemoveFromEventList+0xbc>)
 8016dcc:	f7fe fd55 	bl	801587a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dd4:	4b0c      	ldr	r3, [pc, #48]	; (8016e08 <xTaskRemoveFromEventList+0xc0>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d905      	bls.n	8016dea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016dde:	2301      	movs	r3, #1
 8016de0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016de2:	4b0a      	ldr	r3, [pc, #40]	; (8016e0c <xTaskRemoveFromEventList+0xc4>)
 8016de4:	2201      	movs	r2, #1
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	e001      	b.n	8016dee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016dea:	2300      	movs	r3, #0
 8016dec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016dee:	697b      	ldr	r3, [r7, #20]
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3718      	adds	r7, #24
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	200004c8 	.word	0x200004c8
 8016dfc:	200004a8 	.word	0x200004a8
 8016e00:	200003a4 	.word	0x200003a4
 8016e04:	20000460 	.word	0x20000460
 8016e08:	200003a0 	.word	0x200003a0
 8016e0c:	200004b4 	.word	0x200004b4

08016e10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016e10:	b480      	push	{r7}
 8016e12:	b083      	sub	sp, #12
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016e18:	4b06      	ldr	r3, [pc, #24]	; (8016e34 <vTaskInternalSetTimeOutState+0x24>)
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016e20:	4b05      	ldr	r3, [pc, #20]	; (8016e38 <vTaskInternalSetTimeOutState+0x28>)
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	605a      	str	r2, [r3, #4]
}
 8016e28:	bf00      	nop
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr
 8016e34:	200004b8 	.word	0x200004b8
 8016e38:	200004a4 	.word	0x200004a4

08016e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b088      	sub	sp, #32
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d10c      	bne.n	8016e66 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8016e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e50:	b672      	cpsid	i
 8016e52:	f383 8811 	msr	BASEPRI, r3
 8016e56:	f3bf 8f6f 	isb	sy
 8016e5a:	f3bf 8f4f 	dsb	sy
 8016e5e:	b662      	cpsie	i
 8016e60:	613b      	str	r3, [r7, #16]
}
 8016e62:	bf00      	nop
 8016e64:	e7fe      	b.n	8016e64 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d10c      	bne.n	8016e86 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8016e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e70:	b672      	cpsid	i
 8016e72:	f383 8811 	msr	BASEPRI, r3
 8016e76:	f3bf 8f6f 	isb	sy
 8016e7a:	f3bf 8f4f 	dsb	sy
 8016e7e:	b662      	cpsie	i
 8016e80:	60fb      	str	r3, [r7, #12]
}
 8016e82:	bf00      	nop
 8016e84:	e7fe      	b.n	8016e84 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8016e86:	f000 fd39 	bl	80178fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e8a:	4b1d      	ldr	r3, [pc, #116]	; (8016f00 <xTaskCheckForTimeOut+0xc4>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	69ba      	ldr	r2, [r7, #24]
 8016e96:	1ad3      	subs	r3, r2, r3
 8016e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ea2:	d102      	bne.n	8016eaa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	61fb      	str	r3, [r7, #28]
 8016ea8:	e023      	b.n	8016ef2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681a      	ldr	r2, [r3, #0]
 8016eae:	4b15      	ldr	r3, [pc, #84]	; (8016f04 <xTaskCheckForTimeOut+0xc8>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d007      	beq.n	8016ec6 <xTaskCheckForTimeOut+0x8a>
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	69ba      	ldr	r2, [r7, #24]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d302      	bcc.n	8016ec6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	61fb      	str	r3, [r7, #28]
 8016ec4:	e015      	b.n	8016ef2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	697a      	ldr	r2, [r7, #20]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d20b      	bcs.n	8016ee8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	1ad2      	subs	r2, r2, r3
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f7ff ff97 	bl	8016e10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	61fb      	str	r3, [r7, #28]
 8016ee6:	e004      	b.n	8016ef2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	2200      	movs	r2, #0
 8016eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016ef2:	f000 fd37 	bl	8017964 <vPortExitCritical>

	return xReturn;
 8016ef6:	69fb      	ldr	r3, [r7, #28]
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3720      	adds	r7, #32
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}
 8016f00:	200004a4 	.word	0x200004a4
 8016f04:	200004b8 	.word	0x200004b8

08016f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016f08:	b480      	push	{r7}
 8016f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016f0c:	4b03      	ldr	r3, [pc, #12]	; (8016f1c <vTaskMissedYield+0x14>)
 8016f0e:	2201      	movs	r2, #1
 8016f10:	601a      	str	r2, [r3, #0]
}
 8016f12:	bf00      	nop
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr
 8016f1c:	200004b4 	.word	0x200004b4

08016f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016f28:	f000 f854 	bl	8016fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016f2c:	4b07      	ldr	r3, [pc, #28]	; (8016f4c <prvIdleTask+0x2c>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2b01      	cmp	r3, #1
 8016f32:	d907      	bls.n	8016f44 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016f34:	4b06      	ldr	r3, [pc, #24]	; (8016f50 <prvIdleTask+0x30>)
 8016f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f3a:	601a      	str	r2, [r3, #0]
 8016f3c:	f3bf 8f4f 	dsb	sy
 8016f40:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016f44:	f7ea f9ee 	bl	8001324 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016f48:	e7ee      	b.n	8016f28 <prvIdleTask+0x8>
 8016f4a:	bf00      	nop
 8016f4c:	200003a4 	.word	0x200003a4
 8016f50:	e000ed04 	.word	0xe000ed04

08016f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	607b      	str	r3, [r7, #4]
 8016f5e:	e00c      	b.n	8016f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016f60:	687a      	ldr	r2, [r7, #4]
 8016f62:	4613      	mov	r3, r2
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	4413      	add	r3, r2
 8016f68:	009b      	lsls	r3, r3, #2
 8016f6a:	4a12      	ldr	r2, [pc, #72]	; (8016fb4 <prvInitialiseTaskLists+0x60>)
 8016f6c:	4413      	add	r3, r2
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fe fc56 	bl	8015820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	3301      	adds	r3, #1
 8016f78:	607b      	str	r3, [r7, #4]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	2b06      	cmp	r3, #6
 8016f7e:	d9ef      	bls.n	8016f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f80:	480d      	ldr	r0, [pc, #52]	; (8016fb8 <prvInitialiseTaskLists+0x64>)
 8016f82:	f7fe fc4d 	bl	8015820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f86:	480d      	ldr	r0, [pc, #52]	; (8016fbc <prvInitialiseTaskLists+0x68>)
 8016f88:	f7fe fc4a 	bl	8015820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f8c:	480c      	ldr	r0, [pc, #48]	; (8016fc0 <prvInitialiseTaskLists+0x6c>)
 8016f8e:	f7fe fc47 	bl	8015820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f92:	480c      	ldr	r0, [pc, #48]	; (8016fc4 <prvInitialiseTaskLists+0x70>)
 8016f94:	f7fe fc44 	bl	8015820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f98:	480b      	ldr	r0, [pc, #44]	; (8016fc8 <prvInitialiseTaskLists+0x74>)
 8016f9a:	f7fe fc41 	bl	8015820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f9e:	4b0b      	ldr	r3, [pc, #44]	; (8016fcc <prvInitialiseTaskLists+0x78>)
 8016fa0:	4a05      	ldr	r2, [pc, #20]	; (8016fb8 <prvInitialiseTaskLists+0x64>)
 8016fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016fa4:	4b0a      	ldr	r3, [pc, #40]	; (8016fd0 <prvInitialiseTaskLists+0x7c>)
 8016fa6:	4a05      	ldr	r2, [pc, #20]	; (8016fbc <prvInitialiseTaskLists+0x68>)
 8016fa8:	601a      	str	r2, [r3, #0]
}
 8016faa:	bf00      	nop
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	200003a4 	.word	0x200003a4
 8016fb8:	20000430 	.word	0x20000430
 8016fbc:	20000444 	.word	0x20000444
 8016fc0:	20000460 	.word	0x20000460
 8016fc4:	20000474 	.word	0x20000474
 8016fc8:	2000048c 	.word	0x2000048c
 8016fcc:	20000458 	.word	0x20000458
 8016fd0:	2000045c 	.word	0x2000045c

08016fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fda:	e019      	b.n	8017010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016fdc:	f000 fc8e 	bl	80178fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fe0:	4b10      	ldr	r3, [pc, #64]	; (8017024 <prvCheckTasksWaitingTermination+0x50>)
 8016fe2:	68db      	ldr	r3, [r3, #12]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	3304      	adds	r3, #4
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7fe fca1 	bl	8015934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016ff2:	4b0d      	ldr	r3, [pc, #52]	; (8017028 <prvCheckTasksWaitingTermination+0x54>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	3b01      	subs	r3, #1
 8016ff8:	4a0b      	ldr	r2, [pc, #44]	; (8017028 <prvCheckTasksWaitingTermination+0x54>)
 8016ffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016ffc:	4b0b      	ldr	r3, [pc, #44]	; (801702c <prvCheckTasksWaitingTermination+0x58>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	3b01      	subs	r3, #1
 8017002:	4a0a      	ldr	r2, [pc, #40]	; (801702c <prvCheckTasksWaitingTermination+0x58>)
 8017004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017006:	f000 fcad 	bl	8017964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f000 f810 	bl	8017030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017010:	4b06      	ldr	r3, [pc, #24]	; (801702c <prvCheckTasksWaitingTermination+0x58>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d1e1      	bne.n	8016fdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017018:	bf00      	nop
 801701a:	bf00      	nop
 801701c:	3708      	adds	r7, #8
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	20000474 	.word	0x20000474
 8017028:	200004a0 	.word	0x200004a0
 801702c:	20000488 	.word	0x20000488

08017030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801703e:	2b00      	cmp	r3, #0
 8017040:	d108      	bne.n	8017054 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017046:	4618      	mov	r0, r3
 8017048:	f000 fe54 	bl	8017cf4 <vPortFree>
				vPortFree( pxTCB );
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 fe51 	bl	8017cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017052:	e01a      	b.n	801708a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801705a:	2b01      	cmp	r3, #1
 801705c:	d103      	bne.n	8017066 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f000 fe48 	bl	8017cf4 <vPortFree>
	}
 8017064:	e011      	b.n	801708a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801706c:	2b02      	cmp	r3, #2
 801706e:	d00c      	beq.n	801708a <prvDeleteTCB+0x5a>
	__asm volatile
 8017070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017074:	b672      	cpsid	i
 8017076:	f383 8811 	msr	BASEPRI, r3
 801707a:	f3bf 8f6f 	isb	sy
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	b662      	cpsie	i
 8017084:	60fb      	str	r3, [r7, #12]
}
 8017086:	bf00      	nop
 8017088:	e7fe      	b.n	8017088 <prvDeleteTCB+0x58>
	}
 801708a:	bf00      	nop
 801708c:	3710      	adds	r7, #16
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
	...

08017094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801709a:	4b0c      	ldr	r3, [pc, #48]	; (80170cc <prvResetNextTaskUnblockTime+0x38>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d104      	bne.n	80170ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80170a4:	4b0a      	ldr	r3, [pc, #40]	; (80170d0 <prvResetNextTaskUnblockTime+0x3c>)
 80170a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80170ac:	e008      	b.n	80170c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170ae:	4b07      	ldr	r3, [pc, #28]	; (80170cc <prvResetNextTaskUnblockTime+0x38>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	68db      	ldr	r3, [r3, #12]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	4a04      	ldr	r2, [pc, #16]	; (80170d0 <prvResetNextTaskUnblockTime+0x3c>)
 80170be:	6013      	str	r3, [r2, #0]
}
 80170c0:	bf00      	nop
 80170c2:	370c      	adds	r7, #12
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr
 80170cc:	20000458 	.word	0x20000458
 80170d0:	200004c0 	.word	0x200004c0

080170d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80170d4:	b480      	push	{r7}
 80170d6:	b083      	sub	sp, #12
 80170d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80170da:	4b0b      	ldr	r3, [pc, #44]	; (8017108 <xTaskGetSchedulerState+0x34>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d102      	bne.n	80170e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80170e2:	2301      	movs	r3, #1
 80170e4:	607b      	str	r3, [r7, #4]
 80170e6:	e008      	b.n	80170fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170e8:	4b08      	ldr	r3, [pc, #32]	; (801710c <xTaskGetSchedulerState+0x38>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d102      	bne.n	80170f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80170f0:	2302      	movs	r3, #2
 80170f2:	607b      	str	r3, [r7, #4]
 80170f4:	e001      	b.n	80170fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80170f6:	2300      	movs	r3, #0
 80170f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80170fa:	687b      	ldr	r3, [r7, #4]
	}
 80170fc:	4618      	mov	r0, r3
 80170fe:	370c      	adds	r7, #12
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr
 8017108:	200004ac 	.word	0x200004ac
 801710c:	200004c8 	.word	0x200004c8

08017110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017110:	b580      	push	{r7, lr}
 8017112:	b086      	sub	sp, #24
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801711c:	2300      	movs	r3, #0
 801711e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d072      	beq.n	801720c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017126:	4b3c      	ldr	r3, [pc, #240]	; (8017218 <xTaskPriorityDisinherit+0x108>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	693a      	ldr	r2, [r7, #16]
 801712c:	429a      	cmp	r2, r3
 801712e:	d00c      	beq.n	801714a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8017130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017134:	b672      	cpsid	i
 8017136:	f383 8811 	msr	BASEPRI, r3
 801713a:	f3bf 8f6f 	isb	sy
 801713e:	f3bf 8f4f 	dsb	sy
 8017142:	b662      	cpsie	i
 8017144:	60fb      	str	r3, [r7, #12]
}
 8017146:	bf00      	nop
 8017148:	e7fe      	b.n	8017148 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801714e:	2b00      	cmp	r3, #0
 8017150:	d10c      	bne.n	801716c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8017152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017156:	b672      	cpsid	i
 8017158:	f383 8811 	msr	BASEPRI, r3
 801715c:	f3bf 8f6f 	isb	sy
 8017160:	f3bf 8f4f 	dsb	sy
 8017164:	b662      	cpsie	i
 8017166:	60bb      	str	r3, [r7, #8]
}
 8017168:	bf00      	nop
 801716a:	e7fe      	b.n	801716a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017170:	1e5a      	subs	r2, r3, #1
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801717e:	429a      	cmp	r2, r3
 8017180:	d044      	beq.n	801720c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017186:	2b00      	cmp	r3, #0
 8017188:	d140      	bne.n	801720c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	3304      	adds	r3, #4
 801718e:	4618      	mov	r0, r3
 8017190:	f7fe fbd0 	bl	8015934 <uxListRemove>
 8017194:	4603      	mov	r3, r0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d115      	bne.n	80171c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801719e:	491f      	ldr	r1, [pc, #124]	; (801721c <xTaskPriorityDisinherit+0x10c>)
 80171a0:	4613      	mov	r3, r2
 80171a2:	009b      	lsls	r3, r3, #2
 80171a4:	4413      	add	r3, r2
 80171a6:	009b      	lsls	r3, r3, #2
 80171a8:	440b      	add	r3, r1
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d10a      	bne.n	80171c6 <xTaskPriorityDisinherit+0xb6>
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b4:	2201      	movs	r2, #1
 80171b6:	fa02 f303 	lsl.w	r3, r2, r3
 80171ba:	43da      	mvns	r2, r3
 80171bc:	4b18      	ldr	r3, [pc, #96]	; (8017220 <xTaskPriorityDisinherit+0x110>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4013      	ands	r3, r2
 80171c2:	4a17      	ldr	r2, [pc, #92]	; (8017220 <xTaskPriorityDisinherit+0x110>)
 80171c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d2:	f1c3 0207 	rsb	r2, r3, #7
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171de:	2201      	movs	r2, #1
 80171e0:	409a      	lsls	r2, r3
 80171e2:	4b0f      	ldr	r3, [pc, #60]	; (8017220 <xTaskPriorityDisinherit+0x110>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	4313      	orrs	r3, r2
 80171e8:	4a0d      	ldr	r2, [pc, #52]	; (8017220 <xTaskPriorityDisinherit+0x110>)
 80171ea:	6013      	str	r3, [r2, #0]
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171f0:	4613      	mov	r3, r2
 80171f2:	009b      	lsls	r3, r3, #2
 80171f4:	4413      	add	r3, r2
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	4a08      	ldr	r2, [pc, #32]	; (801721c <xTaskPriorityDisinherit+0x10c>)
 80171fa:	441a      	add	r2, r3
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	3304      	adds	r3, #4
 8017200:	4619      	mov	r1, r3
 8017202:	4610      	mov	r0, r2
 8017204:	f7fe fb39 	bl	801587a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017208:	2301      	movs	r3, #1
 801720a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801720c:	697b      	ldr	r3, [r7, #20]
	}
 801720e:	4618      	mov	r0, r3
 8017210:	3718      	adds	r7, #24
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	200003a0 	.word	0x200003a0
 801721c:	200003a4 	.word	0x200003a4
 8017220:	200004a8 	.word	0x200004a8

08017224 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017224:	b580      	push	{r7, lr}
 8017226:	b086      	sub	sp, #24
 8017228:	af00      	add	r7, sp, #0
 801722a:	60f8      	str	r0, [r7, #12]
 801722c:	60b9      	str	r1, [r7, #8]
 801722e:	607a      	str	r2, [r7, #4]
 8017230:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8017232:	f000 fb63 	bl	80178fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017236:	4b26      	ldr	r3, [pc, #152]	; (80172d0 <xTaskNotifyWait+0xac>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801723e:	b2db      	uxtb	r3, r3
 8017240:	2b02      	cmp	r3, #2
 8017242:	d01a      	beq.n	801727a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017244:	4b22      	ldr	r3, [pc, #136]	; (80172d0 <xTaskNotifyWait+0xac>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801724a:	68fa      	ldr	r2, [r7, #12]
 801724c:	43d2      	mvns	r2, r2
 801724e:	400a      	ands	r2, r1
 8017250:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017252:	4b1f      	ldr	r3, [pc, #124]	; (80172d0 <xTaskNotifyWait+0xac>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	2201      	movs	r2, #1
 8017258:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d00b      	beq.n	801727a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017262:	2101      	movs	r1, #1
 8017264:	6838      	ldr	r0, [r7, #0]
 8017266:	f000 f9d5 	bl	8017614 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801726a:	4b1a      	ldr	r3, [pc, #104]	; (80172d4 <xTaskNotifyWait+0xb0>)
 801726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017270:	601a      	str	r2, [r3, #0]
 8017272:	f3bf 8f4f 	dsb	sy
 8017276:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801727a:	f000 fb73 	bl	8017964 <vPortExitCritical>

		taskENTER_CRITICAL();
 801727e:	f000 fb3d 	bl	80178fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d004      	beq.n	8017292 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017288:	4b11      	ldr	r3, [pc, #68]	; (80172d0 <xTaskNotifyWait+0xac>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017292:	4b0f      	ldr	r3, [pc, #60]	; (80172d0 <xTaskNotifyWait+0xac>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801729a:	b2db      	uxtb	r3, r3
 801729c:	2b02      	cmp	r3, #2
 801729e:	d002      	beq.n	80172a6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80172a0:	2300      	movs	r3, #0
 80172a2:	617b      	str	r3, [r7, #20]
 80172a4:	e008      	b.n	80172b8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80172a6:	4b0a      	ldr	r3, [pc, #40]	; (80172d0 <xTaskNotifyWait+0xac>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80172ac:	68ba      	ldr	r2, [r7, #8]
 80172ae:	43d2      	mvns	r2, r2
 80172b0:	400a      	ands	r2, r1
 80172b2:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80172b4:	2301      	movs	r3, #1
 80172b6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80172b8:	4b05      	ldr	r3, [pc, #20]	; (80172d0 <xTaskNotifyWait+0xac>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2200      	movs	r2, #0
 80172be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80172c2:	f000 fb4f 	bl	8017964 <vPortExitCritical>

		return xReturn;
 80172c6:	697b      	ldr	r3, [r7, #20]
	}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3718      	adds	r7, #24
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	200003a0 	.word	0x200003a0
 80172d4:	e000ed04 	.word	0xe000ed04

080172d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b08a      	sub	sp, #40	; 0x28
 80172dc:	af00      	add	r7, sp, #0
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	603b      	str	r3, [r7, #0]
 80172e4:	4613      	mov	r3, r2
 80172e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80172e8:	2301      	movs	r3, #1
 80172ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d10c      	bne.n	801730c <xTaskGenericNotify+0x34>
	__asm volatile
 80172f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f6:	b672      	cpsid	i
 80172f8:	f383 8811 	msr	BASEPRI, r3
 80172fc:	f3bf 8f6f 	isb	sy
 8017300:	f3bf 8f4f 	dsb	sy
 8017304:	b662      	cpsie	i
 8017306:	61bb      	str	r3, [r7, #24]
}
 8017308:	bf00      	nop
 801730a:	e7fe      	b.n	801730a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8017310:	f000 faf4 	bl	80178fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d003      	beq.n	8017322 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801731a:	6a3b      	ldr	r3, [r7, #32]
 801731c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017322:	6a3b      	ldr	r3, [r7, #32]
 8017324:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017328:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	2202      	movs	r2, #2
 801732e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8017332:	79fb      	ldrb	r3, [r7, #7]
 8017334:	2b04      	cmp	r3, #4
 8017336:	d828      	bhi.n	801738a <xTaskGenericNotify+0xb2>
 8017338:	a201      	add	r2, pc, #4	; (adr r2, 8017340 <xTaskGenericNotify+0x68>)
 801733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801733e:	bf00      	nop
 8017340:	080173af 	.word	0x080173af
 8017344:	08017355 	.word	0x08017355
 8017348:	08017363 	.word	0x08017363
 801734c:	0801736f 	.word	0x0801736f
 8017350:	08017377 	.word	0x08017377
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017354:	6a3b      	ldr	r3, [r7, #32]
 8017356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	431a      	orrs	r2, r3
 801735c:	6a3b      	ldr	r3, [r7, #32]
 801735e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017360:	e028      	b.n	80173b4 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017362:	6a3b      	ldr	r3, [r7, #32]
 8017364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017366:	1c5a      	adds	r2, r3, #1
 8017368:	6a3b      	ldr	r3, [r7, #32]
 801736a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801736c:	e022      	b.n	80173b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801736e:	6a3b      	ldr	r3, [r7, #32]
 8017370:	68ba      	ldr	r2, [r7, #8]
 8017372:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017374:	e01e      	b.n	80173b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017376:	7ffb      	ldrb	r3, [r7, #31]
 8017378:	2b02      	cmp	r3, #2
 801737a:	d003      	beq.n	8017384 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801737c:	6a3b      	ldr	r3, [r7, #32]
 801737e:	68ba      	ldr	r2, [r7, #8]
 8017380:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017382:	e017      	b.n	80173b4 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8017384:	2300      	movs	r3, #0
 8017386:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8017388:	e014      	b.n	80173b4 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801738e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017392:	d00e      	beq.n	80173b2 <xTaskGenericNotify+0xda>
	__asm volatile
 8017394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017398:	b672      	cpsid	i
 801739a:	f383 8811 	msr	BASEPRI, r3
 801739e:	f3bf 8f6f 	isb	sy
 80173a2:	f3bf 8f4f 	dsb	sy
 80173a6:	b662      	cpsie	i
 80173a8:	617b      	str	r3, [r7, #20]
}
 80173aa:	bf00      	nop
 80173ac:	e7fe      	b.n	80173ac <xTaskGenericNotify+0xd4>
					break;
 80173ae:	bf00      	nop
 80173b0:	e000      	b.n	80173b4 <xTaskGenericNotify+0xdc>

					break;
 80173b2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80173b4:	7ffb      	ldrb	r3, [r7, #31]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d13b      	bne.n	8017432 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173ba:	6a3b      	ldr	r3, [r7, #32]
 80173bc:	3304      	adds	r3, #4
 80173be:	4618      	mov	r0, r3
 80173c0:	f7fe fab8 	bl	8015934 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80173c4:	6a3b      	ldr	r3, [r7, #32]
 80173c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173c8:	2201      	movs	r2, #1
 80173ca:	409a      	lsls	r2, r3
 80173cc:	4b1c      	ldr	r3, [pc, #112]	; (8017440 <xTaskGenericNotify+0x168>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4313      	orrs	r3, r2
 80173d2:	4a1b      	ldr	r2, [pc, #108]	; (8017440 <xTaskGenericNotify+0x168>)
 80173d4:	6013      	str	r3, [r2, #0]
 80173d6:	6a3b      	ldr	r3, [r7, #32]
 80173d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173da:	4613      	mov	r3, r2
 80173dc:	009b      	lsls	r3, r3, #2
 80173de:	4413      	add	r3, r2
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4a18      	ldr	r2, [pc, #96]	; (8017444 <xTaskGenericNotify+0x16c>)
 80173e4:	441a      	add	r2, r3
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	3304      	adds	r3, #4
 80173ea:	4619      	mov	r1, r3
 80173ec:	4610      	mov	r0, r2
 80173ee:	f7fe fa44 	bl	801587a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80173f2:	6a3b      	ldr	r3, [r7, #32]
 80173f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d00c      	beq.n	8017414 <xTaskGenericNotify+0x13c>
	__asm volatile
 80173fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173fe:	b672      	cpsid	i
 8017400:	f383 8811 	msr	BASEPRI, r3
 8017404:	f3bf 8f6f 	isb	sy
 8017408:	f3bf 8f4f 	dsb	sy
 801740c:	b662      	cpsie	i
 801740e:	613b      	str	r3, [r7, #16]
}
 8017410:	bf00      	nop
 8017412:	e7fe      	b.n	8017412 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017414:	6a3b      	ldr	r3, [r7, #32]
 8017416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017418:	4b0b      	ldr	r3, [pc, #44]	; (8017448 <xTaskGenericNotify+0x170>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801741e:	429a      	cmp	r2, r3
 8017420:	d907      	bls.n	8017432 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8017422:	4b0a      	ldr	r3, [pc, #40]	; (801744c <xTaskGenericNotify+0x174>)
 8017424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017428:	601a      	str	r2, [r3, #0]
 801742a:	f3bf 8f4f 	dsb	sy
 801742e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017432:	f000 fa97 	bl	8017964 <vPortExitCritical>

		return xReturn;
 8017436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017438:	4618      	mov	r0, r3
 801743a:	3728      	adds	r7, #40	; 0x28
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	200004a8 	.word	0x200004a8
 8017444:	200003a4 	.word	0x200003a4
 8017448:	200003a0 	.word	0x200003a0
 801744c:	e000ed04 	.word	0xe000ed04

08017450 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017450:	b580      	push	{r7, lr}
 8017452:	b08e      	sub	sp, #56	; 0x38
 8017454:	af00      	add	r7, sp, #0
 8017456:	60f8      	str	r0, [r7, #12]
 8017458:	60b9      	str	r1, [r7, #8]
 801745a:	603b      	str	r3, [r7, #0]
 801745c:	4613      	mov	r3, r2
 801745e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017460:	2301      	movs	r3, #1
 8017462:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d10c      	bne.n	8017484 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 801746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746e:	b672      	cpsid	i
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	b662      	cpsie	i
 801747e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017480:	bf00      	nop
 8017482:	e7fe      	b.n	8017482 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017484:	f000 fb22 	bl	8017acc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801748c:	f3ef 8211 	mrs	r2, BASEPRI
 8017490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017494:	b672      	cpsid	i
 8017496:	f383 8811 	msr	BASEPRI, r3
 801749a:	f3bf 8f6f 	isb	sy
 801749e:	f3bf 8f4f 	dsb	sy
 80174a2:	b662      	cpsie	i
 80174a4:	623a      	str	r2, [r7, #32]
 80174a6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80174a8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d003      	beq.n	80174ba <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80174b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80174ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80174c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80174c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c6:	2202      	movs	r2, #2
 80174c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80174cc:	79fb      	ldrb	r3, [r7, #7]
 80174ce:	2b04      	cmp	r3, #4
 80174d0:	d828      	bhi.n	8017524 <xTaskGenericNotifyFromISR+0xd4>
 80174d2:	a201      	add	r2, pc, #4	; (adr r2, 80174d8 <xTaskGenericNotifyFromISR+0x88>)
 80174d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174d8:	08017549 	.word	0x08017549
 80174dc:	080174ed 	.word	0x080174ed
 80174e0:	080174fb 	.word	0x080174fb
 80174e4:	08017507 	.word	0x08017507
 80174e8:	0801750f 	.word	0x0801750f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80174ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	431a      	orrs	r2, r3
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80174f8:	e029      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80174fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174fe:	1c5a      	adds	r2, r3, #1
 8017500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017502:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017504:	e023      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017508:	68ba      	ldr	r2, [r7, #8]
 801750a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801750c:	e01f      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801750e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017512:	2b02      	cmp	r3, #2
 8017514:	d003      	beq.n	801751e <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017518:	68ba      	ldr	r2, [r7, #8]
 801751a:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801751c:	e017      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 801751e:	2300      	movs	r3, #0
 8017520:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8017522:	e014      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801752c:	d00e      	beq.n	801754c <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 801752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017532:	b672      	cpsid	i
 8017534:	f383 8811 	msr	BASEPRI, r3
 8017538:	f3bf 8f6f 	isb	sy
 801753c:	f3bf 8f4f 	dsb	sy
 8017540:	b662      	cpsie	i
 8017542:	61bb      	str	r3, [r7, #24]
}
 8017544:	bf00      	nop
 8017546:	e7fe      	b.n	8017546 <xTaskGenericNotifyFromISR+0xf6>
					break;
 8017548:	bf00      	nop
 801754a:	e000      	b.n	801754e <xTaskGenericNotifyFromISR+0xfe>
					break;
 801754c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801754e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017552:	2b01      	cmp	r3, #1
 8017554:	d147      	bne.n	80175e6 <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801755a:	2b00      	cmp	r3, #0
 801755c:	d00c      	beq.n	8017578 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 801755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017562:	b672      	cpsid	i
 8017564:	f383 8811 	msr	BASEPRI, r3
 8017568:	f3bf 8f6f 	isb	sy
 801756c:	f3bf 8f4f 	dsb	sy
 8017570:	b662      	cpsie	i
 8017572:	617b      	str	r3, [r7, #20]
}
 8017574:	bf00      	nop
 8017576:	e7fe      	b.n	8017576 <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017578:	4b20      	ldr	r3, [pc, #128]	; (80175fc <xTaskGenericNotifyFromISR+0x1ac>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d11c      	bne.n	80175ba <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	3304      	adds	r3, #4
 8017584:	4618      	mov	r0, r3
 8017586:	f7fe f9d5 	bl	8015934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801758e:	2201      	movs	r2, #1
 8017590:	409a      	lsls	r2, r3
 8017592:	4b1b      	ldr	r3, [pc, #108]	; (8017600 <xTaskGenericNotifyFromISR+0x1b0>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	4313      	orrs	r3, r2
 8017598:	4a19      	ldr	r2, [pc, #100]	; (8017600 <xTaskGenericNotifyFromISR+0x1b0>)
 801759a:	6013      	str	r3, [r2, #0]
 801759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a0:	4613      	mov	r3, r2
 80175a2:	009b      	lsls	r3, r3, #2
 80175a4:	4413      	add	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	4a16      	ldr	r2, [pc, #88]	; (8017604 <xTaskGenericNotifyFromISR+0x1b4>)
 80175aa:	441a      	add	r2, r3
 80175ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ae:	3304      	adds	r3, #4
 80175b0:	4619      	mov	r1, r3
 80175b2:	4610      	mov	r0, r2
 80175b4:	f7fe f961 	bl	801587a <vListInsertEnd>
 80175b8:	e005      	b.n	80175c6 <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80175ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175bc:	3318      	adds	r3, #24
 80175be:	4619      	mov	r1, r3
 80175c0:	4811      	ldr	r0, [pc, #68]	; (8017608 <xTaskGenericNotifyFromISR+0x1b8>)
 80175c2:	f7fe f95a 	bl	801587a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80175c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ca:	4b10      	ldr	r3, [pc, #64]	; (801760c <xTaskGenericNotifyFromISR+0x1bc>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d908      	bls.n	80175e6 <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80175d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d002      	beq.n	80175e0 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80175da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175dc:	2201      	movs	r2, #1
 80175de:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80175e0:	4b0b      	ldr	r3, [pc, #44]	; (8017610 <xTaskGenericNotifyFromISR+0x1c0>)
 80175e2:	2201      	movs	r2, #1
 80175e4:	601a      	str	r2, [r3, #0]
 80175e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	f383 8811 	msr	BASEPRI, r3
}
 80175f0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80175f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3738      	adds	r7, #56	; 0x38
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	200004c8 	.word	0x200004c8
 8017600:	200004a8 	.word	0x200004a8
 8017604:	200003a4 	.word	0x200003a4
 8017608:	20000460 	.word	0x20000460
 801760c:	200003a0 	.word	0x200003a0
 8017610:	200004b4 	.word	0x200004b4

08017614 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801761e:	4b29      	ldr	r3, [pc, #164]	; (80176c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017624:	4b28      	ldr	r3, [pc, #160]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	3304      	adds	r3, #4
 801762a:	4618      	mov	r0, r3
 801762c:	f7fe f982 	bl	8015934 <uxListRemove>
 8017630:	4603      	mov	r3, r0
 8017632:	2b00      	cmp	r3, #0
 8017634:	d10b      	bne.n	801764e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017636:	4b24      	ldr	r3, [pc, #144]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801763c:	2201      	movs	r2, #1
 801763e:	fa02 f303 	lsl.w	r3, r2, r3
 8017642:	43da      	mvns	r2, r3
 8017644:	4b21      	ldr	r3, [pc, #132]	; (80176cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	4013      	ands	r3, r2
 801764a:	4a20      	ldr	r2, [pc, #128]	; (80176cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801764c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017654:	d10a      	bne.n	801766c <prvAddCurrentTaskToDelayedList+0x58>
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d007      	beq.n	801766c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801765c:	4b1a      	ldr	r3, [pc, #104]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	3304      	adds	r3, #4
 8017662:	4619      	mov	r1, r3
 8017664:	481a      	ldr	r0, [pc, #104]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017666:	f7fe f908 	bl	801587a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801766a:	e026      	b.n	80176ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801766c:	68fa      	ldr	r2, [r7, #12]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	4413      	add	r3, r2
 8017672:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017674:	4b14      	ldr	r3, [pc, #80]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	429a      	cmp	r2, r3
 8017682:	d209      	bcs.n	8017698 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017684:	4b13      	ldr	r3, [pc, #76]	; (80176d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017686:	681a      	ldr	r2, [r3, #0]
 8017688:	4b0f      	ldr	r3, [pc, #60]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	3304      	adds	r3, #4
 801768e:	4619      	mov	r1, r3
 8017690:	4610      	mov	r0, r2
 8017692:	f7fe f916 	bl	80158c2 <vListInsert>
}
 8017696:	e010      	b.n	80176ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017698:	4b0f      	ldr	r3, [pc, #60]	; (80176d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	4b0a      	ldr	r3, [pc, #40]	; (80176c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	3304      	adds	r3, #4
 80176a2:	4619      	mov	r1, r3
 80176a4:	4610      	mov	r0, r2
 80176a6:	f7fe f90c 	bl	80158c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80176aa:	4b0c      	ldr	r3, [pc, #48]	; (80176dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	68ba      	ldr	r2, [r7, #8]
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d202      	bcs.n	80176ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80176b4:	4a09      	ldr	r2, [pc, #36]	; (80176dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	6013      	str	r3, [r2, #0]
}
 80176ba:	bf00      	nop
 80176bc:	3710      	adds	r7, #16
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	200004a4 	.word	0x200004a4
 80176c8:	200003a0 	.word	0x200003a0
 80176cc:	200004a8 	.word	0x200004a8
 80176d0:	2000048c 	.word	0x2000048c
 80176d4:	2000045c 	.word	0x2000045c
 80176d8:	20000458 	.word	0x20000458
 80176dc:	200004c0 	.word	0x200004c0

080176e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80176e0:	b480      	push	{r7}
 80176e2:	b085      	sub	sp, #20
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	60f8      	str	r0, [r7, #12]
 80176e8:	60b9      	str	r1, [r7, #8]
 80176ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	3b04      	subs	r3, #4
 80176f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80176f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	3b04      	subs	r3, #4
 80176fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017700:	68bb      	ldr	r3, [r7, #8]
 8017702:	f023 0201 	bic.w	r2, r3, #1
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	3b04      	subs	r3, #4
 801770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017710:	4a0c      	ldr	r2, [pc, #48]	; (8017744 <pxPortInitialiseStack+0x64>)
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3b14      	subs	r3, #20
 801771a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	3b04      	subs	r3, #4
 8017726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f06f 0202 	mvn.w	r2, #2
 801772e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	3b20      	subs	r3, #32
 8017734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017736:	68fb      	ldr	r3, [r7, #12]
}
 8017738:	4618      	mov	r0, r3
 801773a:	3714      	adds	r7, #20
 801773c:	46bd      	mov	sp, r7
 801773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017742:	4770      	bx	lr
 8017744:	08017749 	.word	0x08017749

08017748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017748:	b480      	push	{r7}
 801774a:	b085      	sub	sp, #20
 801774c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801774e:	2300      	movs	r3, #0
 8017750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017752:	4b14      	ldr	r3, [pc, #80]	; (80177a4 <prvTaskExitError+0x5c>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801775a:	d00c      	beq.n	8017776 <prvTaskExitError+0x2e>
	__asm volatile
 801775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017760:	b672      	cpsid	i
 8017762:	f383 8811 	msr	BASEPRI, r3
 8017766:	f3bf 8f6f 	isb	sy
 801776a:	f3bf 8f4f 	dsb	sy
 801776e:	b662      	cpsie	i
 8017770:	60fb      	str	r3, [r7, #12]
}
 8017772:	bf00      	nop
 8017774:	e7fe      	b.n	8017774 <prvTaskExitError+0x2c>
	__asm volatile
 8017776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801777a:	b672      	cpsid	i
 801777c:	f383 8811 	msr	BASEPRI, r3
 8017780:	f3bf 8f6f 	isb	sy
 8017784:	f3bf 8f4f 	dsb	sy
 8017788:	b662      	cpsie	i
 801778a:	60bb      	str	r3, [r7, #8]
}
 801778c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801778e:	bf00      	nop
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d0fc      	beq.n	8017790 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017796:	bf00      	nop
 8017798:	bf00      	nop
 801779a:	3714      	adds	r7, #20
 801779c:	46bd      	mov	sp, r7
 801779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a2:	4770      	bx	lr
 80177a4:	2000004c 	.word	0x2000004c
	...

080177b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80177b0:	4b07      	ldr	r3, [pc, #28]	; (80177d0 <pxCurrentTCBConst2>)
 80177b2:	6819      	ldr	r1, [r3, #0]
 80177b4:	6808      	ldr	r0, [r1, #0]
 80177b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ba:	f380 8809 	msr	PSP, r0
 80177be:	f3bf 8f6f 	isb	sy
 80177c2:	f04f 0000 	mov.w	r0, #0
 80177c6:	f380 8811 	msr	BASEPRI, r0
 80177ca:	4770      	bx	lr
 80177cc:	f3af 8000 	nop.w

080177d0 <pxCurrentTCBConst2>:
 80177d0:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80177d4:	bf00      	nop
 80177d6:	bf00      	nop

080177d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80177d8:	4808      	ldr	r0, [pc, #32]	; (80177fc <prvPortStartFirstTask+0x24>)
 80177da:	6800      	ldr	r0, [r0, #0]
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	f380 8808 	msr	MSP, r0
 80177e2:	f04f 0000 	mov.w	r0, #0
 80177e6:	f380 8814 	msr	CONTROL, r0
 80177ea:	b662      	cpsie	i
 80177ec:	b661      	cpsie	f
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	f3bf 8f6f 	isb	sy
 80177f6:	df00      	svc	0
 80177f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80177fa:	bf00      	nop
 80177fc:	e000ed08 	.word	0xe000ed08

08017800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017806:	4b37      	ldr	r3, [pc, #220]	; (80178e4 <xPortStartScheduler+0xe4>)
 8017808:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	b2db      	uxtb	r3, r3
 8017810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	22ff      	movs	r2, #255	; 0xff
 8017816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	b2db      	uxtb	r3, r3
 801781e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017820:	78fb      	ldrb	r3, [r7, #3]
 8017822:	b2db      	uxtb	r3, r3
 8017824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017828:	b2da      	uxtb	r2, r3
 801782a:	4b2f      	ldr	r3, [pc, #188]	; (80178e8 <xPortStartScheduler+0xe8>)
 801782c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801782e:	4b2f      	ldr	r3, [pc, #188]	; (80178ec <xPortStartScheduler+0xec>)
 8017830:	2207      	movs	r2, #7
 8017832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017834:	e009      	b.n	801784a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017836:	4b2d      	ldr	r3, [pc, #180]	; (80178ec <xPortStartScheduler+0xec>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	3b01      	subs	r3, #1
 801783c:	4a2b      	ldr	r2, [pc, #172]	; (80178ec <xPortStartScheduler+0xec>)
 801783e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017840:	78fb      	ldrb	r3, [r7, #3]
 8017842:	b2db      	uxtb	r3, r3
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	b2db      	uxtb	r3, r3
 8017848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801784a:	78fb      	ldrb	r3, [r7, #3]
 801784c:	b2db      	uxtb	r3, r3
 801784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017852:	2b80      	cmp	r3, #128	; 0x80
 8017854:	d0ef      	beq.n	8017836 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017856:	4b25      	ldr	r3, [pc, #148]	; (80178ec <xPortStartScheduler+0xec>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f1c3 0307 	rsb	r3, r3, #7
 801785e:	2b04      	cmp	r3, #4
 8017860:	d00c      	beq.n	801787c <xPortStartScheduler+0x7c>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	b672      	cpsid	i
 8017868:	f383 8811 	msr	BASEPRI, r3
 801786c:	f3bf 8f6f 	isb	sy
 8017870:	f3bf 8f4f 	dsb	sy
 8017874:	b662      	cpsie	i
 8017876:	60bb      	str	r3, [r7, #8]
}
 8017878:	bf00      	nop
 801787a:	e7fe      	b.n	801787a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801787c:	4b1b      	ldr	r3, [pc, #108]	; (80178ec <xPortStartScheduler+0xec>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	021b      	lsls	r3, r3, #8
 8017882:	4a1a      	ldr	r2, [pc, #104]	; (80178ec <xPortStartScheduler+0xec>)
 8017884:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017886:	4b19      	ldr	r3, [pc, #100]	; (80178ec <xPortStartScheduler+0xec>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801788e:	4a17      	ldr	r2, [pc, #92]	; (80178ec <xPortStartScheduler+0xec>)
 8017890:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	b2da      	uxtb	r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801789a:	4b15      	ldr	r3, [pc, #84]	; (80178f0 <xPortStartScheduler+0xf0>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4a14      	ldr	r2, [pc, #80]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80178a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80178a6:	4b12      	ldr	r3, [pc, #72]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4a11      	ldr	r2, [pc, #68]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80178b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80178b2:	f000 f8dd 	bl	8017a70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80178b6:	4b0f      	ldr	r3, [pc, #60]	; (80178f4 <xPortStartScheduler+0xf4>)
 80178b8:	2200      	movs	r2, #0
 80178ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80178bc:	f000 f8fc 	bl	8017ab8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <xPortStartScheduler+0xf8>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4a0c      	ldr	r2, [pc, #48]	; (80178f8 <xPortStartScheduler+0xf8>)
 80178c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80178ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80178cc:	f7ff ff84 	bl	80177d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80178d0:	f7ff f992 	bl	8016bf8 <vTaskSwitchContext>
	prvTaskExitError();
 80178d4:	f7ff ff38 	bl	8017748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80178d8:	2300      	movs	r3, #0
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	e000e400 	.word	0xe000e400
 80178e8:	200004cc 	.word	0x200004cc
 80178ec:	200004d0 	.word	0x200004d0
 80178f0:	e000ed20 	.word	0xe000ed20
 80178f4:	2000004c 	.word	0x2000004c
 80178f8:	e000ef34 	.word	0xe000ef34

080178fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
	__asm volatile
 8017902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017906:	b672      	cpsid	i
 8017908:	f383 8811 	msr	BASEPRI, r3
 801790c:	f3bf 8f6f 	isb	sy
 8017910:	f3bf 8f4f 	dsb	sy
 8017914:	b662      	cpsie	i
 8017916:	607b      	str	r3, [r7, #4]
}
 8017918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801791a:	4b10      	ldr	r3, [pc, #64]	; (801795c <vPortEnterCritical+0x60>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	3301      	adds	r3, #1
 8017920:	4a0e      	ldr	r2, [pc, #56]	; (801795c <vPortEnterCritical+0x60>)
 8017922:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017924:	4b0d      	ldr	r3, [pc, #52]	; (801795c <vPortEnterCritical+0x60>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b01      	cmp	r3, #1
 801792a:	d111      	bne.n	8017950 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801792c:	4b0c      	ldr	r3, [pc, #48]	; (8017960 <vPortEnterCritical+0x64>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	b2db      	uxtb	r3, r3
 8017932:	2b00      	cmp	r3, #0
 8017934:	d00c      	beq.n	8017950 <vPortEnterCritical+0x54>
	__asm volatile
 8017936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793a:	b672      	cpsid	i
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	b662      	cpsie	i
 801794a:	603b      	str	r3, [r7, #0]
}
 801794c:	bf00      	nop
 801794e:	e7fe      	b.n	801794e <vPortEnterCritical+0x52>
	}
}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	2000004c 	.word	0x2000004c
 8017960:	e000ed04 	.word	0xe000ed04

08017964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017964:	b480      	push	{r7}
 8017966:	b083      	sub	sp, #12
 8017968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801796a:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <vPortExitCritical+0x54>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d10c      	bne.n	801798c <vPortExitCritical+0x28>
	__asm volatile
 8017972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017976:	b672      	cpsid	i
 8017978:	f383 8811 	msr	BASEPRI, r3
 801797c:	f3bf 8f6f 	isb	sy
 8017980:	f3bf 8f4f 	dsb	sy
 8017984:	b662      	cpsie	i
 8017986:	607b      	str	r3, [r7, #4]
}
 8017988:	bf00      	nop
 801798a:	e7fe      	b.n	801798a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801798c:	4b0a      	ldr	r3, [pc, #40]	; (80179b8 <vPortExitCritical+0x54>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	3b01      	subs	r3, #1
 8017992:	4a09      	ldr	r2, [pc, #36]	; (80179b8 <vPortExitCritical+0x54>)
 8017994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017996:	4b08      	ldr	r3, [pc, #32]	; (80179b8 <vPortExitCritical+0x54>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d105      	bne.n	80179aa <vPortExitCritical+0x46>
 801799e:	2300      	movs	r3, #0
 80179a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	f383 8811 	msr	BASEPRI, r3
}
 80179a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80179aa:	bf00      	nop
 80179ac:	370c      	adds	r7, #12
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop
 80179b8:	2000004c 	.word	0x2000004c
 80179bc:	00000000 	.word	0x00000000

080179c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80179c0:	f3ef 8009 	mrs	r0, PSP
 80179c4:	f3bf 8f6f 	isb	sy
 80179c8:	4b15      	ldr	r3, [pc, #84]	; (8017a20 <pxCurrentTCBConst>)
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	f01e 0f10 	tst.w	lr, #16
 80179d0:	bf08      	it	eq
 80179d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80179d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179da:	6010      	str	r0, [r2, #0]
 80179dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80179e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80179e4:	b672      	cpsid	i
 80179e6:	f380 8811 	msr	BASEPRI, r0
 80179ea:	f3bf 8f4f 	dsb	sy
 80179ee:	f3bf 8f6f 	isb	sy
 80179f2:	b662      	cpsie	i
 80179f4:	f7ff f900 	bl	8016bf8 <vTaskSwitchContext>
 80179f8:	f04f 0000 	mov.w	r0, #0
 80179fc:	f380 8811 	msr	BASEPRI, r0
 8017a00:	bc09      	pop	{r0, r3}
 8017a02:	6819      	ldr	r1, [r3, #0]
 8017a04:	6808      	ldr	r0, [r1, #0]
 8017a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0a:	f01e 0f10 	tst.w	lr, #16
 8017a0e:	bf08      	it	eq
 8017a10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017a14:	f380 8809 	msr	PSP, r0
 8017a18:	f3bf 8f6f 	isb	sy
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop

08017a20 <pxCurrentTCBConst>:
 8017a20:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017a24:	bf00      	nop
 8017a26:	bf00      	nop

08017a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8017a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a32:	b672      	cpsid	i
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	b662      	cpsie	i
 8017a42:	607b      	str	r3, [r7, #4]
}
 8017a44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017a46:	f7ff f81d 	bl	8016a84 <xTaskIncrementTick>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d003      	beq.n	8017a58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017a50:	4b06      	ldr	r3, [pc, #24]	; (8017a6c <SysTick_Handler+0x44>)
 8017a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a56:	601a      	str	r2, [r3, #0]
 8017a58:	2300      	movs	r3, #0
 8017a5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	f383 8811 	msr	BASEPRI, r3
}
 8017a62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017a64:	bf00      	nop
 8017a66:	3708      	adds	r7, #8
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	e000ed04 	.word	0xe000ed04

08017a70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017a70:	b480      	push	{r7}
 8017a72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017a74:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <vPortSetupTimerInterrupt+0x34>)
 8017a76:	2200      	movs	r2, #0
 8017a78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017a7a:	4b0b      	ldr	r3, [pc, #44]	; (8017aa8 <vPortSetupTimerInterrupt+0x38>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017a80:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <vPortSetupTimerInterrupt+0x3c>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	4a0a      	ldr	r2, [pc, #40]	; (8017ab0 <vPortSetupTimerInterrupt+0x40>)
 8017a86:	fba2 2303 	umull	r2, r3, r2, r3
 8017a8a:	099b      	lsrs	r3, r3, #6
 8017a8c:	4a09      	ldr	r2, [pc, #36]	; (8017ab4 <vPortSetupTimerInterrupt+0x44>)
 8017a8e:	3b01      	subs	r3, #1
 8017a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017a92:	4b04      	ldr	r3, [pc, #16]	; (8017aa4 <vPortSetupTimerInterrupt+0x34>)
 8017a94:	2207      	movs	r2, #7
 8017a96:	601a      	str	r2, [r3, #0]
}
 8017a98:	bf00      	nop
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa0:	4770      	bx	lr
 8017aa2:	bf00      	nop
 8017aa4:	e000e010 	.word	0xe000e010
 8017aa8:	e000e018 	.word	0xe000e018
 8017aac:	20000008 	.word	0x20000008
 8017ab0:	10624dd3 	.word	0x10624dd3
 8017ab4:	e000e014 	.word	0xe000e014

08017ab8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017ab8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017ac8 <vPortEnableVFP+0x10>
 8017abc:	6801      	ldr	r1, [r0, #0]
 8017abe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017ac2:	6001      	str	r1, [r0, #0]
 8017ac4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017ac6:	bf00      	nop
 8017ac8:	e000ed88 	.word	0xe000ed88

08017acc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017acc:	b480      	push	{r7}
 8017ace:	b085      	sub	sp, #20
 8017ad0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017ad2:	f3ef 8305 	mrs	r3, IPSR
 8017ad6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2b0f      	cmp	r3, #15
 8017adc:	d916      	bls.n	8017b0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017ade:	4a19      	ldr	r2, [pc, #100]	; (8017b44 <vPortValidateInterruptPriority+0x78>)
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017ae8:	4b17      	ldr	r3, [pc, #92]	; (8017b48 <vPortValidateInterruptPriority+0x7c>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	7afa      	ldrb	r2, [r7, #11]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d20c      	bcs.n	8017b0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8017af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af6:	b672      	cpsid	i
 8017af8:	f383 8811 	msr	BASEPRI, r3
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	f3bf 8f4f 	dsb	sy
 8017b04:	b662      	cpsie	i
 8017b06:	607b      	str	r3, [r7, #4]
}
 8017b08:	bf00      	nop
 8017b0a:	e7fe      	b.n	8017b0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017b0c:	4b0f      	ldr	r3, [pc, #60]	; (8017b4c <vPortValidateInterruptPriority+0x80>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017b14:	4b0e      	ldr	r3, [pc, #56]	; (8017b50 <vPortValidateInterruptPriority+0x84>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d90c      	bls.n	8017b36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8017b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b20:	b672      	cpsid	i
 8017b22:	f383 8811 	msr	BASEPRI, r3
 8017b26:	f3bf 8f6f 	isb	sy
 8017b2a:	f3bf 8f4f 	dsb	sy
 8017b2e:	b662      	cpsie	i
 8017b30:	603b      	str	r3, [r7, #0]
}
 8017b32:	bf00      	nop
 8017b34:	e7fe      	b.n	8017b34 <vPortValidateInterruptPriority+0x68>
	}
 8017b36:	bf00      	nop
 8017b38:	3714      	adds	r7, #20
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr
 8017b42:	bf00      	nop
 8017b44:	e000e3f0 	.word	0xe000e3f0
 8017b48:	200004cc 	.word	0x200004cc
 8017b4c:	e000ed0c 	.word	0xe000ed0c
 8017b50:	200004d0 	.word	0x200004d0

08017b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b08a      	sub	sp, #40	; 0x28
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017b60:	f7fe fec2 	bl	80168e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017b64:	4b5e      	ldr	r3, [pc, #376]	; (8017ce0 <pvPortMalloc+0x18c>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d101      	bne.n	8017b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017b6c:	f000 f920 	bl	8017db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017b70:	4b5c      	ldr	r3, [pc, #368]	; (8017ce4 <pvPortMalloc+0x190>)
 8017b72:	681a      	ldr	r2, [r3, #0]
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	4013      	ands	r3, r2
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	f040 8092 	bne.w	8017ca2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d01f      	beq.n	8017bc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8017b84:	2208      	movs	r2, #8
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	4413      	add	r3, r2
 8017b8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f003 0307 	and.w	r3, r3, #7
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d016      	beq.n	8017bc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f023 0307 	bic.w	r3, r3, #7
 8017b9c:	3308      	adds	r3, #8
 8017b9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f003 0307 	and.w	r3, r3, #7
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d00c      	beq.n	8017bc4 <pvPortMalloc+0x70>
	__asm volatile
 8017baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bae:	b672      	cpsid	i
 8017bb0:	f383 8811 	msr	BASEPRI, r3
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	f3bf 8f4f 	dsb	sy
 8017bbc:	b662      	cpsie	i
 8017bbe:	617b      	str	r3, [r7, #20]
}
 8017bc0:	bf00      	nop
 8017bc2:	e7fe      	b.n	8017bc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d06b      	beq.n	8017ca2 <pvPortMalloc+0x14e>
 8017bca:	4b47      	ldr	r3, [pc, #284]	; (8017ce8 <pvPortMalloc+0x194>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d866      	bhi.n	8017ca2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017bd4:	4b45      	ldr	r3, [pc, #276]	; (8017cec <pvPortMalloc+0x198>)
 8017bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017bd8:	4b44      	ldr	r3, [pc, #272]	; (8017cec <pvPortMalloc+0x198>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017bde:	e004      	b.n	8017bea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8017be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d903      	bls.n	8017bfc <pvPortMalloc+0xa8>
 8017bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1f1      	bne.n	8017be0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017bfc:	4b38      	ldr	r3, [pc, #224]	; (8017ce0 <pvPortMalloc+0x18c>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d04d      	beq.n	8017ca2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017c06:	6a3b      	ldr	r3, [r7, #32]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2208      	movs	r2, #8
 8017c0c:	4413      	add	r3, r2
 8017c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	6a3b      	ldr	r3, [r7, #32]
 8017c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1a:	685a      	ldr	r2, [r3, #4]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	1ad2      	subs	r2, r2, r3
 8017c20:	2308      	movs	r3, #8
 8017c22:	005b      	lsls	r3, r3, #1
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d921      	bls.n	8017c6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	f003 0307 	and.w	r3, r3, #7
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d00c      	beq.n	8017c54 <pvPortMalloc+0x100>
	__asm volatile
 8017c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c3e:	b672      	cpsid	i
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	b662      	cpsie	i
 8017c4e:	613b      	str	r3, [r7, #16]
}
 8017c50:	bf00      	nop
 8017c52:	e7fe      	b.n	8017c52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c56:	685a      	ldr	r2, [r3, #4]
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	1ad2      	subs	r2, r2, r3
 8017c5c:	69bb      	ldr	r3, [r7, #24]
 8017c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c62:	687a      	ldr	r2, [r7, #4]
 8017c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017c66:	69b8      	ldr	r0, [r7, #24]
 8017c68:	f000 f904 	bl	8017e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017c6c:	4b1e      	ldr	r3, [pc, #120]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c6e:	681a      	ldr	r2, [r3, #0]
 8017c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c72:	685b      	ldr	r3, [r3, #4]
 8017c74:	1ad3      	subs	r3, r2, r3
 8017c76:	4a1c      	ldr	r2, [pc, #112]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017c7a:	4b1b      	ldr	r3, [pc, #108]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	4b1c      	ldr	r3, [pc, #112]	; (8017cf0 <pvPortMalloc+0x19c>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d203      	bcs.n	8017c8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017c86:	4b18      	ldr	r3, [pc, #96]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	4a19      	ldr	r2, [pc, #100]	; (8017cf0 <pvPortMalloc+0x19c>)
 8017c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c90:	685a      	ldr	r2, [r3, #4]
 8017c92:	4b14      	ldr	r3, [pc, #80]	; (8017ce4 <pvPortMalloc+0x190>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	431a      	orrs	r2, r3
 8017c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017ca2:	f7fe fe2f 	bl	8016904 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d101      	bne.n	8017cb0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017cac:	f7e9 fb4c 	bl	8001348 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cb0:	69fb      	ldr	r3, [r7, #28]
 8017cb2:	f003 0307 	and.w	r3, r3, #7
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d00c      	beq.n	8017cd4 <pvPortMalloc+0x180>
	__asm volatile
 8017cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cbe:	b672      	cpsid	i
 8017cc0:	f383 8811 	msr	BASEPRI, r3
 8017cc4:	f3bf 8f6f 	isb	sy
 8017cc8:	f3bf 8f4f 	dsb	sy
 8017ccc:	b662      	cpsie	i
 8017cce:	60fb      	str	r3, [r7, #12]
}
 8017cd0:	bf00      	nop
 8017cd2:	e7fe      	b.n	8017cd2 <pvPortMalloc+0x17e>
	return pvReturn;
 8017cd4:	69fb      	ldr	r3, [r7, #28]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3728      	adds	r7, #40	; 0x28
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	200084dc 	.word	0x200084dc
 8017ce4:	200084e8 	.word	0x200084e8
 8017ce8:	200084e0 	.word	0x200084e0
 8017cec:	200084d4 	.word	0x200084d4
 8017cf0:	200084e4 	.word	0x200084e4

08017cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d04c      	beq.n	8017da0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017d06:	2308      	movs	r3, #8
 8017d08:	425b      	negs	r3, r3
 8017d0a:	697a      	ldr	r2, [r7, #20]
 8017d0c:	4413      	add	r3, r2
 8017d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	685a      	ldr	r2, [r3, #4]
 8017d18:	4b23      	ldr	r3, [pc, #140]	; (8017da8 <vPortFree+0xb4>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4013      	ands	r3, r2
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d10c      	bne.n	8017d3c <vPortFree+0x48>
	__asm volatile
 8017d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d26:	b672      	cpsid	i
 8017d28:	f383 8811 	msr	BASEPRI, r3
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	b662      	cpsie	i
 8017d36:	60fb      	str	r3, [r7, #12]
}
 8017d38:	bf00      	nop
 8017d3a:	e7fe      	b.n	8017d3a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d00c      	beq.n	8017d5e <vPortFree+0x6a>
	__asm volatile
 8017d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d48:	b672      	cpsid	i
 8017d4a:	f383 8811 	msr	BASEPRI, r3
 8017d4e:	f3bf 8f6f 	isb	sy
 8017d52:	f3bf 8f4f 	dsb	sy
 8017d56:	b662      	cpsie	i
 8017d58:	60bb      	str	r3, [r7, #8]
}
 8017d5a:	bf00      	nop
 8017d5c:	e7fe      	b.n	8017d5c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	685a      	ldr	r2, [r3, #4]
 8017d62:	4b11      	ldr	r3, [pc, #68]	; (8017da8 <vPortFree+0xb4>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	4013      	ands	r3, r2
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d019      	beq.n	8017da0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d115      	bne.n	8017da0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017d74:	693b      	ldr	r3, [r7, #16]
 8017d76:	685a      	ldr	r2, [r3, #4]
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <vPortFree+0xb4>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	43db      	mvns	r3, r3
 8017d7e:	401a      	ands	r2, r3
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017d84:	f7fe fdb0 	bl	80168e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	685a      	ldr	r2, [r3, #4]
 8017d8c:	4b07      	ldr	r3, [pc, #28]	; (8017dac <vPortFree+0xb8>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4413      	add	r3, r2
 8017d92:	4a06      	ldr	r2, [pc, #24]	; (8017dac <vPortFree+0xb8>)
 8017d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017d96:	6938      	ldr	r0, [r7, #16]
 8017d98:	f000 f86c 	bl	8017e74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017d9c:	f7fe fdb2 	bl	8016904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017da0:	bf00      	nop
 8017da2:	3718      	adds	r7, #24
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	200084e8 	.word	0x200084e8
 8017dac:	200084e0 	.word	0x200084e0

08017db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017db0:	b480      	push	{r7}
 8017db2:	b085      	sub	sp, #20
 8017db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017dbc:	4b27      	ldr	r3, [pc, #156]	; (8017e5c <prvHeapInit+0xac>)
 8017dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f003 0307 	and.w	r3, r3, #7
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00c      	beq.n	8017de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	3307      	adds	r3, #7
 8017dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	f023 0307 	bic.w	r3, r3, #7
 8017dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017dd8:	68ba      	ldr	r2, [r7, #8]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	1ad3      	subs	r3, r2, r3
 8017dde:	4a1f      	ldr	r2, [pc, #124]	; (8017e5c <prvHeapInit+0xac>)
 8017de0:	4413      	add	r3, r2
 8017de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017de8:	4a1d      	ldr	r2, [pc, #116]	; (8017e60 <prvHeapInit+0xb0>)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017dee:	4b1c      	ldr	r3, [pc, #112]	; (8017e60 <prvHeapInit+0xb0>)
 8017df0:	2200      	movs	r2, #0
 8017df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	68ba      	ldr	r2, [r7, #8]
 8017df8:	4413      	add	r3, r2
 8017dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017dfc:	2208      	movs	r2, #8
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	1a9b      	subs	r3, r3, r2
 8017e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f023 0307 	bic.w	r3, r3, #7
 8017e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	4a15      	ldr	r2, [pc, #84]	; (8017e64 <prvHeapInit+0xb4>)
 8017e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017e12:	4b14      	ldr	r3, [pc, #80]	; (8017e64 <prvHeapInit+0xb4>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2200      	movs	r2, #0
 8017e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017e1a:	4b12      	ldr	r3, [pc, #72]	; (8017e64 <prvHeapInit+0xb4>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2200      	movs	r2, #0
 8017e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	68fa      	ldr	r2, [r7, #12]
 8017e2a:	1ad2      	subs	r2, r2, r3
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017e30:	4b0c      	ldr	r3, [pc, #48]	; (8017e64 <prvHeapInit+0xb4>)
 8017e32:	681a      	ldr	r2, [r3, #0]
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	4a0a      	ldr	r2, [pc, #40]	; (8017e68 <prvHeapInit+0xb8>)
 8017e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	4a09      	ldr	r2, [pc, #36]	; (8017e6c <prvHeapInit+0xbc>)
 8017e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017e48:	4b09      	ldr	r3, [pc, #36]	; (8017e70 <prvHeapInit+0xc0>)
 8017e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017e4e:	601a      	str	r2, [r3, #0]
}
 8017e50:	bf00      	nop
 8017e52:	3714      	adds	r7, #20
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr
 8017e5c:	200004d4 	.word	0x200004d4
 8017e60:	200084d4 	.word	0x200084d4
 8017e64:	200084dc 	.word	0x200084dc
 8017e68:	200084e4 	.word	0x200084e4
 8017e6c:	200084e0 	.word	0x200084e0
 8017e70:	200084e8 	.word	0x200084e8

08017e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017e74:	b480      	push	{r7}
 8017e76:	b085      	sub	sp, #20
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017e7c:	4b28      	ldr	r3, [pc, #160]	; (8017f20 <prvInsertBlockIntoFreeList+0xac>)
 8017e7e:	60fb      	str	r3, [r7, #12]
 8017e80:	e002      	b.n	8017e88 <prvInsertBlockIntoFreeList+0x14>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	60fb      	str	r3, [r7, #12]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	687a      	ldr	r2, [r7, #4]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d8f7      	bhi.n	8017e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	68ba      	ldr	r2, [r7, #8]
 8017e9c:	4413      	add	r3, r2
 8017e9e:	687a      	ldr	r2, [r7, #4]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d108      	bne.n	8017eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	685a      	ldr	r2, [r3, #4]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	441a      	add	r2, r3
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	68ba      	ldr	r2, [r7, #8]
 8017ec0:	441a      	add	r2, r3
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d118      	bne.n	8017efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	4b15      	ldr	r3, [pc, #84]	; (8017f24 <prvInsertBlockIntoFreeList+0xb0>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d00d      	beq.n	8017ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	441a      	add	r2, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	601a      	str	r2, [r3, #0]
 8017ef0:	e008      	b.n	8017f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017ef2:	4b0c      	ldr	r3, [pc, #48]	; (8017f24 <prvInsertBlockIntoFreeList+0xb0>)
 8017ef4:	681a      	ldr	r2, [r3, #0]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	601a      	str	r2, [r3, #0]
 8017efa:	e003      	b.n	8017f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	681a      	ldr	r2, [r3, #0]
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017f04:	68fa      	ldr	r2, [r7, #12]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d002      	beq.n	8017f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f12:	bf00      	nop
 8017f14:	3714      	adds	r7, #20
 8017f16:	46bd      	mov	sp, r7
 8017f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop
 8017f20:	200084d4 	.word	0x200084d4
 8017f24:	200084dc 	.word	0x200084dc

08017f28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	490e      	ldr	r1, [pc, #56]	; (8017f68 <MX_USB_HOST_Init+0x40>)
 8017f30:	480e      	ldr	r0, [pc, #56]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f32:	f7fb fc79 	bl	8013828 <USBH_Init>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d001      	beq.n	8017f40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017f3c:	f7ea fe72 	bl	8002c24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017f40:	490b      	ldr	r1, [pc, #44]	; (8017f70 <MX_USB_HOST_Init+0x48>)
 8017f42:	480a      	ldr	r0, [pc, #40]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f44:	f7fb fd26 	bl	8013994 <USBH_RegisterClass>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d001      	beq.n	8017f52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017f4e:	f7ea fe69 	bl	8002c24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017f52:	4806      	ldr	r0, [pc, #24]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f54:	f7fb fdaa 	bl	8013aac <USBH_Start>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d001      	beq.n	8017f62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017f5e:	f7ea fe61 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017f62:	bf00      	nop
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	bf00      	nop
 8017f68:	08017f75 	.word	0x08017f75
 8017f6c:	2004a6d8 	.word	0x2004a6d8
 8017f70:	2000002c 	.word	0x2000002c

08017f74 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017f80:	78fb      	ldrb	r3, [r7, #3]
 8017f82:	3b01      	subs	r3, #1
 8017f84:	2b04      	cmp	r3, #4
 8017f86:	d819      	bhi.n	8017fbc <USBH_UserProcess+0x48>
 8017f88:	a201      	add	r2, pc, #4	; (adr r2, 8017f90 <USBH_UserProcess+0x1c>)
 8017f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f8e:	bf00      	nop
 8017f90:	08017fbd 	.word	0x08017fbd
 8017f94:	08017fad 	.word	0x08017fad
 8017f98:	08017fbd 	.word	0x08017fbd
 8017f9c:	08017fb5 	.word	0x08017fb5
 8017fa0:	08017fa5 	.word	0x08017fa5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017fa4:	4b09      	ldr	r3, [pc, #36]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fa6:	2203      	movs	r2, #3
 8017fa8:	701a      	strb	r2, [r3, #0]
  break;
 8017faa:	e008      	b.n	8017fbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017fac:	4b07      	ldr	r3, [pc, #28]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fae:	2202      	movs	r2, #2
 8017fb0:	701a      	strb	r2, [r3, #0]
  break;
 8017fb2:	e004      	b.n	8017fbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017fb4:	4b05      	ldr	r3, [pc, #20]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	701a      	strb	r2, [r3, #0]
  break;
 8017fba:	e000      	b.n	8017fbe <USBH_UserProcess+0x4a>

  default:
  break;
 8017fbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017fbe:	bf00      	nop
 8017fc0:	370c      	adds	r7, #12
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc8:	4770      	bx	lr
 8017fca:	bf00      	nop
 8017fcc:	200084ec 	.word	0x200084ec

08017fd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b08a      	sub	sp, #40	; 0x28
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017fd8:	f107 0314 	add.w	r3, r7, #20
 8017fdc:	2200      	movs	r2, #0
 8017fde:	601a      	str	r2, [r3, #0]
 8017fe0:	605a      	str	r2, [r3, #4]
 8017fe2:	609a      	str	r2, [r3, #8]
 8017fe4:	60da      	str	r2, [r3, #12]
 8017fe6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ff0:	d13c      	bne.n	801806c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ff2:	4b20      	ldr	r3, [pc, #128]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8017ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ff6:	4a1f      	ldr	r2, [pc, #124]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8017ff8:	f043 0301 	orr.w	r3, r3, #1
 8017ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ffe:	4b1d      	ldr	r3, [pc, #116]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018002:	f003 0301 	and.w	r3, r3, #1
 8018006:	613b      	str	r3, [r7, #16]
 8018008:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801800a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801800e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018010:	2302      	movs	r3, #2
 8018012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018014:	2300      	movs	r3, #0
 8018016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018018:	2303      	movs	r3, #3
 801801a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801801c:	230a      	movs	r3, #10
 801801e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018020:	f107 0314 	add.w	r3, r7, #20
 8018024:	4619      	mov	r1, r3
 8018026:	4814      	ldr	r0, [pc, #80]	; (8018078 <HAL_HCD_MspInit+0xa8>)
 8018028:	f7ef fe24 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801802c:	4b11      	ldr	r3, [pc, #68]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018030:	4a10      	ldr	r2, [pc, #64]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018036:	6353      	str	r3, [r2, #52]	; 0x34
 8018038:	4b0e      	ldr	r3, [pc, #56]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801803c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018040:	60fb      	str	r3, [r7, #12]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	4b0b      	ldr	r3, [pc, #44]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018048:	4a0a      	ldr	r2, [pc, #40]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801804a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801804e:	6453      	str	r3, [r2, #68]	; 0x44
 8018050:	4b08      	ldr	r3, [pc, #32]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018058:	60bb      	str	r3, [r7, #8]
 801805a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801805c:	2200      	movs	r2, #0
 801805e:	2105      	movs	r1, #5
 8018060:	2043      	movs	r0, #67	; 0x43
 8018062:	f7ee fb6d 	bl	8006740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018066:	2043      	movs	r0, #67	; 0x43
 8018068:	f7ee fb86 	bl	8006778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801806c:	bf00      	nop
 801806e:	3728      	adds	r7, #40	; 0x28
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}
 8018074:	40023800 	.word	0x40023800
 8018078:	40020000 	.word	0x40020000

0801807c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801808a:	4618      	mov	r0, r3
 801808c:	f7fc f9bb 	bl	8014406 <USBH_LL_IncTimer>
}
 8018090:	bf00      	nop
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7fc f9ff 	bl	80144aa <USBH_LL_Connect>
}
 80180ac:	bf00      	nop
 80180ae:	3708      	adds	r7, #8
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fc fa14 	bl	80144f0 <USBH_LL_Disconnect>
}
 80180c8:	bf00      	nop
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	460b      	mov	r3, r1
 80180da:	70fb      	strb	r3, [r7, #3]
 80180dc:	4613      	mov	r3, r2
 80180de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7fc fa49 	bl	801457e <USBH_LL_NotifyURBChange>
#endif
}
 80180ec:	bf00      	nop
 80180ee:	3708      	adds	r7, #8
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018102:	4618      	mov	r0, r3
 8018104:	f7fc f9a9 	bl	801445a <USBH_LL_PortEnabled>
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801811e:	4618      	mov	r0, r3
 8018120:	f7fc f9b5 	bl	801448e <USBH_LL_PortDisabled>
}
 8018124:	bf00      	nop
 8018126:	3708      	adds	r7, #8
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801813a:	2b01      	cmp	r3, #1
 801813c:	d12a      	bne.n	8018194 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801813e:	4a18      	ldr	r2, [pc, #96]	; (80181a0 <USBH_LL_Init+0x74>)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	4a15      	ldr	r2, [pc, #84]	; (80181a0 <USBH_LL_Init+0x74>)
 801814a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801814e:	4b14      	ldr	r3, [pc, #80]	; (80181a0 <USBH_LL_Init+0x74>)
 8018150:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018154:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8018156:	4b12      	ldr	r3, [pc, #72]	; (80181a0 <USBH_LL_Init+0x74>)
 8018158:	2208      	movs	r2, #8
 801815a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801815c:	4b10      	ldr	r3, [pc, #64]	; (80181a0 <USBH_LL_Init+0x74>)
 801815e:	2201      	movs	r2, #1
 8018160:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018162:	4b0f      	ldr	r3, [pc, #60]	; (80181a0 <USBH_LL_Init+0x74>)
 8018164:	2200      	movs	r2, #0
 8018166:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8018168:	4b0d      	ldr	r3, [pc, #52]	; (80181a0 <USBH_LL_Init+0x74>)
 801816a:	2202      	movs	r2, #2
 801816c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801816e:	4b0c      	ldr	r3, [pc, #48]	; (80181a0 <USBH_LL_Init+0x74>)
 8018170:	2200      	movs	r2, #0
 8018172:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018174:	480a      	ldr	r0, [pc, #40]	; (80181a0 <USBH_LL_Init+0x74>)
 8018176:	f7f0 f8a4 	bl	80082c2 <HAL_HCD_Init>
 801817a:	4603      	mov	r3, r0
 801817c:	2b00      	cmp	r3, #0
 801817e:	d001      	beq.n	8018184 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018180:	f7ea fd50 	bl	8002c24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018184:	4806      	ldr	r0, [pc, #24]	; (80181a0 <USBH_LL_Init+0x74>)
 8018186:	f7f0 fc81 	bl	8008a8c <HAL_HCD_GetCurrentFrame>
 801818a:	4603      	mov	r3, r0
 801818c:	4619      	mov	r1, r3
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f7fc f92a 	bl	80143e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018194:	2300      	movs	r3, #0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3708      	adds	r7, #8
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	2004aabc 	.word	0x2004aabc

080181a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181ac:	2300      	movs	r3, #0
 80181ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181b0:	2300      	movs	r3, #0
 80181b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7f0 fbf0 	bl	80089a0 <HAL_HCD_Start>
 80181c0:	4603      	mov	r3, r0
 80181c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80181c4:	7bfb      	ldrb	r3, [r7, #15]
 80181c6:	4618      	mov	r0, r3
 80181c8:	f000 f95c 	bl	8018484 <USBH_Get_USB_Status>
 80181cc:	4603      	mov	r3, r0
 80181ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3710      	adds	r7, #16
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80181da:	b580      	push	{r7, lr}
 80181dc:	b084      	sub	sp, #16
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181e2:	2300      	movs	r3, #0
 80181e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181e6:	2300      	movs	r3, #0
 80181e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7f0 fbf8 	bl	80089e6 <HAL_HCD_Stop>
 80181f6:	4603      	mov	r3, r0
 80181f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f000 f941 	bl	8018484 <USBH_Get_USB_Status>
 8018202:	4603      	mov	r3, r0
 8018204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018206:	7bbb      	ldrb	r3, [r7, #14]
}
 8018208:	4618      	mov	r0, r3
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b084      	sub	sp, #16
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018218:	2301      	movs	r3, #1
 801821a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018222:	4618      	mov	r0, r3
 8018224:	f7f0 fc40 	bl	8008aa8 <HAL_HCD_GetCurrentSpeed>
 8018228:	4603      	mov	r3, r0
 801822a:	2b02      	cmp	r3, #2
 801822c:	d00c      	beq.n	8018248 <USBH_LL_GetSpeed+0x38>
 801822e:	2b02      	cmp	r3, #2
 8018230:	d80d      	bhi.n	801824e <USBH_LL_GetSpeed+0x3e>
 8018232:	2b00      	cmp	r3, #0
 8018234:	d002      	beq.n	801823c <USBH_LL_GetSpeed+0x2c>
 8018236:	2b01      	cmp	r3, #1
 8018238:	d003      	beq.n	8018242 <USBH_LL_GetSpeed+0x32>
 801823a:	e008      	b.n	801824e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801823c:	2300      	movs	r3, #0
 801823e:	73fb      	strb	r3, [r7, #15]
    break;
 8018240:	e008      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018242:	2301      	movs	r3, #1
 8018244:	73fb      	strb	r3, [r7, #15]
    break;
 8018246:	e005      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018248:	2302      	movs	r3, #2
 801824a:	73fb      	strb	r3, [r7, #15]
    break;
 801824c:	e002      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801824e:	2301      	movs	r3, #1
 8018250:	73fb      	strb	r3, [r7, #15]
    break;
 8018252:	bf00      	nop
  }
  return  speed;
 8018254:	7bfb      	ldrb	r3, [r7, #15]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3710      	adds	r7, #16
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}

0801825e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801825e:	b580      	push	{r7, lr}
 8018260:	b084      	sub	sp, #16
 8018262:	af00      	add	r7, sp, #0
 8018264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018266:	2300      	movs	r3, #0
 8018268:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801826a:	2300      	movs	r3, #0
 801826c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018274:	4618      	mov	r0, r3
 8018276:	f7f0 fbd3 	bl	8008a20 <HAL_HCD_ResetPort>
 801827a:	4603      	mov	r3, r0
 801827c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801827e:	7bfb      	ldrb	r3, [r7, #15]
 8018280:	4618      	mov	r0, r3
 8018282:	f000 f8ff 	bl	8018484 <USBH_Get_USB_Status>
 8018286:	4603      	mov	r3, r0
 8018288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801828a:	7bbb      	ldrb	r3, [r7, #14]
}
 801828c:	4618      	mov	r0, r3
 801828e:	3710      	adds	r7, #16
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	460b      	mov	r3, r1
 801829e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80182a6:	78fa      	ldrb	r2, [r7, #3]
 80182a8:	4611      	mov	r1, r2
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7f0 fbda 	bl	8008a64 <HAL_HCD_HC_GetXferCount>
 80182b0:	4603      	mov	r3, r0
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80182ba:	b590      	push	{r4, r7, lr}
 80182bc:	b089      	sub	sp, #36	; 0x24
 80182be:	af04      	add	r7, sp, #16
 80182c0:	6078      	str	r0, [r7, #4]
 80182c2:	4608      	mov	r0, r1
 80182c4:	4611      	mov	r1, r2
 80182c6:	461a      	mov	r2, r3
 80182c8:	4603      	mov	r3, r0
 80182ca:	70fb      	strb	r3, [r7, #3]
 80182cc:	460b      	mov	r3, r1
 80182ce:	70bb      	strb	r3, [r7, #2]
 80182d0:	4613      	mov	r3, r2
 80182d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182d4:	2300      	movs	r3, #0
 80182d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182d8:	2300      	movs	r3, #0
 80182da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80182e2:	787c      	ldrb	r4, [r7, #1]
 80182e4:	78ba      	ldrb	r2, [r7, #2]
 80182e6:	78f9      	ldrb	r1, [r7, #3]
 80182e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80182ea:	9302      	str	r3, [sp, #8]
 80182ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80182f0:	9301      	str	r3, [sp, #4]
 80182f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80182f6:	9300      	str	r3, [sp, #0]
 80182f8:	4623      	mov	r3, r4
 80182fa:	f7f0 f844 	bl	8008386 <HAL_HCD_HC_Init>
 80182fe:	4603      	mov	r3, r0
 8018300:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	4618      	mov	r0, r3
 8018306:	f000 f8bd 	bl	8018484 <USBH_Get_USB_Status>
 801830a:	4603      	mov	r3, r0
 801830c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018310:	4618      	mov	r0, r3
 8018312:	3714      	adds	r7, #20
 8018314:	46bd      	mov	sp, r7
 8018316:	bd90      	pop	{r4, r7, pc}

08018318 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b084      	sub	sp, #16
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	460b      	mov	r3, r1
 8018322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018324:	2300      	movs	r3, #0
 8018326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018328:	2300      	movs	r3, #0
 801832a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018332:	78fa      	ldrb	r2, [r7, #3]
 8018334:	4611      	mov	r1, r2
 8018336:	4618      	mov	r0, r3
 8018338:	f7f0 f8b4 	bl	80084a4 <HAL_HCD_HC_Halt>
 801833c:	4603      	mov	r3, r0
 801833e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018340:	7bfb      	ldrb	r3, [r7, #15]
 8018342:	4618      	mov	r0, r3
 8018344:	f000 f89e 	bl	8018484 <USBH_Get_USB_Status>
 8018348:	4603      	mov	r3, r0
 801834a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801834c:	7bbb      	ldrb	r3, [r7, #14]
}
 801834e:	4618      	mov	r0, r3
 8018350:	3710      	adds	r7, #16
 8018352:	46bd      	mov	sp, r7
 8018354:	bd80      	pop	{r7, pc}

08018356 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018356:	b590      	push	{r4, r7, lr}
 8018358:	b089      	sub	sp, #36	; 0x24
 801835a:	af04      	add	r7, sp, #16
 801835c:	6078      	str	r0, [r7, #4]
 801835e:	4608      	mov	r0, r1
 8018360:	4611      	mov	r1, r2
 8018362:	461a      	mov	r2, r3
 8018364:	4603      	mov	r3, r0
 8018366:	70fb      	strb	r3, [r7, #3]
 8018368:	460b      	mov	r3, r1
 801836a:	70bb      	strb	r3, [r7, #2]
 801836c:	4613      	mov	r3, r2
 801836e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018370:	2300      	movs	r3, #0
 8018372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018374:	2300      	movs	r3, #0
 8018376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801837e:	787c      	ldrb	r4, [r7, #1]
 8018380:	78ba      	ldrb	r2, [r7, #2]
 8018382:	78f9      	ldrb	r1, [r7, #3]
 8018384:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018388:	9303      	str	r3, [sp, #12]
 801838a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801838c:	9302      	str	r3, [sp, #8]
 801838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	4623      	mov	r3, r4
 801839a:	f7f0 f8a7 	bl	80084ec <HAL_HCD_HC_SubmitRequest>
 801839e:	4603      	mov	r3, r0
 80183a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80183a2:	7bfb      	ldrb	r3, [r7, #15]
 80183a4:	4618      	mov	r0, r3
 80183a6:	f000 f86d 	bl	8018484 <USBH_Get_USB_Status>
 80183aa:	4603      	mov	r3, r0
 80183ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3714      	adds	r7, #20
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd90      	pop	{r4, r7, pc}

080183b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80183ca:	78fa      	ldrb	r2, [r7, #3]
 80183cc:	4611      	mov	r1, r2
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7f0 fb34 	bl	8008a3c <HAL_HCD_HC_GetURBState>
 80183d4:	4603      	mov	r3, r0
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	3708      	adds	r7, #8
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}

080183de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80183de:	b580      	push	{r7, lr}
 80183e0:	b082      	sub	sp, #8
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
 80183e6:	460b      	mov	r3, r1
 80183e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80183f0:	2b01      	cmp	r3, #1
 80183f2:	d103      	bne.n	80183fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80183f4:	78fb      	ldrb	r3, [r7, #3]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f000 f870 	bl	80184dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80183fc:	20c8      	movs	r0, #200	; 0xc8
 80183fe:	f7ed fe17 	bl	8006030 <HAL_Delay>
  return USBH_OK;
 8018402:	2300      	movs	r3, #0
}
 8018404:	4618      	mov	r0, r3
 8018406:	3708      	adds	r7, #8
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}

0801840c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801840c:	b480      	push	{r7}
 801840e:	b085      	sub	sp, #20
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	70fb      	strb	r3, [r7, #3]
 8018418:	4613      	mov	r3, r2
 801841a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018422:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018424:	78fb      	ldrb	r3, [r7, #3]
 8018426:	68fa      	ldr	r2, [r7, #12]
 8018428:	212c      	movs	r1, #44	; 0x2c
 801842a:	fb01 f303 	mul.w	r3, r1, r3
 801842e:	4413      	add	r3, r2
 8018430:	333b      	adds	r3, #59	; 0x3b
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d009      	beq.n	801844c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018438:	78fb      	ldrb	r3, [r7, #3]
 801843a:	68fa      	ldr	r2, [r7, #12]
 801843c:	212c      	movs	r1, #44	; 0x2c
 801843e:	fb01 f303 	mul.w	r3, r1, r3
 8018442:	4413      	add	r3, r2
 8018444:	3354      	adds	r3, #84	; 0x54
 8018446:	78ba      	ldrb	r2, [r7, #2]
 8018448:	701a      	strb	r2, [r3, #0]
 801844a:	e008      	b.n	801845e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801844c:	78fb      	ldrb	r3, [r7, #3]
 801844e:	68fa      	ldr	r2, [r7, #12]
 8018450:	212c      	movs	r1, #44	; 0x2c
 8018452:	fb01 f303 	mul.w	r3, r1, r3
 8018456:	4413      	add	r3, r2
 8018458:	3355      	adds	r3, #85	; 0x55
 801845a:	78ba      	ldrb	r2, [r7, #2]
 801845c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801845e:	2300      	movs	r3, #0
}
 8018460:	4618      	mov	r0, r3
 8018462:	3714      	adds	r7, #20
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr

0801846c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f7ed fddb 	bl	8006030 <HAL_Delay>
}
 801847a:	bf00      	nop
 801847c:	3708      	adds	r7, #8
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
	...

08018484 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018484:	b480      	push	{r7}
 8018486:	b085      	sub	sp, #20
 8018488:	af00      	add	r7, sp, #0
 801848a:	4603      	mov	r3, r0
 801848c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801848e:	2300      	movs	r3, #0
 8018490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018492:	79fb      	ldrb	r3, [r7, #7]
 8018494:	2b03      	cmp	r3, #3
 8018496:	d817      	bhi.n	80184c8 <USBH_Get_USB_Status+0x44>
 8018498:	a201      	add	r2, pc, #4	; (adr r2, 80184a0 <USBH_Get_USB_Status+0x1c>)
 801849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801849e:	bf00      	nop
 80184a0:	080184b1 	.word	0x080184b1
 80184a4:	080184b7 	.word	0x080184b7
 80184a8:	080184bd 	.word	0x080184bd
 80184ac:	080184c3 	.word	0x080184c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80184b0:	2300      	movs	r3, #0
 80184b2:	73fb      	strb	r3, [r7, #15]
    break;
 80184b4:	e00b      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80184b6:	2302      	movs	r3, #2
 80184b8:	73fb      	strb	r3, [r7, #15]
    break;
 80184ba:	e008      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80184bc:	2301      	movs	r3, #1
 80184be:	73fb      	strb	r3, [r7, #15]
    break;
 80184c0:	e005      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80184c2:	2302      	movs	r3, #2
 80184c4:	73fb      	strb	r3, [r7, #15]
    break;
 80184c6:	e002      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80184c8:	2302      	movs	r3, #2
 80184ca:	73fb      	strb	r3, [r7, #15]
    break;
 80184cc:	bf00      	nop
  }
  return usb_status;
 80184ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	3714      	adds	r7, #20
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b084      	sub	sp, #16
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	4603      	mov	r3, r0
 80184e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80184e6:	79fb      	ldrb	r3, [r7, #7]
 80184e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80184ea:	79fb      	ldrb	r3, [r7, #7]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d102      	bne.n	80184f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80184f0:	2301      	movs	r3, #1
 80184f2:	73fb      	strb	r3, [r7, #15]
 80184f4:	e001      	b.n	80184fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80184f6:	2300      	movs	r3, #0
 80184f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80184fa:	7bfb      	ldrb	r3, [r7, #15]
 80184fc:	461a      	mov	r2, r3
 80184fe:	2120      	movs	r1, #32
 8018500:	4803      	ldr	r0, [pc, #12]	; (8018510 <MX_DriverVbusFS+0x34>)
 8018502:	f7ef fe87 	bl	8008214 <HAL_GPIO_WritePin>
}
 8018506:	bf00      	nop
 8018508:	3710      	adds	r7, #16
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	40020c00 	.word	0x40020c00

08018514 <arm_rfft_fast_init_f32>:
 8018514:	084b      	lsrs	r3, r1, #1
 8018516:	2b80      	cmp	r3, #128	; 0x80
 8018518:	b430      	push	{r4, r5}
 801851a:	8201      	strh	r1, [r0, #16]
 801851c:	8003      	strh	r3, [r0, #0]
 801851e:	d070      	beq.n	8018602 <arm_rfft_fast_init_f32+0xee>
 8018520:	d916      	bls.n	8018550 <arm_rfft_fast_init_f32+0x3c>
 8018522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018526:	d05f      	beq.n	80185e8 <arm_rfft_fast_init_f32+0xd4>
 8018528:	d936      	bls.n	8018598 <arm_rfft_fast_init_f32+0x84>
 801852a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801852e:	d026      	beq.n	801857e <arm_rfft_fast_init_f32+0x6a>
 8018530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018534:	d112      	bne.n	801855c <arm_rfft_fast_init_f32+0x48>
 8018536:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801853a:	4c38      	ldr	r4, [pc, #224]	; (801861c <arm_rfft_fast_init_f32+0x108>)
 801853c:	4938      	ldr	r1, [pc, #224]	; (8018620 <arm_rfft_fast_init_f32+0x10c>)
 801853e:	2300      	movs	r3, #0
 8018540:	4a38      	ldr	r2, [pc, #224]	; (8018624 <arm_rfft_fast_init_f32+0x110>)
 8018542:	8185      	strh	r5, [r0, #12]
 8018544:	6084      	str	r4, [r0, #8]
 8018546:	6041      	str	r1, [r0, #4]
 8018548:	6142      	str	r2, [r0, #20]
 801854a:	4618      	mov	r0, r3
 801854c:	bc30      	pop	{r4, r5}
 801854e:	4770      	bx	lr
 8018550:	2b20      	cmp	r3, #32
 8018552:	d031      	beq.n	80185b8 <arm_rfft_fast_init_f32+0xa4>
 8018554:	2b40      	cmp	r3, #64	; 0x40
 8018556:	d006      	beq.n	8018566 <arm_rfft_fast_init_f32+0x52>
 8018558:	2b10      	cmp	r3, #16
 801855a:	d039      	beq.n	80185d0 <arm_rfft_fast_init_f32+0xbc>
 801855c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018560:	bc30      	pop	{r4, r5}
 8018562:	4618      	mov	r0, r3
 8018564:	4770      	bx	lr
 8018566:	2538      	movs	r5, #56	; 0x38
 8018568:	4c2f      	ldr	r4, [pc, #188]	; (8018628 <arm_rfft_fast_init_f32+0x114>)
 801856a:	4930      	ldr	r1, [pc, #192]	; (801862c <arm_rfft_fast_init_f32+0x118>)
 801856c:	2300      	movs	r3, #0
 801856e:	4a30      	ldr	r2, [pc, #192]	; (8018630 <arm_rfft_fast_init_f32+0x11c>)
 8018570:	8185      	strh	r5, [r0, #12]
 8018572:	6084      	str	r4, [r0, #8]
 8018574:	6041      	str	r1, [r0, #4]
 8018576:	6142      	str	r2, [r0, #20]
 8018578:	4618      	mov	r0, r3
 801857a:	bc30      	pop	{r4, r5}
 801857c:	4770      	bx	lr
 801857e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8018582:	4c2c      	ldr	r4, [pc, #176]	; (8018634 <arm_rfft_fast_init_f32+0x120>)
 8018584:	492c      	ldr	r1, [pc, #176]	; (8018638 <arm_rfft_fast_init_f32+0x124>)
 8018586:	2300      	movs	r3, #0
 8018588:	4a2c      	ldr	r2, [pc, #176]	; (801863c <arm_rfft_fast_init_f32+0x128>)
 801858a:	8185      	strh	r5, [r0, #12]
 801858c:	6084      	str	r4, [r0, #8]
 801858e:	6041      	str	r1, [r0, #4]
 8018590:	6142      	str	r2, [r0, #20]
 8018592:	4618      	mov	r0, r3
 8018594:	bc30      	pop	{r4, r5}
 8018596:	4770      	bx	lr
 8018598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801859c:	d1de      	bne.n	801855c <arm_rfft_fast_init_f32+0x48>
 801859e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80185a2:	4c27      	ldr	r4, [pc, #156]	; (8018640 <arm_rfft_fast_init_f32+0x12c>)
 80185a4:	4927      	ldr	r1, [pc, #156]	; (8018644 <arm_rfft_fast_init_f32+0x130>)
 80185a6:	2300      	movs	r3, #0
 80185a8:	4a27      	ldr	r2, [pc, #156]	; (8018648 <arm_rfft_fast_init_f32+0x134>)
 80185aa:	8185      	strh	r5, [r0, #12]
 80185ac:	6084      	str	r4, [r0, #8]
 80185ae:	6041      	str	r1, [r0, #4]
 80185b0:	6142      	str	r2, [r0, #20]
 80185b2:	4618      	mov	r0, r3
 80185b4:	bc30      	pop	{r4, r5}
 80185b6:	4770      	bx	lr
 80185b8:	2530      	movs	r5, #48	; 0x30
 80185ba:	4c24      	ldr	r4, [pc, #144]	; (801864c <arm_rfft_fast_init_f32+0x138>)
 80185bc:	4924      	ldr	r1, [pc, #144]	; (8018650 <arm_rfft_fast_init_f32+0x13c>)
 80185be:	2300      	movs	r3, #0
 80185c0:	4a24      	ldr	r2, [pc, #144]	; (8018654 <arm_rfft_fast_init_f32+0x140>)
 80185c2:	8185      	strh	r5, [r0, #12]
 80185c4:	6084      	str	r4, [r0, #8]
 80185c6:	6041      	str	r1, [r0, #4]
 80185c8:	6142      	str	r2, [r0, #20]
 80185ca:	4618      	mov	r0, r3
 80185cc:	bc30      	pop	{r4, r5}
 80185ce:	4770      	bx	lr
 80185d0:	2514      	movs	r5, #20
 80185d2:	4c21      	ldr	r4, [pc, #132]	; (8018658 <arm_rfft_fast_init_f32+0x144>)
 80185d4:	4921      	ldr	r1, [pc, #132]	; (801865c <arm_rfft_fast_init_f32+0x148>)
 80185d6:	2300      	movs	r3, #0
 80185d8:	4a21      	ldr	r2, [pc, #132]	; (8018660 <arm_rfft_fast_init_f32+0x14c>)
 80185da:	8185      	strh	r5, [r0, #12]
 80185dc:	6084      	str	r4, [r0, #8]
 80185de:	6041      	str	r1, [r0, #4]
 80185e0:	6142      	str	r2, [r0, #20]
 80185e2:	4618      	mov	r0, r3
 80185e4:	bc30      	pop	{r4, r5}
 80185e6:	4770      	bx	lr
 80185e8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80185ec:	4c1d      	ldr	r4, [pc, #116]	; (8018664 <arm_rfft_fast_init_f32+0x150>)
 80185ee:	491e      	ldr	r1, [pc, #120]	; (8018668 <arm_rfft_fast_init_f32+0x154>)
 80185f0:	2300      	movs	r3, #0
 80185f2:	4a1e      	ldr	r2, [pc, #120]	; (801866c <arm_rfft_fast_init_f32+0x158>)
 80185f4:	8185      	strh	r5, [r0, #12]
 80185f6:	6084      	str	r4, [r0, #8]
 80185f8:	6041      	str	r1, [r0, #4]
 80185fa:	6142      	str	r2, [r0, #20]
 80185fc:	4618      	mov	r0, r3
 80185fe:	bc30      	pop	{r4, r5}
 8018600:	4770      	bx	lr
 8018602:	25d0      	movs	r5, #208	; 0xd0
 8018604:	4c1a      	ldr	r4, [pc, #104]	; (8018670 <arm_rfft_fast_init_f32+0x15c>)
 8018606:	491b      	ldr	r1, [pc, #108]	; (8018674 <arm_rfft_fast_init_f32+0x160>)
 8018608:	2300      	movs	r3, #0
 801860a:	4a1b      	ldr	r2, [pc, #108]	; (8018678 <arm_rfft_fast_init_f32+0x164>)
 801860c:	8185      	strh	r5, [r0, #12]
 801860e:	6084      	str	r4, [r0, #8]
 8018610:	6041      	str	r1, [r0, #4]
 8018612:	6142      	str	r2, [r0, #20]
 8018614:	4618      	mov	r0, r3
 8018616:	bc30      	pop	{r4, r5}
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	0802c00c 	.word	0x0802c00c
 8018620:	0801d204 	.word	0x0801d204
 8018624:	08023374 	.word	0x08023374
 8018628:	08021304 	.word	0x08021304
 801862c:	0802ddcc 	.word	0x0802ddcc
 8018630:	080302bc 	.word	0x080302bc
 8018634:	08029cf4 	.word	0x08029cf4
 8018638:	08027bf4 	.word	0x08027bf4
 801863c:	08021374 	.word	0x08021374
 8018640:	0802ff4c 	.word	0x0802ff4c
 8018644:	08027374 	.word	0x08027374
 8018648:	0802dfcc 	.word	0x0802dfcc
 801864c:	0802abac 	.word	0x0802abac
 8018650:	08029bf4 	.word	0x08029bf4
 8018654:	08021204 	.word	0x08021204
 8018658:	0802ab04 	.word	0x0802ab04
 801865c:	08027b74 	.word	0x08027b74
 8018660:	0802ab2c 	.word	0x0802ab2c
 8018664:	0802e7cc 	.word	0x0802e7cc
 8018668:	0802b00c 	.word	0x0802b00c
 801866c:	0802eb4c 	.word	0x0802eb4c
 8018670:	080304bc 	.word	0x080304bc
 8018674:	0802ac0c 	.word	0x0802ac0c
 8018678:	0802fb4c 	.word	0x0802fb4c

0801867c <arm_rfft_fast_f32>:
 801867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018680:	8a05      	ldrh	r5, [r0, #16]
 8018682:	4606      	mov	r6, r0
 8018684:	4617      	mov	r7, r2
 8018686:	460c      	mov	r4, r1
 8018688:	086d      	lsrs	r5, r5, #1
 801868a:	8005      	strh	r5, [r0, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d15e      	bne.n	801874e <arm_rfft_fast_f32+0xd2>
 8018690:	461a      	mov	r2, r3
 8018692:	2301      	movs	r3, #1
 8018694:	f000 fbde 	bl	8018e54 <arm_cfft_f32>
 8018698:	edd4 7a00 	vldr	s15, [r4]
 801869c:	ed94 7a01 	vldr	s14, [r4, #4]
 80186a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80186a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80186a8:	8832      	ldrh	r2, [r6, #0]
 80186aa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80186ae:	6975      	ldr	r5, [r6, #20]
 80186b0:	3a01      	subs	r2, #1
 80186b2:	eeb0 3a46 	vmov.f32	s6, s12
 80186b6:	3510      	adds	r5, #16
 80186b8:	f107 0610 	add.w	r6, r7, #16
 80186bc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80186c0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80186c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80186c8:	f104 0310 	add.w	r3, r4, #16
 80186cc:	3808      	subs	r0, #8
 80186ce:	ee26 7a86 	vmul.f32	s14, s13, s12
 80186d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80186d6:	ed87 7a00 	vstr	s14, [r7]
 80186da:	edc7 7a01 	vstr	s15, [r7, #4]
 80186de:	ed90 7a02 	vldr	s14, [r0, #8]
 80186e2:	3a01      	subs	r2, #1
 80186e4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80186e8:	f1a0 0008 	sub.w	r0, r0, #8
 80186ec:	ed15 6a02 	vldr	s12, [r5, #-8]
 80186f0:	f103 0308 	add.w	r3, r3, #8
 80186f4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80186f8:	edd0 3a05 	vldr	s7, [r0, #20]
 80186fc:	ed13 5a03 	vldr	s10, [r3, #-12]
 8018700:	ee77 4a26 	vadd.f32	s9, s14, s13
 8018704:	ed55 5a01 	vldr	s11, [r5, #-4]
 8018708:	f106 0608 	add.w	r6, r6, #8
 801870c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8018710:	f105 0508 	add.w	r5, r5, #8
 8018714:	ee33 4a85 	vadd.f32	s8, s7, s10
 8018718:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801871c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8018720:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018724:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018728:	ee77 7a05 	vadd.f32	s15, s14, s10
 801872c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018730:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018734:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8018738:	ee67 7a83 	vmul.f32	s15, s15, s6
 801873c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018740:	ed46 7a03 	vstr	s15, [r6, #-12]
 8018744:	ed06 7a04 	vstr	s14, [r6, #-16]
 8018748:	d1c9      	bne.n	80186de <arm_rfft_fast_f32+0x62>
 801874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801874e:	edd1 7a00 	vldr	s15, [r1]
 8018752:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8018756:	edd1 6a01 	vldr	s13, [r1, #4]
 801875a:	1e68      	subs	r0, r5, #1
 801875c:	6975      	ldr	r5, [r6, #20]
 801875e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018762:	00c1      	lsls	r1, r0, #3
 8018764:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018768:	ee27 7a23 	vmul.f32	s14, s14, s7
 801876c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018770:	ed82 7a00 	vstr	s14, [r2]
 8018774:	edc2 7a01 	vstr	s15, [r2, #4]
 8018778:	b3e0      	cbz	r0, 80187f4 <arm_rfft_fast_f32+0x178>
 801877a:	3908      	subs	r1, #8
 801877c:	f104 0210 	add.w	r2, r4, #16
 8018780:	3510      	adds	r5, #16
 8018782:	440c      	add	r4, r1
 8018784:	f107 0110 	add.w	r1, r7, #16
 8018788:	ed94 7a02 	vldr	s14, [r4, #8]
 801878c:	3801      	subs	r0, #1
 801878e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8018792:	f1a4 0408 	sub.w	r4, r4, #8
 8018796:	ed15 6a02 	vldr	s12, [r5, #-8]
 801879a:	f102 0208 	add.w	r2, r2, #8
 801879e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80187a2:	ed94 4a05 	vldr	s8, [r4, #20]
 80187a6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80187aa:	ee77 6a26 	vadd.f32	s13, s14, s13
 80187ae:	ed55 5a01 	vldr	s11, [r5, #-4]
 80187b2:	f101 0108 	add.w	r1, r1, #8
 80187b6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80187ba:	f105 0508 	add.w	r5, r5, #8
 80187be:	ee74 4a05 	vadd.f32	s9, s8, s10
 80187c2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80187c6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80187ca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80187ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 80187d2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80187d6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80187da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80187de:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80187e2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80187e6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80187ea:	ed41 7a03 	vstr	s15, [r1, #-12]
 80187ee:	ed01 7a04 	vstr	s14, [r1, #-16]
 80187f2:	d1c9      	bne.n	8018788 <arm_rfft_fast_f32+0x10c>
 80187f4:	461a      	mov	r2, r3
 80187f6:	4639      	mov	r1, r7
 80187f8:	4630      	mov	r0, r6
 80187fa:	2301      	movs	r3, #1
 80187fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018800:	f000 bb28 	b.w	8018e54 <arm_cfft_f32>

08018804 <arm_cfft_radix8by2_f32>:
 8018804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018808:	4607      	mov	r7, r0
 801880a:	4608      	mov	r0, r1
 801880c:	ed2d 8b06 	vpush	{d8-d10}
 8018810:	f8b7 e000 	ldrh.w	lr, [r7]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801881a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801881e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8018822:	f000 80b0 	beq.w	8018986 <arm_cfft_radix8by2_f32+0x182>
 8018826:	008b      	lsls	r3, r1, #2
 8018828:	3210      	adds	r2, #16
 801882a:	f100 0610 	add.w	r6, r0, #16
 801882e:	f108 0510 	add.w	r5, r8, #16
 8018832:	3310      	adds	r3, #16
 8018834:	18c4      	adds	r4, r0, r3
 8018836:	4443      	add	r3, r8
 8018838:	ed55 6a04 	vldr	s13, [r5, #-16]
 801883c:	f1be 0e01 	subs.w	lr, lr, #1
 8018840:	ed56 4a04 	vldr	s9, [r6, #-16]
 8018844:	f104 0410 	add.w	r4, r4, #16
 8018848:	ed15 7a03 	vldr	s14, [r5, #-12]
 801884c:	f106 0610 	add.w	r6, r6, #16
 8018850:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8018854:	ed55 7a02 	vldr	s15, [r5, #-8]
 8018858:	ed55 2a01 	vldr	s5, [r5, #-4]
 801885c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8018860:	ed53 0a04 	vldr	s1, [r3, #-16]
 8018864:	f102 0210 	add.w	r2, r2, #16
 8018868:	ed13 5a03 	vldr	s10, [r3, #-12]
 801886c:	f105 0510 	add.w	r5, r5, #16
 8018870:	ed13 3a02 	vldr	s6, [r3, #-8]
 8018874:	f103 0310 	add.w	r3, r3, #16
 8018878:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801887c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8018880:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8018884:	ee33 8a83 	vadd.f32	s16, s7, s6
 8018888:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801888c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8018890:	ee34 0a06 	vadd.f32	s0, s8, s12
 8018894:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8018898:	ee76 aa87 	vadd.f32	s21, s13, s14
 801889c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80188a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80188a4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80188a8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80188ac:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80188b0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80188b4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80188b8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80188bc:	ee72 9a22 	vadd.f32	s19, s4, s5
 80188c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80188c4:	ee35 5a41 	vsub.f32	s10, s10, s2
 80188c8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 80188cc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 80188d0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80188d4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80188d8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80188dc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80188e0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80188e4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80188e8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80188ec:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80188f0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80188f4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80188f8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80188fc:	ee27 2a26 	vmul.f32	s4, s14, s13
 8018900:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8018904:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8018908:	ee27 7a04 	vmul.f32	s14, s14, s8
 801890c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018910:	ee65 6a26 	vmul.f32	s13, s10, s13
 8018914:	ee25 5a04 	vmul.f32	s10, s10, s8
 8018918:	ee37 7a64 	vsub.f32	s14, s14, s9
 801891c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018920:	ee33 4a02 	vadd.f32	s8, s6, s4
 8018924:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8018928:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801892c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8018930:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8018934:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8018938:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801893c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8018940:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8018944:	ee27 4a87 	vmul.f32	s8, s15, s14
 8018948:	ee61 5a87 	vmul.f32	s11, s3, s14
 801894c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018950:	ee22 5a87 	vmul.f32	s10, s5, s14
 8018954:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018958:	ee26 6a26 	vmul.f32	s12, s12, s13
 801895c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8018960:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018964:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018968:	ee35 6a46 	vsub.f32	s12, s10, s12
 801896c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018970:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8018974:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8018978:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801897c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8018980:	f47f af5a 	bne.w	8018838 <arm_cfft_radix8by2_f32+0x34>
 8018984:	687a      	ldr	r2, [r7, #4]
 8018986:	b28c      	uxth	r4, r1
 8018988:	2302      	movs	r3, #2
 801898a:	4621      	mov	r1, r4
 801898c:	f000 fbc2 	bl	8019114 <arm_radix8_butterfly_f32>
 8018990:	4621      	mov	r1, r4
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	4640      	mov	r0, r8
 8018996:	2302      	movs	r3, #2
 8018998:	ecbd 8b06 	vpop	{d8-d10}
 801899c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189a0:	f000 bbb8 	b.w	8019114 <arm_radix8_butterfly_f32>

080189a4 <arm_cfft_radix8by4_f32>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	ed2d 8b06 	vpush	{d8-d10}
 80189ac:	8804      	ldrh	r4, [r0, #0]
 80189ae:	b08f      	sub	sp, #60	; 0x3c
 80189b0:	ed91 6a00 	vldr	s12, [r1]
 80189b4:	460a      	mov	r2, r1
 80189b6:	0864      	lsrs	r4, r4, #1
 80189b8:	ed91 7a01 	vldr	s14, [r1, #4]
 80189bc:	9101      	str	r1, [sp, #4]
 80189be:	00a3      	lsls	r3, r4, #2
 80189c0:	6841      	ldr	r1, [r0, #4]
 80189c2:	0864      	lsrs	r4, r4, #1
 80189c4:	900c      	str	r0, [sp, #48]	; 0x30
 80189c6:	9205      	str	r2, [sp, #20]
 80189c8:	f101 0610 	add.w	r6, r1, #16
 80189cc:	4625      	mov	r5, r4
 80189ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80189d0:	f101 0408 	add.w	r4, r1, #8
 80189d4:	9602      	str	r6, [sp, #8]
 80189d6:	9407      	str	r4, [sp, #28]
 80189d8:	18d4      	adds	r4, r2, r3
 80189da:	1eaa      	subs	r2, r5, #2
 80189dc:	f101 0518 	add.w	r5, r1, #24
 80189e0:	18e0      	adds	r0, r4, r3
 80189e2:	edd4 4a00 	vldr	s9, [r4]
 80189e6:	ed94 4a01 	vldr	s8, [r4, #4]
 80189ea:	46a6      	mov	lr, r4
 80189ec:	edd0 6a00 	vldr	s13, [r0]
 80189f0:	18c7      	adds	r7, r0, r3
 80189f2:	edd0 7a01 	vldr	s15, [r0, #4]
 80189f6:	46a0      	mov	r8, r4
 80189f8:	ee76 5a26 	vadd.f32	s11, s12, s13
 80189fc:	ed97 5a00 	vldr	s10, [r7]
 8018a00:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018a04:	4604      	mov	r4, r0
 8018a06:	9506      	str	r5, [sp, #24]
 8018a08:	4605      	mov	r5, r0
 8018a0a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8018a0e:	900a      	str	r0, [sp, #40]	; 0x28
 8018a10:	9801      	ldr	r0, [sp, #4]
 8018a12:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a1a:	ed97 3a01 	vldr	s6, [r7, #4]
 8018a1e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8018a22:	46bc      	mov	ip, r7
 8018a24:	ee76 3a84 	vadd.f32	s7, s13, s8
 8018a28:	9704      	str	r7, [sp, #16]
 8018a2a:	ee36 7a44 	vsub.f32	s14, s12, s8
 8018a2e:	f8cd e00c 	str.w	lr, [sp, #12]
 8018a32:	ee12 9a90 	vmov	r9, s5
 8018a36:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8018a3a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8018a3e:	1f3e      	subs	r6, r7, #4
 8018a40:	f840 9b08 	str.w	r9, [r0], #8
 8018a44:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8018a48:	edde 2a01 	vldr	s5, [lr, #4]
 8018a4c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8018a50:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018a54:	eddc 4a01 	vldr	s9, [ip, #4]
 8018a58:	ee36 6a22 	vadd.f32	s12, s12, s5
 8018a5c:	9001      	str	r0, [sp, #4]
 8018a5e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018a62:	9805      	ldr	r0, [sp, #20]
 8018a64:	ee13 9a90 	vmov	r9, s7
 8018a68:	ee37 7a43 	vsub.f32	s14, s14, s6
 8018a6c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8018a70:	f1ae 0704 	sub.w	r7, lr, #4
 8018a74:	ee74 4a05 	vadd.f32	s9, s8, s10
 8018a78:	ee76 6a83 	vadd.f32	s13, s13, s6
 8018a7c:	ed80 6a01 	vstr	s12, [r0, #4]
 8018a80:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018a84:	f848 9b08 	str.w	r9, [r8], #8
 8018a88:	edce 4a01 	vstr	s9, [lr, #4]
 8018a8c:	ee15 ea90 	vmov	lr, s11
 8018a90:	f844 eb08 	str.w	lr, [r4], #8
 8018a94:	ee16 ea90 	vmov	lr, s13
 8018a98:	9408      	str	r4, [sp, #32]
 8018a9a:	462c      	mov	r4, r5
 8018a9c:	ed85 7a01 	vstr	s14, [r5, #4]
 8018aa0:	9d04      	ldr	r5, [sp, #16]
 8018aa2:	f84c eb08 	str.w	lr, [ip], #8
 8018aa6:	edc5 7a01 	vstr	s15, [r5, #4]
 8018aaa:	0855      	lsrs	r5, r2, #1
 8018aac:	9509      	str	r5, [sp, #36]	; 0x24
 8018aae:	f000 8130 	beq.w	8018d12 <arm_cfft_radix8by4_f32+0x36e>
 8018ab2:	9805      	ldr	r0, [sp, #20]
 8018ab4:	3b08      	subs	r3, #8
 8018ab6:	46ab      	mov	fp, r5
 8018ab8:	f1a4 020c 	sub.w	r2, r4, #12
 8018abc:	f100 0510 	add.w	r5, r0, #16
 8018ac0:	f101 0920 	add.w	r9, r1, #32
 8018ac4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8018ac8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8018acc:	4433      	add	r3, r6
 8018ace:	3410      	adds	r4, #16
 8018ad0:	4660      	mov	r0, ip
 8018ad2:	4641      	mov	r1, r8
 8018ad4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8018ad8:	ed54 6a02 	vldr	s13, [r4, #-8]
 8018adc:	f1bb 0b01 	subs.w	fp, fp, #1
 8018ae0:	ed55 5a02 	vldr	s11, [r5, #-8]
 8018ae4:	f10a 0a08 	add.w	sl, sl, #8
 8018ae8:	edd1 7a00 	vldr	s15, [r1]
 8018aec:	f105 0508 	add.w	r5, r5, #8
 8018af0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8018af4:	edd0 2a00 	vldr	s5, [r0]
 8018af8:	ed14 7a01 	vldr	s14, [r4, #-4]
 8018afc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8018b00:	ed55 6a03 	vldr	s13, [r5, #-12]
 8018b04:	f1a2 0208 	sub.w	r2, r2, #8
 8018b08:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8018b0c:	ed90 2a01 	vldr	s4, [r0, #4]
 8018b10:	ee36 5a87 	vadd.f32	s10, s13, s14
 8018b14:	ed91 6a01 	vldr	s12, [r1, #4]
 8018b18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018b1c:	f109 0910 	add.w	r9, r9, #16
 8018b20:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8018b24:	f104 0408 	add.w	r4, r4, #8
 8018b28:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8018b2c:	f10e 0e18 	add.w	lr, lr, #24
 8018b30:	ee37 3a67 	vsub.f32	s6, s14, s15
 8018b34:	f1a3 0308 	sub.w	r3, r3, #8
 8018b38:	ed45 6a04 	vstr	s13, [r5, #-16]
 8018b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b40:	edd1 6a01 	vldr	s13, [r1, #4]
 8018b44:	ee75 1a86 	vadd.f32	s3, s11, s12
 8018b48:	edd0 4a01 	vldr	s9, [r0, #4]
 8018b4c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8018b50:	ee75 6a26 	vadd.f32	s13, s10, s13
 8018b54:	ee35 5a46 	vsub.f32	s10, s10, s12
 8018b58:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8018b5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018b60:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8018b64:	ee35 5a42 	vsub.f32	s10, s10, s4
 8018b68:	ed45 6a03 	vstr	s13, [r5, #-12]
 8018b6c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8018b70:	edd6 7a00 	vldr	s15, [r6]
 8018b74:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8018b78:	ed97 1a00 	vldr	s2, [r7]
 8018b7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b80:	ed92 8a04 	vldr	s16, [r2, #16]
 8018b84:	ee71 8a27 	vadd.f32	s17, s2, s15
 8018b88:	ed93 aa04 	vldr	s20, [r3, #16]
 8018b8c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8018b90:	ee71 7a67 	vsub.f32	s15, s2, s15
 8018b94:	ed57 0a01 	vldr	s1, [r7, #-4]
 8018b98:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8018b9c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8018ba0:	edd3 9a03 	vldr	s19, [r3, #12]
 8018ba4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8018ba8:	ed92 9a03 	vldr	s18, [r2, #12]
 8018bac:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8018bb0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8018bb4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8018bb8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8018bbc:	ee16 ca10 	vmov	ip, s12
 8018bc0:	ee30 6a49 	vsub.f32	s12, s0, s18
 8018bc4:	ee77 4a01 	vadd.f32	s9, s14, s2
 8018bc8:	f847 c908 	str.w	ip, [r7], #-8
 8018bcc:	ee34 4a29 	vadd.f32	s8, s8, s19
 8018bd0:	edd2 8a03 	vldr	s17, [r2, #12]
 8018bd4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8018bd8:	ed93 8a03 	vldr	s16, [r3, #12]
 8018bdc:	ee71 0a47 	vsub.f32	s1, s2, s14
 8018be0:	ee30 0a28 	vadd.f32	s0, s0, s17
 8018be4:	ee39 1a67 	vsub.f32	s2, s18, s15
 8018be8:	ee36 6a69 	vsub.f32	s12, s12, s19
 8018bec:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018bf0:	ee75 5aca 	vsub.f32	s11, s11, s20
 8018bf4:	ed87 0a01 	vstr	s0, [r7, #4]
 8018bf8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8018bfc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8018c00:	ee21 8a80 	vmul.f32	s16, s3, s0
 8018c04:	ee23 7a26 	vmul.f32	s14, s6, s13
 8018c08:	ee64 7a26 	vmul.f32	s15, s8, s13
 8018c0c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8018c10:	ee24 4a00 	vmul.f32	s8, s8, s0
 8018c14:	ee23 3a00 	vmul.f32	s6, s6, s0
 8018c18:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8018c1c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8018c20:	ee38 7a07 	vadd.f32	s14, s16, s14
 8018c24:	ee76 6a84 	vadd.f32	s13, s13, s8
 8018c28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018c2c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018c30:	ee17 ca10 	vmov	ip, s14
 8018c34:	f841 cb08 	str.w	ip, [r1], #8
 8018c38:	ed01 3a01 	vstr	s6, [r1, #-4]
 8018c3c:	ed82 0a04 	vstr	s0, [r2, #16]
 8018c40:	edc2 6a03 	vstr	s13, [r2, #12]
 8018c44:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8018c48:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8018c4c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8018c50:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8018c54:	ee65 4a27 	vmul.f32	s9, s10, s15
 8018c58:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018c5c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018c60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018c64:	ee25 5a26 	vmul.f32	s10, s10, s13
 8018c68:	ee66 6a26 	vmul.f32	s13, s12, s13
 8018c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c70:	ee34 6a24 	vadd.f32	s12, s8, s9
 8018c74:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8018c78:	ee35 5a63 	vsub.f32	s10, s10, s7
 8018c7c:	ee17 ca90 	vmov	ip, s15
 8018c80:	ed04 6a04 	vstr	s12, [r4, #-16]
 8018c84:	ed04 5a03 	vstr	s10, [r4, #-12]
 8018c88:	f846 c908 	str.w	ip, [r6], #-8
 8018c8c:	edc6 6a01 	vstr	s13, [r6, #4]
 8018c90:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8018c94:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8018c98:	ee62 5a27 	vmul.f32	s11, s4, s15
 8018c9c:	ee22 6a87 	vmul.f32	s12, s5, s14
 8018ca0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018ca4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8018ca8:	ee61 6a07 	vmul.f32	s13, s2, s14
 8018cac:	ee20 7a87 	vmul.f32	s14, s1, s14
 8018cb0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018cb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018cb8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018cbc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8018cc0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8018cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cc8:	ee16 ca10 	vmov	ip, s12
 8018ccc:	f840 cb08 	str.w	ip, [r0], #8
 8018cd0:	ed40 2a01 	vstr	s5, [r0, #-4]
 8018cd4:	edc3 0a04 	vstr	s1, [r3, #16]
 8018cd8:	edc3 7a03 	vstr	s15, [r3, #12]
 8018cdc:	f47f aefc 	bne.w	8018ad8 <arm_cfft_radix8by4_f32+0x134>
 8018ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018ce2:	9802      	ldr	r0, [sp, #8]
 8018ce4:	00cb      	lsls	r3, r1, #3
 8018ce6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8018cea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8018cee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8018cf2:	4498      	add	r8, r3
 8018cf4:	449c      	add	ip, r3
 8018cf6:	9102      	str	r1, [sp, #8]
 8018cf8:	9901      	ldr	r1, [sp, #4]
 8018cfa:	4419      	add	r1, r3
 8018cfc:	9101      	str	r1, [sp, #4]
 8018cfe:	9907      	ldr	r1, [sp, #28]
 8018d00:	4419      	add	r1, r3
 8018d02:	9107      	str	r1, [sp, #28]
 8018d04:	9908      	ldr	r1, [sp, #32]
 8018d06:	4419      	add	r1, r3
 8018d08:	9b06      	ldr	r3, [sp, #24]
 8018d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d0e:	9108      	str	r1, [sp, #32]
 8018d10:	9306      	str	r3, [sp, #24]
 8018d12:	9a01      	ldr	r2, [sp, #4]
 8018d14:	2304      	movs	r3, #4
 8018d16:	9e08      	ldr	r6, [sp, #32]
 8018d18:	edd2 7a00 	vldr	s15, [r2]
 8018d1c:	ed96 7a00 	vldr	s14, [r6]
 8018d20:	edd8 2a00 	vldr	s5, [r8]
 8018d24:	ee77 5a87 	vadd.f32	s11, s15, s14
 8018d28:	ed9c 3a00 	vldr	s6, [ip]
 8018d2c:	ed92 6a01 	vldr	s12, [r2, #4]
 8018d30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8018d34:	edd6 6a01 	vldr	s13, [r6, #4]
 8018d38:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8018d3c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8018d40:	ee36 5a26 	vadd.f32	s10, s12, s13
 8018d44:	edd8 7a01 	vldr	s15, [r8, #4]
 8018d48:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018d4c:	9d02      	ldr	r5, [sp, #8]
 8018d4e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8018d52:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8018d56:	ee37 4a27 	vadd.f32	s8, s14, s15
 8018d5a:	9805      	ldr	r0, [sp, #20]
 8018d5c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8018d60:	4621      	mov	r1, r4
 8018d62:	ed82 6a00 	vstr	s12, [r2]
 8018d66:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8018d6a:	edd8 3a01 	vldr	s7, [r8, #4]
 8018d6e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8018d72:	eddc 1a01 	vldr	s3, [ip, #4]
 8018d76:	ee34 4a42 	vsub.f32	s8, s8, s4
 8018d7a:	ee75 3a23 	vadd.f32	s7, s10, s7
 8018d7e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018d82:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8018d86:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8018d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d8e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8018d92:	ed82 5a01 	vstr	s10, [r2, #4]
 8018d96:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8018d9a:	9a07      	ldr	r2, [sp, #28]
 8018d9c:	ee77 7a02 	vadd.f32	s15, s14, s4
 8018da0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8018da4:	edd2 2a00 	vldr	s5, [r2]
 8018da8:	ed92 5a01 	vldr	s10, [r2, #4]
 8018dac:	ee64 3a22 	vmul.f32	s7, s8, s5
 8018db0:	ee24 4a05 	vmul.f32	s8, s8, s10
 8018db4:	ee24 5a85 	vmul.f32	s10, s9, s10
 8018db8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8018dbc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8018dc0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018dc4:	ed88 5a00 	vstr	s10, [r8]
 8018dc8:	edc8 4a01 	vstr	s9, [r8, #4]
 8018dcc:	edd5 4a01 	vldr	s9, [r5, #4]
 8018dd0:	edd5 6a00 	vldr	s13, [r5]
 8018dd4:	9d06      	ldr	r5, [sp, #24]
 8018dd6:	ee26 5a26 	vmul.f32	s10, s12, s13
 8018dda:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018dde:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8018de2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8018de6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8018dea:	ee75 5a25 	vadd.f32	s11, s10, s11
 8018dee:	ed86 6a01 	vstr	s12, [r6, #4]
 8018df2:	edc6 5a00 	vstr	s11, [r6]
 8018df6:	edd5 5a01 	vldr	s11, [r5, #4]
 8018dfa:	edd5 6a00 	vldr	s13, [r5]
 8018dfe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018e00:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8018e04:	ee67 6a26 	vmul.f32	s13, s14, s13
 8018e08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018e0c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8018e10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018e14:	ee36 7a07 	vadd.f32	s14, s12, s14
 8018e18:	edcc 7a01 	vstr	s15, [ip, #4]
 8018e1c:	ed8c 7a00 	vstr	s14, [ip]
 8018e20:	6872      	ldr	r2, [r6, #4]
 8018e22:	f000 f977 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e26:	9803      	ldr	r0, [sp, #12]
 8018e28:	4621      	mov	r1, r4
 8018e2a:	6872      	ldr	r2, [r6, #4]
 8018e2c:	2304      	movs	r3, #4
 8018e2e:	f000 f971 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018e34:	4621      	mov	r1, r4
 8018e36:	6872      	ldr	r2, [r6, #4]
 8018e38:	2304      	movs	r3, #4
 8018e3a:	f000 f96b 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e3e:	4621      	mov	r1, r4
 8018e40:	6872      	ldr	r2, [r6, #4]
 8018e42:	2304      	movs	r3, #4
 8018e44:	9804      	ldr	r0, [sp, #16]
 8018e46:	b00f      	add	sp, #60	; 0x3c
 8018e48:	ecbd 8b06 	vpop	{d8-d10}
 8018e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	f000 b960 	b.w	8019114 <arm_radix8_butterfly_f32>

08018e54 <arm_cfft_f32>:
 8018e54:	2a01      	cmp	r2, #1
 8018e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e5a:	4606      	mov	r6, r0
 8018e5c:	4617      	mov	r7, r2
 8018e5e:	460c      	mov	r4, r1
 8018e60:	4698      	mov	r8, r3
 8018e62:	8805      	ldrh	r5, [r0, #0]
 8018e64:	d053      	beq.n	8018f0e <arm_cfft_f32+0xba>
 8018e66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8018e6a:	d04b      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018e6c:	d916      	bls.n	8018e9c <arm_cfft_f32+0x48>
 8018e6e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8018e72:	d01a      	beq.n	8018eaa <arm_cfft_f32+0x56>
 8018e74:	d95a      	bls.n	8018f2c <arm_cfft_f32+0xd8>
 8018e76:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018e7a:	d043      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018e7c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8018e80:	d105      	bne.n	8018e8e <arm_cfft_f32+0x3a>
 8018e82:	2301      	movs	r3, #1
 8018e84:	6872      	ldr	r2, [r6, #4]
 8018e86:	4629      	mov	r1, r5
 8018e88:	4620      	mov	r0, r4
 8018e8a:	f000 f943 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e8e:	f1b8 0f00 	cmp.w	r8, #0
 8018e92:	d111      	bne.n	8018eb8 <arm_cfft_f32+0x64>
 8018e94:	2f01      	cmp	r7, #1
 8018e96:	d016      	beq.n	8018ec6 <arm_cfft_f32+0x72>
 8018e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9c:	2d20      	cmp	r5, #32
 8018e9e:	d031      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018ea0:	d948      	bls.n	8018f34 <arm_cfft_f32+0xe0>
 8018ea2:	2d40      	cmp	r5, #64	; 0x40
 8018ea4:	d0ed      	beq.n	8018e82 <arm_cfft_f32+0x2e>
 8018ea6:	2d80      	cmp	r5, #128	; 0x80
 8018ea8:	d1f1      	bne.n	8018e8e <arm_cfft_f32+0x3a>
 8018eaa:	4621      	mov	r1, r4
 8018eac:	4630      	mov	r0, r6
 8018eae:	f7ff fca9 	bl	8018804 <arm_cfft_radix8by2_f32>
 8018eb2:	f1b8 0f00 	cmp.w	r8, #0
 8018eb6:	d0ed      	beq.n	8018e94 <arm_cfft_f32+0x40>
 8018eb8:	68b2      	ldr	r2, [r6, #8]
 8018eba:	4620      	mov	r0, r4
 8018ebc:	89b1      	ldrh	r1, [r6, #12]
 8018ebe:	f7e7 f9a7 	bl	8000210 <arm_bitreversal_32>
 8018ec2:	2f01      	cmp	r7, #1
 8018ec4:	d1e8      	bne.n	8018e98 <arm_cfft_f32+0x44>
 8018ec6:	ee07 5a90 	vmov	s15, r5
 8018eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018ed2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018ed6:	2d00      	cmp	r5, #0
 8018ed8:	d0de      	beq.n	8018e98 <arm_cfft_f32+0x44>
 8018eda:	f104 0108 	add.w	r1, r4, #8
 8018ede:	2300      	movs	r3, #0
 8018ee0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018ee4:	3301      	adds	r3, #1
 8018ee6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018eea:	3108      	adds	r1, #8
 8018eec:	429d      	cmp	r5, r3
 8018eee:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018ef2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018ef6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018efa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018efe:	d1ef      	bne.n	8018ee0 <arm_cfft_f32+0x8c>
 8018f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f04:	4621      	mov	r1, r4
 8018f06:	4630      	mov	r0, r6
 8018f08:	f7ff fd4c 	bl	80189a4 <arm_cfft_radix8by4_f32>
 8018f0c:	e7bf      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f0e:	b1a5      	cbz	r5, 8018f3a <arm_cfft_f32+0xe6>
 8018f10:	f101 030c 	add.w	r3, r1, #12
 8018f14:	2200      	movs	r2, #0
 8018f16:	ed53 7a02 	vldr	s15, [r3, #-8]
 8018f1a:	3201      	adds	r2, #1
 8018f1c:	3308      	adds	r3, #8
 8018f1e:	eef1 7a67 	vneg.f32	s15, s15
 8018f22:	4295      	cmp	r5, r2
 8018f24:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018f28:	d1f5      	bne.n	8018f16 <arm_cfft_f32+0xc2>
 8018f2a:	e79c      	b.n	8018e66 <arm_cfft_f32+0x12>
 8018f2c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8018f30:	d0a7      	beq.n	8018e82 <arm_cfft_f32+0x2e>
 8018f32:	e7ac      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f34:	2d10      	cmp	r5, #16
 8018f36:	d0b8      	beq.n	8018eaa <arm_cfft_f32+0x56>
 8018f38:	e7a9      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f3a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8018f3e:	d896      	bhi.n	8018e6e <arm_cfft_f32+0x1a>
 8018f40:	e7ac      	b.n	8018e9c <arm_cfft_f32+0x48>
 8018f42:	bf00      	nop

08018f44 <arm_cmplx_mag_f32>:
 8018f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f48:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8018f4c:	b084      	sub	sp, #16
 8018f4e:	d07f      	beq.n	8019050 <arm_cmplx_mag_f32+0x10c>
 8018f50:	f100 0420 	add.w	r4, r0, #32
 8018f54:	f101 0510 	add.w	r5, r1, #16
 8018f58:	4646      	mov	r6, r8
 8018f5a:	2700      	movs	r7, #0
 8018f5c:	e05a      	b.n	8019014 <arm_cmplx_mag_f32+0xd0>
 8018f5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018f62:	eeb4 0a40 	vcmp.f32	s0, s0
 8018f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f6a:	f040 80a4 	bne.w	80190b6 <arm_cmplx_mag_f32+0x172>
 8018f6e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8018f72:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8018f76:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8018f7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018f7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018f82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f8e:	f2c0 808f 	blt.w	80190b0 <arm_cmplx_mag_f32+0x16c>
 8018f92:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018f96:	eeb4 0a40 	vcmp.f32	s0, s0
 8018f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9e:	f040 80af 	bne.w	8019100 <arm_cmplx_mag_f32+0x1bc>
 8018fa2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8018fa6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8018faa:	ed14 0a03 	vldr	s0, [r4, #-12]
 8018fae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018fb2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018fb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc2:	db72      	blt.n	80190aa <arm_cmplx_mag_f32+0x166>
 8018fc4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018fc8:	eeb4 0a40 	vcmp.f32	s0, s0
 8018fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd0:	f040 808c 	bne.w	80190ec <arm_cmplx_mag_f32+0x1a8>
 8018fd4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8018fd8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8018fdc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8018fe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018fe4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018fe8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff4:	db20      	blt.n	8019038 <arm_cmplx_mag_f32+0xf4>
 8018ff6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018ffa:	eeb4 0a40 	vcmp.f32	s0, s0
 8018ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019002:	d169      	bne.n	80190d8 <arm_cmplx_mag_f32+0x194>
 8019004:	3e01      	subs	r6, #1
 8019006:	ed05 0a01 	vstr	s0, [r5, #-4]
 801900a:	f104 0420 	add.w	r4, r4, #32
 801900e:	f105 0510 	add.w	r5, r5, #16
 8019012:	d019      	beq.n	8019048 <arm_cmplx_mag_f32+0x104>
 8019014:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8019018:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801901c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019020:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019024:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019030:	da95      	bge.n	8018f5e <arm_cmplx_mag_f32+0x1a>
 8019032:	f845 7c10 	str.w	r7, [r5, #-16]
 8019036:	e79c      	b.n	8018f72 <arm_cmplx_mag_f32+0x2e>
 8019038:	3e01      	subs	r6, #1
 801903a:	f845 7c04 	str.w	r7, [r5, #-4]
 801903e:	f104 0420 	add.w	r4, r4, #32
 8019042:	f105 0510 	add.w	r5, r5, #16
 8019046:	d1e5      	bne.n	8019014 <arm_cmplx_mag_f32+0xd0>
 8019048:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801904c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8019050:	f012 0503 	ands.w	r5, r2, #3
 8019054:	d026      	beq.n	80190a4 <arm_cmplx_mag_f32+0x160>
 8019056:	f100 0408 	add.w	r4, r0, #8
 801905a:	2600      	movs	r6, #0
 801905c:	e00c      	b.n	8019078 <arm_cmplx_mag_f32+0x134>
 801905e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019062:	eeb4 0a40 	vcmp.f32	s0, s0
 8019066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801906a:	d12e      	bne.n	80190ca <arm_cmplx_mag_f32+0x186>
 801906c:	3d01      	subs	r5, #1
 801906e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019072:	f104 0408 	add.w	r4, r4, #8
 8019076:	d015      	beq.n	80190a4 <arm_cmplx_mag_f32+0x160>
 8019078:	ed54 7a02 	vldr	s15, [r4, #-8]
 801907c:	3104      	adds	r1, #4
 801907e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019082:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019086:	ee20 0a00 	vmul.f32	s0, s0, s0
 801908a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801908e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019096:	dae2      	bge.n	801905e <arm_cmplx_mag_f32+0x11a>
 8019098:	3d01      	subs	r5, #1
 801909a:	f841 6c04 	str.w	r6, [r1, #-4]
 801909e:	f104 0408 	add.w	r4, r4, #8
 80190a2:	d1e9      	bne.n	8019078 <arm_cmplx_mag_f32+0x134>
 80190a4:	b004      	add	sp, #16
 80190a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190aa:	f845 7c08 	str.w	r7, [r5, #-8]
 80190ae:	e793      	b.n	8018fd8 <arm_cmplx_mag_f32+0x94>
 80190b0:	f845 7c0c 	str.w	r7, [r5, #-12]
 80190b4:	e777      	b.n	8018fa6 <arm_cmplx_mag_f32+0x62>
 80190b6:	eeb0 0a67 	vmov.f32	s0, s15
 80190ba:	9203      	str	r2, [sp, #12]
 80190bc:	9102      	str	r1, [sp, #8]
 80190be:	9001      	str	r0, [sp, #4]
 80190c0:	f001 fda2 	bl	801ac08 <sqrtf>
 80190c4:	a801      	add	r0, sp, #4
 80190c6:	c807      	ldmia	r0, {r0, r1, r2}
 80190c8:	e751      	b.n	8018f6e <arm_cmplx_mag_f32+0x2a>
 80190ca:	eeb0 0a67 	vmov.f32	s0, s15
 80190ce:	9101      	str	r1, [sp, #4]
 80190d0:	f001 fd9a 	bl	801ac08 <sqrtf>
 80190d4:	9901      	ldr	r1, [sp, #4]
 80190d6:	e7c9      	b.n	801906c <arm_cmplx_mag_f32+0x128>
 80190d8:	eeb0 0a67 	vmov.f32	s0, s15
 80190dc:	9203      	str	r2, [sp, #12]
 80190de:	9102      	str	r1, [sp, #8]
 80190e0:	9001      	str	r0, [sp, #4]
 80190e2:	f001 fd91 	bl	801ac08 <sqrtf>
 80190e6:	a801      	add	r0, sp, #4
 80190e8:	c807      	ldmia	r0, {r0, r1, r2}
 80190ea:	e78b      	b.n	8019004 <arm_cmplx_mag_f32+0xc0>
 80190ec:	eeb0 0a67 	vmov.f32	s0, s15
 80190f0:	9203      	str	r2, [sp, #12]
 80190f2:	9102      	str	r1, [sp, #8]
 80190f4:	9001      	str	r0, [sp, #4]
 80190f6:	f001 fd87 	bl	801ac08 <sqrtf>
 80190fa:	a801      	add	r0, sp, #4
 80190fc:	c807      	ldmia	r0, {r0, r1, r2}
 80190fe:	e769      	b.n	8018fd4 <arm_cmplx_mag_f32+0x90>
 8019100:	eeb0 0a67 	vmov.f32	s0, s15
 8019104:	9203      	str	r2, [sp, #12]
 8019106:	9102      	str	r1, [sp, #8]
 8019108:	9001      	str	r0, [sp, #4]
 801910a:	f001 fd7d 	bl	801ac08 <sqrtf>
 801910e:	a801      	add	r0, sp, #4
 8019110:	c807      	ldmia	r0, {r0, r1, r2}
 8019112:	e746      	b.n	8018fa2 <arm_cmplx_mag_f32+0x5e>

08019114 <arm_radix8_butterfly_f32>:
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	469e      	mov	lr, r3
 801911a:	4603      	mov	r3, r0
 801911c:	468a      	mov	sl, r1
 801911e:	468b      	mov	fp, r1
 8019120:	3304      	adds	r3, #4
 8019122:	ed2d 8b10 	vpush	{d8-d15}
 8019126:	469c      	mov	ip, r3
 8019128:	b09d      	sub	sp, #116	; 0x74
 801912a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8019438 <arm_radix8_butterfly_f32+0x324>
 801912e:	9019      	str	r0, [sp, #100]	; 0x64
 8019130:	921a      	str	r2, [sp, #104]	; 0x68
 8019132:	931b      	str	r3, [sp, #108]	; 0x6c
 8019134:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8019138:	f04f 0800 	mov.w	r8, #0
 801913c:	461a      	mov	r2, r3
 801913e:	9311      	str	r3, [sp, #68]	; 0x44
 8019140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019144:	4611      	mov	r1, r2
 8019146:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801914a:	9300      	str	r3, [sp, #0]
 801914c:	0053      	lsls	r3, r2, #1
 801914e:	18d5      	adds	r5, r2, r3
 8019150:	9301      	str	r3, [sp, #4]
 8019152:	0113      	lsls	r3, r2, #4
 8019154:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019156:	194c      	adds	r4, r1, r5
 8019158:	eb02 0609 	add.w	r6, r2, r9
 801915c:	9302      	str	r3, [sp, #8]
 801915e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019162:	4613      	mov	r3, r2
 8019164:	190a      	adds	r2, r1, r4
 8019166:	eb06 0709 	add.w	r7, r6, r9
 801916a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801916e:	1888      	adds	r0, r1, r2
 8019170:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019174:	4401      	add	r1, r0
 8019176:	3204      	adds	r2, #4
 8019178:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801917c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019180:	9b00      	ldr	r3, [sp, #0]
 8019182:	3104      	adds	r1, #4
 8019184:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8019188:	44d8      	add	r8, fp
 801918a:	ed90 7a00 	vldr	s14, [r0]
 801918e:	ed94 5a00 	vldr	s10, [r4]
 8019192:	45c2      	cmp	sl, r8
 8019194:	edd7 3a00 	vldr	s7, [r7]
 8019198:	ed96 6a00 	vldr	s12, [r6]
 801919c:	ee37 1a85 	vadd.f32	s2, s15, s10
 80191a0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80191a4:	ee73 4a87 	vadd.f32	s9, s7, s14
 80191a8:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80191ac:	edd5 7a00 	vldr	s15, [r5]
 80191b0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80191b4:	ed11 7a01 	vldr	s14, [r1, #-4]
 80191b8:	ee36 2a26 	vadd.f32	s4, s12, s13
 80191bc:	ee37 4a87 	vadd.f32	s8, s15, s14
 80191c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80191c4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80191c8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80191cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80191d0:	ee31 1a64 	vsub.f32	s2, s2, s9
 80191d4:	ee75 4a86 	vadd.f32	s9, s11, s12
 80191d8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80191dc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80191e0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80191e4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80191e8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80191ec:	ed94 0a01 	vldr	s0, [r4, #4]
 80191f0:	edc4 5a00 	vstr	s11, [r4]
 80191f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80191f8:	edd6 5a01 	vldr	s11, [r6, #4]
 80191fc:	edd5 2a01 	vldr	s5, [r5, #4]
 8019200:	ee75 1a27 	vadd.f32	s3, s10, s15
 8019204:	ed92 4a00 	vldr	s8, [r2]
 8019208:	ee75 7a67 	vsub.f32	s15, s10, s15
 801920c:	edd1 4a00 	vldr	s9, [r1]
 8019210:	ee27 7a09 	vmul.f32	s14, s14, s18
 8019214:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8019218:	ed9c 6a00 	vldr	s12, [ip]
 801921c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8019220:	edd0 0a01 	vldr	s1, [r0, #4]
 8019224:	ed97 5a01 	vldr	s10, [r7, #4]
 8019228:	ee35 4a84 	vadd.f32	s8, s11, s8
 801922c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8019230:	ee73 5a26 	vadd.f32	s11, s6, s13
 8019234:	ee76 2a00 	vadd.f32	s5, s12, s0
 8019238:	ee73 6a66 	vsub.f32	s13, s6, s13
 801923c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8019240:	ee35 0a20 	vadd.f32	s0, s10, s1
 8019244:	ee65 5a89 	vmul.f32	s11, s11, s18
 8019248:	ee35 5a60 	vsub.f32	s10, s10, s1
 801924c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8019250:	ee74 0a24 	vadd.f32	s1, s8, s9
 8019254:	ee66 6a89 	vmul.f32	s13, s13, s18
 8019258:	ee74 4a64 	vsub.f32	s9, s8, s9
 801925c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8019260:	ee75 2a25 	vadd.f32	s5, s10, s11
 8019264:	ee33 0a20 	vadd.f32	s0, s6, s1
 8019268:	ee75 5a65 	vsub.f32	s11, s10, s11
 801926c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8019270:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019274:	ed8c 0a00 	vstr	s0, [ip]
 8019278:	ee76 6a66 	vsub.f32	s13, s12, s13
 801927c:	449c      	add	ip, r3
 801927e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8019282:	ed84 3a01 	vstr	s6, [r4, #4]
 8019286:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801928a:	441c      	add	r4, r3
 801928c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8019290:	ee71 4a64 	vsub.f32	s9, s2, s9
 8019294:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8019298:	edc7 3a00 	vstr	s7, [r7]
 801929c:	ee34 1a42 	vsub.f32	s2, s8, s4
 80192a0:	edc0 4a00 	vstr	s9, [r0]
 80192a4:	ee77 3aa5 	vadd.f32	s7, s15, s11
 80192a8:	ee75 4a46 	vsub.f32	s9, s10, s12
 80192ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80192b0:	ed87 1a01 	vstr	s2, [r7, #4]
 80192b4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80192b8:	441f      	add	r7, r3
 80192ba:	ee32 4a04 	vadd.f32	s8, s4, s8
 80192be:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80192c2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80192c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80192ca:	ed80 4a01 	vstr	s8, [r0, #4]
 80192ce:	ed86 3a00 	vstr	s6, [r6]
 80192d2:	4418      	add	r0, r3
 80192d4:	ed41 1a01 	vstr	s3, [r1, #-4]
 80192d8:	ed42 3a01 	vstr	s7, [r2, #-4]
 80192dc:	edc5 7a00 	vstr	s15, [r5]
 80192e0:	edc6 4a01 	vstr	s9, [r6, #4]
 80192e4:	441e      	add	r6, r3
 80192e6:	ed81 6a00 	vstr	s12, [r1]
 80192ea:	4419      	add	r1, r3
 80192ec:	edc2 5a00 	vstr	s11, [r2]
 80192f0:	441a      	add	r2, r3
 80192f2:	ed85 7a01 	vstr	s14, [r5, #4]
 80192f6:	441d      	add	r5, r3
 80192f8:	f63f af44 	bhi.w	8019184 <arm_radix8_butterfly_f32+0x70>
 80192fc:	9300      	str	r3, [sp, #0]
 80192fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019300:	2b07      	cmp	r3, #7
 8019302:	f240 81f4 	bls.w	80196ee <arm_radix8_butterfly_f32+0x5da>
 8019306:	9901      	ldr	r1, [sp, #4]
 8019308:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801930c:	9d02      	ldr	r5, [sp, #8]
 801930e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8019312:	3101      	adds	r1, #1
 8019314:	eb04 000e 	add.w	r0, r4, lr
 8019318:	00e4      	lsls	r4, r4, #3
 801931a:	3508      	adds	r5, #8
 801931c:	4419      	add	r1, r3
 801931e:	eb00 0c0e 	add.w	ip, r0, lr
 8019322:	9413      	str	r4, [sp, #76]	; 0x4c
 8019324:	00c0      	lsls	r0, r0, #3
 8019326:	185e      	adds	r6, r3, r1
 8019328:	4617      	mov	r7, r2
 801932a:	9218      	str	r2, [sp, #96]	; 0x60
 801932c:	f109 0908 	add.w	r9, r9, #8
 8019330:	199c      	adds	r4, r3, r6
 8019332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019334:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019336:	9012      	str	r0, [sp, #72]	; 0x48
 8019338:	195d      	adds	r5, r3, r5
 801933a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801933c:	443a      	add	r2, r7
 801933e:	950c      	str	r5, [sp, #48]	; 0x30
 8019340:	4698      	mov	r8, r3
 8019342:	4420      	add	r0, r4
 8019344:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019346:	19d7      	adds	r7, r2, r7
 8019348:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801934c:	4405      	add	r5, r0
 801934e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019352:	9710      	str	r7, [sp, #64]	; 0x40
 8019354:	eb0c 070e 	add.w	r7, ip, lr
 8019358:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801935c:	3404      	adds	r4, #4
 801935e:	3004      	adds	r0, #4
 8019360:	44c8      	add	r8, r9
 8019362:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8019366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019368:	940a      	str	r4, [sp, #40]	; 0x28
 801936a:	9009      	str	r0, [sp, #36]	; 0x24
 801936c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019370:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019372:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019376:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019378:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801937c:	eb07 080e 	add.w	r8, r7, lr
 8019380:	eb04 0900 	add.w	r9, r4, r0
 8019384:	00f8      	lsls	r0, r7, #3
 8019386:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801938a:	3504      	adds	r5, #4
 801938c:	4607      	mov	r7, r0
 801938e:	9017      	str	r0, [sp, #92]	; 0x5c
 8019390:	910b      	str	r1, [sp, #44]	; 0x2c
 8019392:	4618      	mov	r0, r3
 8019394:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8019398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801939a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801939e:	18e3      	adds	r3, r4, r3
 80193a0:	9508      	str	r5, [sp, #32]
 80193a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80193a4:	910e      	str	r1, [sp, #56]	; 0x38
 80193a6:	4621      	mov	r1, r4
 80193a8:	eb04 0805 	add.w	r8, r4, r5
 80193ac:	9304      	str	r3, [sp, #16]
 80193ae:	19e5      	adds	r5, r4, r7
 80193b0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80193b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193b6:	9316      	str	r3, [sp, #88]	; 0x58
 80193b8:	190b      	adds	r3, r1, r4
 80193ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80193bc:	9505      	str	r5, [sp, #20]
 80193be:	9303      	str	r3, [sp, #12]
 80193c0:	f100 0308 	add.w	r3, r0, #8
 80193c4:	9707      	str	r7, [sp, #28]
 80193c6:	4638      	mov	r0, r7
 80193c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80193ca:	2301      	movs	r3, #1
 80193cc:	9306      	str	r3, [sp, #24]
 80193ce:	9b00      	ldr	r3, [sp, #0]
 80193d0:	ed90 fa00 	vldr	s30, [r0]
 80193d4:	edd0 ba01 	vldr	s23, [r0, #4]
 80193d8:	9803      	ldr	r0, [sp, #12]
 80193da:	9903      	ldr	r1, [sp, #12]
 80193dc:	ed90 ba01 	vldr	s22, [r0, #4]
 80193e0:	9804      	ldr	r0, [sp, #16]
 80193e2:	edd1 ea00 	vldr	s29, [r1]
 80193e6:	edd0 aa01 	vldr	s21, [r0, #4]
 80193ea:	9805      	ldr	r0, [sp, #20]
 80193ec:	9905      	ldr	r1, [sp, #20]
 80193ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80193f2:	ed91 da00 	vldr	s26, [r1]
 80193f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80193f8:	9c04      	ldr	r4, [sp, #16]
 80193fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80193fe:	edd8 7a01 	vldr	s15, [r8, #4]
 8019402:	9100      	str	r1, [sp, #0]
 8019404:	edd2 fa00 	vldr	s31, [r2]
 8019408:	ed94 ea00 	vldr	s28, [r4]
 801940c:	ed92 ca01 	vldr	s24, [r2, #4]
 8019410:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019414:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019416:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019418:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801941a:	edd9 da00 	vldr	s27, [r9]
 801941e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019420:	edd8 ca00 	vldr	s25, [r8]
 8019424:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019428:	f8dd c018 	ldr.w	ip, [sp, #24]
 801942c:	ed99 aa01 	vldr	s20, [r9, #4]
 8019430:	edcd 7a02 	vstr	s15, [sp, #8]
 8019434:	9800      	ldr	r0, [sp, #0]
 8019436:	e001      	b.n	801943c <arm_radix8_butterfly_f32+0x328>
 8019438:	3f3504f3 	.word	0x3f3504f3
 801943c:	edd5 3a00 	vldr	s7, [r5]
 8019440:	44dc      	add	ip, fp
 8019442:	ed91 7a00 	vldr	s14, [r1]
 8019446:	edd4 8a00 	vldr	s17, [r4]
 801944a:	45e2      	cmp	sl, ip
 801944c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8019450:	ed90 5a00 	vldr	s10, [r0]
 8019454:	ed56 5a01 	vldr	s11, [r6, #-4]
 8019458:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801945c:	ed92 1a00 	vldr	s2, [r2]
 8019460:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8019464:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8019468:	ee75 9a25 	vadd.f32	s19, s10, s11
 801946c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8019470:	ed92 8a01 	vldr	s16, [r2, #4]
 8019474:	ee73 6a84 	vadd.f32	s13, s7, s8
 8019478:	ee75 5a65 	vsub.f32	s11, s10, s11
 801947c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8019480:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019484:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8019488:	ee75 7a84 	vadd.f32	s15, s11, s8
 801948c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8019490:	ee31 7a85 	vadd.f32	s14, s3, s10
 8019494:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019498:	ee33 3a46 	vsub.f32	s6, s6, s12
 801949c:	ed82 7a00 	vstr	s14, [r2]
 80194a0:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80194a4:	ed96 6a00 	vldr	s12, [r6]
 80194a8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80194ac:	edd5 3a01 	vldr	s7, [r5, #4]
 80194b0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80194b4:	ed90 7a01 	vldr	s14, [r0, #4]
 80194b8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80194bc:	edde 4a00 	vldr	s9, [lr]
 80194c0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80194c4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80194c8:	edd1 6a01 	vldr	s13, [r1, #4]
 80194cc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80194d0:	edd7 0a00 	vldr	s1, [r7]
 80194d4:	ee77 5a06 	vadd.f32	s11, s14, s12
 80194d8:	ed94 7a01 	vldr	s14, [r4, #4]
 80194dc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80194e0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80194e4:	ee78 4a66 	vsub.f32	s9, s16, s13
 80194e8:	ee78 3a26 	vadd.f32	s7, s16, s13
 80194ec:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80194f0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80194f4:	ee24 4a09 	vmul.f32	s8, s8, s18
 80194f8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80194fc:	ee20 8a09 	vmul.f32	s16, s0, s18
 8019500:	ee75 0a86 	vadd.f32	s1, s11, s12
 8019504:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8019508:	ee62 2a89 	vmul.f32	s5, s5, s18
 801950c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019510:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8019514:	ee77 7a62 	vsub.f32	s15, s14, s5
 8019518:	ee74 5a88 	vadd.f32	s11, s9, s16
 801951c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8019520:	ee77 4a22 	vadd.f32	s9, s14, s5
 8019524:	ee71 2a04 	vadd.f32	s5, s2, s8
 8019528:	ee31 7a44 	vsub.f32	s14, s2, s8
 801952c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8019530:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019534:	ee33 6a46 	vsub.f32	s12, s6, s12
 8019538:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801953c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8019540:	ee38 4a68 	vsub.f32	s8, s16, s17
 8019544:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8019548:	ee72 5a25 	vadd.f32	s11, s4, s11
 801954c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8019550:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8019554:	ee77 2a27 	vadd.f32	s5, s14, s15
 8019558:	ee37 7a67 	vsub.f32	s14, s14, s15
 801955c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8019560:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8019564:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8019568:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801956c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8019570:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8019574:	ee70 0a20 	vadd.f32	s1, s0, s1
 8019578:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801957c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8019580:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8019584:	edc2 0a01 	vstr	s1, [r2, #4]
 8019588:	ee38 8a88 	vadd.f32	s16, s17, s16
 801958c:	441a      	add	r2, r3
 801958e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8019592:	ee31 5a45 	vsub.f32	s10, s2, s10
 8019596:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801959a:	ed81 8a00 	vstr	s16, [r1]
 801959e:	ee39 0a80 	vadd.f32	s0, s19, s0
 80195a2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80195a6:	ed81 5a01 	vstr	s10, [r1, #4]
 80195aa:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80195ae:	edcd 3a00 	vstr	s7, [sp]
 80195b2:	ed9d 5a02 	vldr	s10, [sp, #8]
 80195b6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80195ba:	eddd 3a01 	vldr	s7, [sp, #4]
 80195be:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80195c2:	ed84 0a00 	vstr	s0, [r4]
 80195c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80195ca:	ed84 3a01 	vstr	s6, [r4, #4]
 80195ce:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80195d2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80195d6:	eddd 3a00 	vldr	s7, [sp]
 80195da:	ee25 5a25 	vmul.f32	s10, s10, s11
 80195de:	4419      	add	r1, r3
 80195e0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80195e4:	441c      	add	r4, r3
 80195e6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80195ea:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80195ee:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80195f2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80195f6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80195fa:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80195fe:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8019602:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8019606:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801960a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801960e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8019612:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019616:	ee38 8a01 	vadd.f32	s16, s16, s2
 801961a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801961e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8019622:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019626:	ed07 8a01 	vstr	s16, [r7, #-4]
 801962a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801962e:	ed87 6a00 	vstr	s12, [r7]
 8019632:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019636:	edc0 0a00 	vstr	s1, [r0]
 801963a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801963e:	edc0 3a01 	vstr	s7, [r0, #4]
 8019642:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019646:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801964a:	edce 4a00 	vstr	s9, [lr]
 801964e:	4418      	add	r0, r3
 8019650:	ed06 0a01 	vstr	s0, [r6, #-4]
 8019654:	441f      	add	r7, r3
 8019656:	edc6 2a00 	vstr	s5, [r6]
 801965a:	449e      	add	lr, r3
 801965c:	ed85 3a00 	vstr	s6, [r5]
 8019660:	441e      	add	r6, r3
 8019662:	ed85 7a01 	vstr	s14, [r5, #4]
 8019666:	441d      	add	r5, r3
 8019668:	f63f aee8 	bhi.w	801943c <arm_radix8_butterfly_f32+0x328>
 801966c:	9a06      	ldr	r2, [sp, #24]
 801966e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019670:	3201      	adds	r2, #1
 8019672:	4611      	mov	r1, r2
 8019674:	9206      	str	r2, [sp, #24]
 8019676:	9a07      	ldr	r2, [sp, #28]
 8019678:	4402      	add	r2, r0
 801967a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801967c:	9207      	str	r2, [sp, #28]
 801967e:	9a03      	ldr	r2, [sp, #12]
 8019680:	4402      	add	r2, r0
 8019682:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019684:	9203      	str	r2, [sp, #12]
 8019686:	9a04      	ldr	r2, [sp, #16]
 8019688:	4402      	add	r2, r0
 801968a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801968c:	9204      	str	r2, [sp, #16]
 801968e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019690:	4491      	add	r9, r2
 8019692:	9a05      	ldr	r2, [sp, #20]
 8019694:	4402      	add	r2, r0
 8019696:	9205      	str	r2, [sp, #20]
 8019698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801969a:	4490      	add	r8, r2
 801969c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801969e:	3208      	adds	r2, #8
 80196a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80196a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196a4:	3208      	adds	r2, #8
 80196a6:	920e      	str	r2, [sp, #56]	; 0x38
 80196a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196aa:	3208      	adds	r2, #8
 80196ac:	920d      	str	r2, [sp, #52]	; 0x34
 80196ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80196b0:	3208      	adds	r2, #8
 80196b2:	920c      	str	r2, [sp, #48]	; 0x30
 80196b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196b6:	3208      	adds	r2, #8
 80196b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80196ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196bc:	3208      	adds	r2, #8
 80196be:	920a      	str	r2, [sp, #40]	; 0x28
 80196c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196c2:	3208      	adds	r2, #8
 80196c4:	9209      	str	r2, [sp, #36]	; 0x24
 80196c6:	9a08      	ldr	r2, [sp, #32]
 80196c8:	3208      	adds	r2, #8
 80196ca:	9208      	str	r2, [sp, #32]
 80196cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80196ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80196d0:	4622      	mov	r2, r4
 80196d2:	4288      	cmp	r0, r1
 80196d4:	d005      	beq.n	80196e2 <arm_radix8_butterfly_f32+0x5ce>
 80196d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80196d8:	4621      	mov	r1, r4
 80196da:	4401      	add	r1, r0
 80196dc:	9807      	ldr	r0, [sp, #28]
 80196de:	9110      	str	r1, [sp, #64]	; 0x40
 80196e0:	e676      	b.n	80193d0 <arm_radix8_butterfly_f32+0x2bc>
 80196e2:	4683      	mov	fp, r0
 80196e4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 80196e8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80196ec:	e522      	b.n	8019134 <arm_radix8_butterfly_f32+0x20>
 80196ee:	b01d      	add	sp, #116	; 0x74
 80196f0:	ecbd 8b10 	vpop	{d8-d15}
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196f8 <__errno>:
 80196f8:	4b01      	ldr	r3, [pc, #4]	; (8019700 <__errno+0x8>)
 80196fa:	6818      	ldr	r0, [r3, #0]
 80196fc:	4770      	bx	lr
 80196fe:	bf00      	nop
 8019700:	20000050 	.word	0x20000050

08019704 <__libc_init_array>:
 8019704:	b570      	push	{r4, r5, r6, lr}
 8019706:	4d0d      	ldr	r5, [pc, #52]	; (801973c <__libc_init_array+0x38>)
 8019708:	4c0d      	ldr	r4, [pc, #52]	; (8019740 <__libc_init_array+0x3c>)
 801970a:	1b64      	subs	r4, r4, r5
 801970c:	10a4      	asrs	r4, r4, #2
 801970e:	2600      	movs	r6, #0
 8019710:	42a6      	cmp	r6, r4
 8019712:	d109      	bne.n	8019728 <__libc_init_array+0x24>
 8019714:	4d0b      	ldr	r5, [pc, #44]	; (8019744 <__libc_init_array+0x40>)
 8019716:	4c0c      	ldr	r4, [pc, #48]	; (8019748 <__libc_init_array+0x44>)
 8019718:	f001 fcf0 	bl	801b0fc <_init>
 801971c:	1b64      	subs	r4, r4, r5
 801971e:	10a4      	asrs	r4, r4, #2
 8019720:	2600      	movs	r6, #0
 8019722:	42a6      	cmp	r6, r4
 8019724:	d105      	bne.n	8019732 <__libc_init_array+0x2e>
 8019726:	bd70      	pop	{r4, r5, r6, pc}
 8019728:	f855 3b04 	ldr.w	r3, [r5], #4
 801972c:	4798      	blx	r3
 801972e:	3601      	adds	r6, #1
 8019730:	e7ee      	b.n	8019710 <__libc_init_array+0xc>
 8019732:	f855 3b04 	ldr.w	r3, [r5], #4
 8019736:	4798      	blx	r3
 8019738:	3601      	adds	r6, #1
 801973a:	e7f2      	b.n	8019722 <__libc_init_array+0x1e>
 801973c:	080306fc 	.word	0x080306fc
 8019740:	080306fc 	.word	0x080306fc
 8019744:	080306fc 	.word	0x080306fc
 8019748:	08030700 	.word	0x08030700

0801974c <malloc>:
 801974c:	4b02      	ldr	r3, [pc, #8]	; (8019758 <malloc+0xc>)
 801974e:	4601      	mov	r1, r0
 8019750:	6818      	ldr	r0, [r3, #0]
 8019752:	f000 b871 	b.w	8019838 <_malloc_r>
 8019756:	bf00      	nop
 8019758:	20000050 	.word	0x20000050

0801975c <free>:
 801975c:	4b02      	ldr	r3, [pc, #8]	; (8019768 <free+0xc>)
 801975e:	4601      	mov	r1, r0
 8019760:	6818      	ldr	r0, [r3, #0]
 8019762:	f000 b819 	b.w	8019798 <_free_r>
 8019766:	bf00      	nop
 8019768:	20000050 	.word	0x20000050

0801976c <memcpy>:
 801976c:	440a      	add	r2, r1
 801976e:	4291      	cmp	r1, r2
 8019770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019774:	d100      	bne.n	8019778 <memcpy+0xc>
 8019776:	4770      	bx	lr
 8019778:	b510      	push	{r4, lr}
 801977a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801977e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019782:	4291      	cmp	r1, r2
 8019784:	d1f9      	bne.n	801977a <memcpy+0xe>
 8019786:	bd10      	pop	{r4, pc}

08019788 <memset>:
 8019788:	4402      	add	r2, r0
 801978a:	4603      	mov	r3, r0
 801978c:	4293      	cmp	r3, r2
 801978e:	d100      	bne.n	8019792 <memset+0xa>
 8019790:	4770      	bx	lr
 8019792:	f803 1b01 	strb.w	r1, [r3], #1
 8019796:	e7f9      	b.n	801978c <memset+0x4>

08019798 <_free_r>:
 8019798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801979a:	2900      	cmp	r1, #0
 801979c:	d048      	beq.n	8019830 <_free_r+0x98>
 801979e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80197a2:	9001      	str	r0, [sp, #4]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	f1a1 0404 	sub.w	r4, r1, #4
 80197aa:	bfb8      	it	lt
 80197ac:	18e4      	addlt	r4, r4, r3
 80197ae:	f000 fc4f 	bl	801a050 <__malloc_lock>
 80197b2:	4a20      	ldr	r2, [pc, #128]	; (8019834 <_free_r+0x9c>)
 80197b4:	9801      	ldr	r0, [sp, #4]
 80197b6:	6813      	ldr	r3, [r2, #0]
 80197b8:	4615      	mov	r5, r2
 80197ba:	b933      	cbnz	r3, 80197ca <_free_r+0x32>
 80197bc:	6063      	str	r3, [r4, #4]
 80197be:	6014      	str	r4, [r2, #0]
 80197c0:	b003      	add	sp, #12
 80197c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197c6:	f000 bc49 	b.w	801a05c <__malloc_unlock>
 80197ca:	42a3      	cmp	r3, r4
 80197cc:	d90b      	bls.n	80197e6 <_free_r+0x4e>
 80197ce:	6821      	ldr	r1, [r4, #0]
 80197d0:	1862      	adds	r2, r4, r1
 80197d2:	4293      	cmp	r3, r2
 80197d4:	bf04      	itt	eq
 80197d6:	681a      	ldreq	r2, [r3, #0]
 80197d8:	685b      	ldreq	r3, [r3, #4]
 80197da:	6063      	str	r3, [r4, #4]
 80197dc:	bf04      	itt	eq
 80197de:	1852      	addeq	r2, r2, r1
 80197e0:	6022      	streq	r2, [r4, #0]
 80197e2:	602c      	str	r4, [r5, #0]
 80197e4:	e7ec      	b.n	80197c0 <_free_r+0x28>
 80197e6:	461a      	mov	r2, r3
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	b10b      	cbz	r3, 80197f0 <_free_r+0x58>
 80197ec:	42a3      	cmp	r3, r4
 80197ee:	d9fa      	bls.n	80197e6 <_free_r+0x4e>
 80197f0:	6811      	ldr	r1, [r2, #0]
 80197f2:	1855      	adds	r5, r2, r1
 80197f4:	42a5      	cmp	r5, r4
 80197f6:	d10b      	bne.n	8019810 <_free_r+0x78>
 80197f8:	6824      	ldr	r4, [r4, #0]
 80197fa:	4421      	add	r1, r4
 80197fc:	1854      	adds	r4, r2, r1
 80197fe:	42a3      	cmp	r3, r4
 8019800:	6011      	str	r1, [r2, #0]
 8019802:	d1dd      	bne.n	80197c0 <_free_r+0x28>
 8019804:	681c      	ldr	r4, [r3, #0]
 8019806:	685b      	ldr	r3, [r3, #4]
 8019808:	6053      	str	r3, [r2, #4]
 801980a:	4421      	add	r1, r4
 801980c:	6011      	str	r1, [r2, #0]
 801980e:	e7d7      	b.n	80197c0 <_free_r+0x28>
 8019810:	d902      	bls.n	8019818 <_free_r+0x80>
 8019812:	230c      	movs	r3, #12
 8019814:	6003      	str	r3, [r0, #0]
 8019816:	e7d3      	b.n	80197c0 <_free_r+0x28>
 8019818:	6825      	ldr	r5, [r4, #0]
 801981a:	1961      	adds	r1, r4, r5
 801981c:	428b      	cmp	r3, r1
 801981e:	bf04      	itt	eq
 8019820:	6819      	ldreq	r1, [r3, #0]
 8019822:	685b      	ldreq	r3, [r3, #4]
 8019824:	6063      	str	r3, [r4, #4]
 8019826:	bf04      	itt	eq
 8019828:	1949      	addeq	r1, r1, r5
 801982a:	6021      	streq	r1, [r4, #0]
 801982c:	6054      	str	r4, [r2, #4]
 801982e:	e7c7      	b.n	80197c0 <_free_r+0x28>
 8019830:	b003      	add	sp, #12
 8019832:	bd30      	pop	{r4, r5, pc}
 8019834:	200084f0 	.word	0x200084f0

08019838 <_malloc_r>:
 8019838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983a:	1ccd      	adds	r5, r1, #3
 801983c:	f025 0503 	bic.w	r5, r5, #3
 8019840:	3508      	adds	r5, #8
 8019842:	2d0c      	cmp	r5, #12
 8019844:	bf38      	it	cc
 8019846:	250c      	movcc	r5, #12
 8019848:	2d00      	cmp	r5, #0
 801984a:	4606      	mov	r6, r0
 801984c:	db01      	blt.n	8019852 <_malloc_r+0x1a>
 801984e:	42a9      	cmp	r1, r5
 8019850:	d903      	bls.n	801985a <_malloc_r+0x22>
 8019852:	230c      	movs	r3, #12
 8019854:	6033      	str	r3, [r6, #0]
 8019856:	2000      	movs	r0, #0
 8019858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801985a:	f000 fbf9 	bl	801a050 <__malloc_lock>
 801985e:	4921      	ldr	r1, [pc, #132]	; (80198e4 <_malloc_r+0xac>)
 8019860:	680a      	ldr	r2, [r1, #0]
 8019862:	4614      	mov	r4, r2
 8019864:	b99c      	cbnz	r4, 801988e <_malloc_r+0x56>
 8019866:	4f20      	ldr	r7, [pc, #128]	; (80198e8 <_malloc_r+0xb0>)
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	b923      	cbnz	r3, 8019876 <_malloc_r+0x3e>
 801986c:	4621      	mov	r1, r4
 801986e:	4630      	mov	r0, r6
 8019870:	f000 f8e0 	bl	8019a34 <_sbrk_r>
 8019874:	6038      	str	r0, [r7, #0]
 8019876:	4629      	mov	r1, r5
 8019878:	4630      	mov	r0, r6
 801987a:	f000 f8db 	bl	8019a34 <_sbrk_r>
 801987e:	1c43      	adds	r3, r0, #1
 8019880:	d123      	bne.n	80198ca <_malloc_r+0x92>
 8019882:	230c      	movs	r3, #12
 8019884:	6033      	str	r3, [r6, #0]
 8019886:	4630      	mov	r0, r6
 8019888:	f000 fbe8 	bl	801a05c <__malloc_unlock>
 801988c:	e7e3      	b.n	8019856 <_malloc_r+0x1e>
 801988e:	6823      	ldr	r3, [r4, #0]
 8019890:	1b5b      	subs	r3, r3, r5
 8019892:	d417      	bmi.n	80198c4 <_malloc_r+0x8c>
 8019894:	2b0b      	cmp	r3, #11
 8019896:	d903      	bls.n	80198a0 <_malloc_r+0x68>
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	441c      	add	r4, r3
 801989c:	6025      	str	r5, [r4, #0]
 801989e:	e004      	b.n	80198aa <_malloc_r+0x72>
 80198a0:	6863      	ldr	r3, [r4, #4]
 80198a2:	42a2      	cmp	r2, r4
 80198a4:	bf0c      	ite	eq
 80198a6:	600b      	streq	r3, [r1, #0]
 80198a8:	6053      	strne	r3, [r2, #4]
 80198aa:	4630      	mov	r0, r6
 80198ac:	f000 fbd6 	bl	801a05c <__malloc_unlock>
 80198b0:	f104 000b 	add.w	r0, r4, #11
 80198b4:	1d23      	adds	r3, r4, #4
 80198b6:	f020 0007 	bic.w	r0, r0, #7
 80198ba:	1ac2      	subs	r2, r0, r3
 80198bc:	d0cc      	beq.n	8019858 <_malloc_r+0x20>
 80198be:	1a1b      	subs	r3, r3, r0
 80198c0:	50a3      	str	r3, [r4, r2]
 80198c2:	e7c9      	b.n	8019858 <_malloc_r+0x20>
 80198c4:	4622      	mov	r2, r4
 80198c6:	6864      	ldr	r4, [r4, #4]
 80198c8:	e7cc      	b.n	8019864 <_malloc_r+0x2c>
 80198ca:	1cc4      	adds	r4, r0, #3
 80198cc:	f024 0403 	bic.w	r4, r4, #3
 80198d0:	42a0      	cmp	r0, r4
 80198d2:	d0e3      	beq.n	801989c <_malloc_r+0x64>
 80198d4:	1a21      	subs	r1, r4, r0
 80198d6:	4630      	mov	r0, r6
 80198d8:	f000 f8ac 	bl	8019a34 <_sbrk_r>
 80198dc:	3001      	adds	r0, #1
 80198de:	d1dd      	bne.n	801989c <_malloc_r+0x64>
 80198e0:	e7cf      	b.n	8019882 <_malloc_r+0x4a>
 80198e2:	bf00      	nop
 80198e4:	200084f0 	.word	0x200084f0
 80198e8:	200084f4 	.word	0x200084f4

080198ec <iprintf>:
 80198ec:	b40f      	push	{r0, r1, r2, r3}
 80198ee:	4b0a      	ldr	r3, [pc, #40]	; (8019918 <iprintf+0x2c>)
 80198f0:	b513      	push	{r0, r1, r4, lr}
 80198f2:	681c      	ldr	r4, [r3, #0]
 80198f4:	b124      	cbz	r4, 8019900 <iprintf+0x14>
 80198f6:	69a3      	ldr	r3, [r4, #24]
 80198f8:	b913      	cbnz	r3, 8019900 <iprintf+0x14>
 80198fa:	4620      	mov	r0, r4
 80198fc:	f000 faa4 	bl	8019e48 <__sinit>
 8019900:	ab05      	add	r3, sp, #20
 8019902:	9a04      	ldr	r2, [sp, #16]
 8019904:	68a1      	ldr	r1, [r4, #8]
 8019906:	9301      	str	r3, [sp, #4]
 8019908:	4620      	mov	r0, r4
 801990a:	f000 fd33 	bl	801a374 <_vfiprintf_r>
 801990e:	b002      	add	sp, #8
 8019910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019914:	b004      	add	sp, #16
 8019916:	4770      	bx	lr
 8019918:	20000050 	.word	0x20000050

0801991c <putchar>:
 801991c:	4b09      	ldr	r3, [pc, #36]	; (8019944 <putchar+0x28>)
 801991e:	b513      	push	{r0, r1, r4, lr}
 8019920:	681c      	ldr	r4, [r3, #0]
 8019922:	4601      	mov	r1, r0
 8019924:	b134      	cbz	r4, 8019934 <putchar+0x18>
 8019926:	69a3      	ldr	r3, [r4, #24]
 8019928:	b923      	cbnz	r3, 8019934 <putchar+0x18>
 801992a:	9001      	str	r0, [sp, #4]
 801992c:	4620      	mov	r0, r4
 801992e:	f000 fa8b 	bl	8019e48 <__sinit>
 8019932:	9901      	ldr	r1, [sp, #4]
 8019934:	68a2      	ldr	r2, [r4, #8]
 8019936:	4620      	mov	r0, r4
 8019938:	b002      	add	sp, #8
 801993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801993e:	f000 bfdd 	b.w	801a8fc <_putc_r>
 8019942:	bf00      	nop
 8019944:	20000050 	.word	0x20000050

08019948 <_puts_r>:
 8019948:	b570      	push	{r4, r5, r6, lr}
 801994a:	460e      	mov	r6, r1
 801994c:	4605      	mov	r5, r0
 801994e:	b118      	cbz	r0, 8019958 <_puts_r+0x10>
 8019950:	6983      	ldr	r3, [r0, #24]
 8019952:	b90b      	cbnz	r3, 8019958 <_puts_r+0x10>
 8019954:	f000 fa78 	bl	8019e48 <__sinit>
 8019958:	69ab      	ldr	r3, [r5, #24]
 801995a:	68ac      	ldr	r4, [r5, #8]
 801995c:	b913      	cbnz	r3, 8019964 <_puts_r+0x1c>
 801995e:	4628      	mov	r0, r5
 8019960:	f000 fa72 	bl	8019e48 <__sinit>
 8019964:	4b2c      	ldr	r3, [pc, #176]	; (8019a18 <_puts_r+0xd0>)
 8019966:	429c      	cmp	r4, r3
 8019968:	d120      	bne.n	80199ac <_puts_r+0x64>
 801996a:	686c      	ldr	r4, [r5, #4]
 801996c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801996e:	07db      	lsls	r3, r3, #31
 8019970:	d405      	bmi.n	801997e <_puts_r+0x36>
 8019972:	89a3      	ldrh	r3, [r4, #12]
 8019974:	0598      	lsls	r0, r3, #22
 8019976:	d402      	bmi.n	801997e <_puts_r+0x36>
 8019978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801997a:	f000 fb03 	bl	8019f84 <__retarget_lock_acquire_recursive>
 801997e:	89a3      	ldrh	r3, [r4, #12]
 8019980:	0719      	lsls	r1, r3, #28
 8019982:	d51d      	bpl.n	80199c0 <_puts_r+0x78>
 8019984:	6923      	ldr	r3, [r4, #16]
 8019986:	b1db      	cbz	r3, 80199c0 <_puts_r+0x78>
 8019988:	3e01      	subs	r6, #1
 801998a:	68a3      	ldr	r3, [r4, #8]
 801998c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019990:	3b01      	subs	r3, #1
 8019992:	60a3      	str	r3, [r4, #8]
 8019994:	bb39      	cbnz	r1, 80199e6 <_puts_r+0x9e>
 8019996:	2b00      	cmp	r3, #0
 8019998:	da38      	bge.n	8019a0c <_puts_r+0xc4>
 801999a:	4622      	mov	r2, r4
 801999c:	210a      	movs	r1, #10
 801999e:	4628      	mov	r0, r5
 80199a0:	f000 f878 	bl	8019a94 <__swbuf_r>
 80199a4:	3001      	adds	r0, #1
 80199a6:	d011      	beq.n	80199cc <_puts_r+0x84>
 80199a8:	250a      	movs	r5, #10
 80199aa:	e011      	b.n	80199d0 <_puts_r+0x88>
 80199ac:	4b1b      	ldr	r3, [pc, #108]	; (8019a1c <_puts_r+0xd4>)
 80199ae:	429c      	cmp	r4, r3
 80199b0:	d101      	bne.n	80199b6 <_puts_r+0x6e>
 80199b2:	68ac      	ldr	r4, [r5, #8]
 80199b4:	e7da      	b.n	801996c <_puts_r+0x24>
 80199b6:	4b1a      	ldr	r3, [pc, #104]	; (8019a20 <_puts_r+0xd8>)
 80199b8:	429c      	cmp	r4, r3
 80199ba:	bf08      	it	eq
 80199bc:	68ec      	ldreq	r4, [r5, #12]
 80199be:	e7d5      	b.n	801996c <_puts_r+0x24>
 80199c0:	4621      	mov	r1, r4
 80199c2:	4628      	mov	r0, r5
 80199c4:	f000 f8b8 	bl	8019b38 <__swsetup_r>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d0dd      	beq.n	8019988 <_puts_r+0x40>
 80199cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80199d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199d2:	07da      	lsls	r2, r3, #31
 80199d4:	d405      	bmi.n	80199e2 <_puts_r+0x9a>
 80199d6:	89a3      	ldrh	r3, [r4, #12]
 80199d8:	059b      	lsls	r3, r3, #22
 80199da:	d402      	bmi.n	80199e2 <_puts_r+0x9a>
 80199dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199de:	f000 fad2 	bl	8019f86 <__retarget_lock_release_recursive>
 80199e2:	4628      	mov	r0, r5
 80199e4:	bd70      	pop	{r4, r5, r6, pc}
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	da04      	bge.n	80199f4 <_puts_r+0xac>
 80199ea:	69a2      	ldr	r2, [r4, #24]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	dc06      	bgt.n	80199fe <_puts_r+0xb6>
 80199f0:	290a      	cmp	r1, #10
 80199f2:	d004      	beq.n	80199fe <_puts_r+0xb6>
 80199f4:	6823      	ldr	r3, [r4, #0]
 80199f6:	1c5a      	adds	r2, r3, #1
 80199f8:	6022      	str	r2, [r4, #0]
 80199fa:	7019      	strb	r1, [r3, #0]
 80199fc:	e7c5      	b.n	801998a <_puts_r+0x42>
 80199fe:	4622      	mov	r2, r4
 8019a00:	4628      	mov	r0, r5
 8019a02:	f000 f847 	bl	8019a94 <__swbuf_r>
 8019a06:	3001      	adds	r0, #1
 8019a08:	d1bf      	bne.n	801998a <_puts_r+0x42>
 8019a0a:	e7df      	b.n	80199cc <_puts_r+0x84>
 8019a0c:	6823      	ldr	r3, [r4, #0]
 8019a0e:	250a      	movs	r5, #10
 8019a10:	1c5a      	adds	r2, r3, #1
 8019a12:	6022      	str	r2, [r4, #0]
 8019a14:	701d      	strb	r5, [r3, #0]
 8019a16:	e7db      	b.n	80199d0 <_puts_r+0x88>
 8019a18:	08030680 	.word	0x08030680
 8019a1c:	080306a0 	.word	0x080306a0
 8019a20:	08030660 	.word	0x08030660

08019a24 <puts>:
 8019a24:	4b02      	ldr	r3, [pc, #8]	; (8019a30 <puts+0xc>)
 8019a26:	4601      	mov	r1, r0
 8019a28:	6818      	ldr	r0, [r3, #0]
 8019a2a:	f7ff bf8d 	b.w	8019948 <_puts_r>
 8019a2e:	bf00      	nop
 8019a30:	20000050 	.word	0x20000050

08019a34 <_sbrk_r>:
 8019a34:	b538      	push	{r3, r4, r5, lr}
 8019a36:	4d06      	ldr	r5, [pc, #24]	; (8019a50 <_sbrk_r+0x1c>)
 8019a38:	2300      	movs	r3, #0
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	4608      	mov	r0, r1
 8019a3e:	602b      	str	r3, [r5, #0]
 8019a40:	f7ea fa50 	bl	8003ee4 <_sbrk>
 8019a44:	1c43      	adds	r3, r0, #1
 8019a46:	d102      	bne.n	8019a4e <_sbrk_r+0x1a>
 8019a48:	682b      	ldr	r3, [r5, #0]
 8019a4a:	b103      	cbz	r3, 8019a4e <_sbrk_r+0x1a>
 8019a4c:	6023      	str	r3, [r4, #0]
 8019a4e:	bd38      	pop	{r3, r4, r5, pc}
 8019a50:	2004adcc 	.word	0x2004adcc

08019a54 <siprintf>:
 8019a54:	b40e      	push	{r1, r2, r3}
 8019a56:	b500      	push	{lr}
 8019a58:	b09c      	sub	sp, #112	; 0x70
 8019a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8019a5c:	9002      	str	r0, [sp, #8]
 8019a5e:	9006      	str	r0, [sp, #24]
 8019a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019a64:	4809      	ldr	r0, [pc, #36]	; (8019a8c <siprintf+0x38>)
 8019a66:	9107      	str	r1, [sp, #28]
 8019a68:	9104      	str	r1, [sp, #16]
 8019a6a:	4909      	ldr	r1, [pc, #36]	; (8019a90 <siprintf+0x3c>)
 8019a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a70:	9105      	str	r1, [sp, #20]
 8019a72:	6800      	ldr	r0, [r0, #0]
 8019a74:	9301      	str	r3, [sp, #4]
 8019a76:	a902      	add	r1, sp, #8
 8019a78:	f000 fb52 	bl	801a120 <_svfiprintf_r>
 8019a7c:	9b02      	ldr	r3, [sp, #8]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	701a      	strb	r2, [r3, #0]
 8019a82:	b01c      	add	sp, #112	; 0x70
 8019a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a88:	b003      	add	sp, #12
 8019a8a:	4770      	bx	lr
 8019a8c:	20000050 	.word	0x20000050
 8019a90:	ffff0208 	.word	0xffff0208

08019a94 <__swbuf_r>:
 8019a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a96:	460e      	mov	r6, r1
 8019a98:	4614      	mov	r4, r2
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	b118      	cbz	r0, 8019aa6 <__swbuf_r+0x12>
 8019a9e:	6983      	ldr	r3, [r0, #24]
 8019aa0:	b90b      	cbnz	r3, 8019aa6 <__swbuf_r+0x12>
 8019aa2:	f000 f9d1 	bl	8019e48 <__sinit>
 8019aa6:	4b21      	ldr	r3, [pc, #132]	; (8019b2c <__swbuf_r+0x98>)
 8019aa8:	429c      	cmp	r4, r3
 8019aaa:	d12b      	bne.n	8019b04 <__swbuf_r+0x70>
 8019aac:	686c      	ldr	r4, [r5, #4]
 8019aae:	69a3      	ldr	r3, [r4, #24]
 8019ab0:	60a3      	str	r3, [r4, #8]
 8019ab2:	89a3      	ldrh	r3, [r4, #12]
 8019ab4:	071a      	lsls	r2, r3, #28
 8019ab6:	d52f      	bpl.n	8019b18 <__swbuf_r+0x84>
 8019ab8:	6923      	ldr	r3, [r4, #16]
 8019aba:	b36b      	cbz	r3, 8019b18 <__swbuf_r+0x84>
 8019abc:	6923      	ldr	r3, [r4, #16]
 8019abe:	6820      	ldr	r0, [r4, #0]
 8019ac0:	1ac0      	subs	r0, r0, r3
 8019ac2:	6963      	ldr	r3, [r4, #20]
 8019ac4:	b2f6      	uxtb	r6, r6
 8019ac6:	4283      	cmp	r3, r0
 8019ac8:	4637      	mov	r7, r6
 8019aca:	dc04      	bgt.n	8019ad6 <__swbuf_r+0x42>
 8019acc:	4621      	mov	r1, r4
 8019ace:	4628      	mov	r0, r5
 8019ad0:	f000 f926 	bl	8019d20 <_fflush_r>
 8019ad4:	bb30      	cbnz	r0, 8019b24 <__swbuf_r+0x90>
 8019ad6:	68a3      	ldr	r3, [r4, #8]
 8019ad8:	3b01      	subs	r3, #1
 8019ada:	60a3      	str	r3, [r4, #8]
 8019adc:	6823      	ldr	r3, [r4, #0]
 8019ade:	1c5a      	adds	r2, r3, #1
 8019ae0:	6022      	str	r2, [r4, #0]
 8019ae2:	701e      	strb	r6, [r3, #0]
 8019ae4:	6963      	ldr	r3, [r4, #20]
 8019ae6:	3001      	adds	r0, #1
 8019ae8:	4283      	cmp	r3, r0
 8019aea:	d004      	beq.n	8019af6 <__swbuf_r+0x62>
 8019aec:	89a3      	ldrh	r3, [r4, #12]
 8019aee:	07db      	lsls	r3, r3, #31
 8019af0:	d506      	bpl.n	8019b00 <__swbuf_r+0x6c>
 8019af2:	2e0a      	cmp	r6, #10
 8019af4:	d104      	bne.n	8019b00 <__swbuf_r+0x6c>
 8019af6:	4621      	mov	r1, r4
 8019af8:	4628      	mov	r0, r5
 8019afa:	f000 f911 	bl	8019d20 <_fflush_r>
 8019afe:	b988      	cbnz	r0, 8019b24 <__swbuf_r+0x90>
 8019b00:	4638      	mov	r0, r7
 8019b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b04:	4b0a      	ldr	r3, [pc, #40]	; (8019b30 <__swbuf_r+0x9c>)
 8019b06:	429c      	cmp	r4, r3
 8019b08:	d101      	bne.n	8019b0e <__swbuf_r+0x7a>
 8019b0a:	68ac      	ldr	r4, [r5, #8]
 8019b0c:	e7cf      	b.n	8019aae <__swbuf_r+0x1a>
 8019b0e:	4b09      	ldr	r3, [pc, #36]	; (8019b34 <__swbuf_r+0xa0>)
 8019b10:	429c      	cmp	r4, r3
 8019b12:	bf08      	it	eq
 8019b14:	68ec      	ldreq	r4, [r5, #12]
 8019b16:	e7ca      	b.n	8019aae <__swbuf_r+0x1a>
 8019b18:	4621      	mov	r1, r4
 8019b1a:	4628      	mov	r0, r5
 8019b1c:	f000 f80c 	bl	8019b38 <__swsetup_r>
 8019b20:	2800      	cmp	r0, #0
 8019b22:	d0cb      	beq.n	8019abc <__swbuf_r+0x28>
 8019b24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019b28:	e7ea      	b.n	8019b00 <__swbuf_r+0x6c>
 8019b2a:	bf00      	nop
 8019b2c:	08030680 	.word	0x08030680
 8019b30:	080306a0 	.word	0x080306a0
 8019b34:	08030660 	.word	0x08030660

08019b38 <__swsetup_r>:
 8019b38:	4b32      	ldr	r3, [pc, #200]	; (8019c04 <__swsetup_r+0xcc>)
 8019b3a:	b570      	push	{r4, r5, r6, lr}
 8019b3c:	681d      	ldr	r5, [r3, #0]
 8019b3e:	4606      	mov	r6, r0
 8019b40:	460c      	mov	r4, r1
 8019b42:	b125      	cbz	r5, 8019b4e <__swsetup_r+0x16>
 8019b44:	69ab      	ldr	r3, [r5, #24]
 8019b46:	b913      	cbnz	r3, 8019b4e <__swsetup_r+0x16>
 8019b48:	4628      	mov	r0, r5
 8019b4a:	f000 f97d 	bl	8019e48 <__sinit>
 8019b4e:	4b2e      	ldr	r3, [pc, #184]	; (8019c08 <__swsetup_r+0xd0>)
 8019b50:	429c      	cmp	r4, r3
 8019b52:	d10f      	bne.n	8019b74 <__swsetup_r+0x3c>
 8019b54:	686c      	ldr	r4, [r5, #4]
 8019b56:	89a3      	ldrh	r3, [r4, #12]
 8019b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b5c:	0719      	lsls	r1, r3, #28
 8019b5e:	d42c      	bmi.n	8019bba <__swsetup_r+0x82>
 8019b60:	06dd      	lsls	r5, r3, #27
 8019b62:	d411      	bmi.n	8019b88 <__swsetup_r+0x50>
 8019b64:	2309      	movs	r3, #9
 8019b66:	6033      	str	r3, [r6, #0]
 8019b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b6c:	81a3      	strh	r3, [r4, #12]
 8019b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b72:	e03e      	b.n	8019bf2 <__swsetup_r+0xba>
 8019b74:	4b25      	ldr	r3, [pc, #148]	; (8019c0c <__swsetup_r+0xd4>)
 8019b76:	429c      	cmp	r4, r3
 8019b78:	d101      	bne.n	8019b7e <__swsetup_r+0x46>
 8019b7a:	68ac      	ldr	r4, [r5, #8]
 8019b7c:	e7eb      	b.n	8019b56 <__swsetup_r+0x1e>
 8019b7e:	4b24      	ldr	r3, [pc, #144]	; (8019c10 <__swsetup_r+0xd8>)
 8019b80:	429c      	cmp	r4, r3
 8019b82:	bf08      	it	eq
 8019b84:	68ec      	ldreq	r4, [r5, #12]
 8019b86:	e7e6      	b.n	8019b56 <__swsetup_r+0x1e>
 8019b88:	0758      	lsls	r0, r3, #29
 8019b8a:	d512      	bpl.n	8019bb2 <__swsetup_r+0x7a>
 8019b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b8e:	b141      	cbz	r1, 8019ba2 <__swsetup_r+0x6a>
 8019b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b94:	4299      	cmp	r1, r3
 8019b96:	d002      	beq.n	8019b9e <__swsetup_r+0x66>
 8019b98:	4630      	mov	r0, r6
 8019b9a:	f7ff fdfd 	bl	8019798 <_free_r>
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8019ba2:	89a3      	ldrh	r3, [r4, #12]
 8019ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ba8:	81a3      	strh	r3, [r4, #12]
 8019baa:	2300      	movs	r3, #0
 8019bac:	6063      	str	r3, [r4, #4]
 8019bae:	6923      	ldr	r3, [r4, #16]
 8019bb0:	6023      	str	r3, [r4, #0]
 8019bb2:	89a3      	ldrh	r3, [r4, #12]
 8019bb4:	f043 0308 	orr.w	r3, r3, #8
 8019bb8:	81a3      	strh	r3, [r4, #12]
 8019bba:	6923      	ldr	r3, [r4, #16]
 8019bbc:	b94b      	cbnz	r3, 8019bd2 <__swsetup_r+0x9a>
 8019bbe:	89a3      	ldrh	r3, [r4, #12]
 8019bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019bc8:	d003      	beq.n	8019bd2 <__swsetup_r+0x9a>
 8019bca:	4621      	mov	r1, r4
 8019bcc:	4630      	mov	r0, r6
 8019bce:	f000 f9ff 	bl	8019fd0 <__smakebuf_r>
 8019bd2:	89a0      	ldrh	r0, [r4, #12]
 8019bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bd8:	f010 0301 	ands.w	r3, r0, #1
 8019bdc:	d00a      	beq.n	8019bf4 <__swsetup_r+0xbc>
 8019bde:	2300      	movs	r3, #0
 8019be0:	60a3      	str	r3, [r4, #8]
 8019be2:	6963      	ldr	r3, [r4, #20]
 8019be4:	425b      	negs	r3, r3
 8019be6:	61a3      	str	r3, [r4, #24]
 8019be8:	6923      	ldr	r3, [r4, #16]
 8019bea:	b943      	cbnz	r3, 8019bfe <__swsetup_r+0xc6>
 8019bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019bf0:	d1ba      	bne.n	8019b68 <__swsetup_r+0x30>
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	0781      	lsls	r1, r0, #30
 8019bf6:	bf58      	it	pl
 8019bf8:	6963      	ldrpl	r3, [r4, #20]
 8019bfa:	60a3      	str	r3, [r4, #8]
 8019bfc:	e7f4      	b.n	8019be8 <__swsetup_r+0xb0>
 8019bfe:	2000      	movs	r0, #0
 8019c00:	e7f7      	b.n	8019bf2 <__swsetup_r+0xba>
 8019c02:	bf00      	nop
 8019c04:	20000050 	.word	0x20000050
 8019c08:	08030680 	.word	0x08030680
 8019c0c:	080306a0 	.word	0x080306a0
 8019c10:	08030660 	.word	0x08030660

08019c14 <__sflush_r>:
 8019c14:	898a      	ldrh	r2, [r1, #12]
 8019c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1a:	4605      	mov	r5, r0
 8019c1c:	0710      	lsls	r0, r2, #28
 8019c1e:	460c      	mov	r4, r1
 8019c20:	d458      	bmi.n	8019cd4 <__sflush_r+0xc0>
 8019c22:	684b      	ldr	r3, [r1, #4]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	dc05      	bgt.n	8019c34 <__sflush_r+0x20>
 8019c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	dc02      	bgt.n	8019c34 <__sflush_r+0x20>
 8019c2e:	2000      	movs	r0, #0
 8019c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c36:	2e00      	cmp	r6, #0
 8019c38:	d0f9      	beq.n	8019c2e <__sflush_r+0x1a>
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c40:	682f      	ldr	r7, [r5, #0]
 8019c42:	602b      	str	r3, [r5, #0]
 8019c44:	d032      	beq.n	8019cac <__sflush_r+0x98>
 8019c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c48:	89a3      	ldrh	r3, [r4, #12]
 8019c4a:	075a      	lsls	r2, r3, #29
 8019c4c:	d505      	bpl.n	8019c5a <__sflush_r+0x46>
 8019c4e:	6863      	ldr	r3, [r4, #4]
 8019c50:	1ac0      	subs	r0, r0, r3
 8019c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c54:	b10b      	cbz	r3, 8019c5a <__sflush_r+0x46>
 8019c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c58:	1ac0      	subs	r0, r0, r3
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c60:	6a21      	ldr	r1, [r4, #32]
 8019c62:	4628      	mov	r0, r5
 8019c64:	47b0      	blx	r6
 8019c66:	1c43      	adds	r3, r0, #1
 8019c68:	89a3      	ldrh	r3, [r4, #12]
 8019c6a:	d106      	bne.n	8019c7a <__sflush_r+0x66>
 8019c6c:	6829      	ldr	r1, [r5, #0]
 8019c6e:	291d      	cmp	r1, #29
 8019c70:	d82c      	bhi.n	8019ccc <__sflush_r+0xb8>
 8019c72:	4a2a      	ldr	r2, [pc, #168]	; (8019d1c <__sflush_r+0x108>)
 8019c74:	40ca      	lsrs	r2, r1
 8019c76:	07d6      	lsls	r6, r2, #31
 8019c78:	d528      	bpl.n	8019ccc <__sflush_r+0xb8>
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	6062      	str	r2, [r4, #4]
 8019c7e:	04d9      	lsls	r1, r3, #19
 8019c80:	6922      	ldr	r2, [r4, #16]
 8019c82:	6022      	str	r2, [r4, #0]
 8019c84:	d504      	bpl.n	8019c90 <__sflush_r+0x7c>
 8019c86:	1c42      	adds	r2, r0, #1
 8019c88:	d101      	bne.n	8019c8e <__sflush_r+0x7a>
 8019c8a:	682b      	ldr	r3, [r5, #0]
 8019c8c:	b903      	cbnz	r3, 8019c90 <__sflush_r+0x7c>
 8019c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8019c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c92:	602f      	str	r7, [r5, #0]
 8019c94:	2900      	cmp	r1, #0
 8019c96:	d0ca      	beq.n	8019c2e <__sflush_r+0x1a>
 8019c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c9c:	4299      	cmp	r1, r3
 8019c9e:	d002      	beq.n	8019ca6 <__sflush_r+0x92>
 8019ca0:	4628      	mov	r0, r5
 8019ca2:	f7ff fd79 	bl	8019798 <_free_r>
 8019ca6:	2000      	movs	r0, #0
 8019ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8019caa:	e7c1      	b.n	8019c30 <__sflush_r+0x1c>
 8019cac:	6a21      	ldr	r1, [r4, #32]
 8019cae:	2301      	movs	r3, #1
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	47b0      	blx	r6
 8019cb4:	1c41      	adds	r1, r0, #1
 8019cb6:	d1c7      	bne.n	8019c48 <__sflush_r+0x34>
 8019cb8:	682b      	ldr	r3, [r5, #0]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d0c4      	beq.n	8019c48 <__sflush_r+0x34>
 8019cbe:	2b1d      	cmp	r3, #29
 8019cc0:	d001      	beq.n	8019cc6 <__sflush_r+0xb2>
 8019cc2:	2b16      	cmp	r3, #22
 8019cc4:	d101      	bne.n	8019cca <__sflush_r+0xb6>
 8019cc6:	602f      	str	r7, [r5, #0]
 8019cc8:	e7b1      	b.n	8019c2e <__sflush_r+0x1a>
 8019cca:	89a3      	ldrh	r3, [r4, #12]
 8019ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cd0:	81a3      	strh	r3, [r4, #12]
 8019cd2:	e7ad      	b.n	8019c30 <__sflush_r+0x1c>
 8019cd4:	690f      	ldr	r7, [r1, #16]
 8019cd6:	2f00      	cmp	r7, #0
 8019cd8:	d0a9      	beq.n	8019c2e <__sflush_r+0x1a>
 8019cda:	0793      	lsls	r3, r2, #30
 8019cdc:	680e      	ldr	r6, [r1, #0]
 8019cde:	bf08      	it	eq
 8019ce0:	694b      	ldreq	r3, [r1, #20]
 8019ce2:	600f      	str	r7, [r1, #0]
 8019ce4:	bf18      	it	ne
 8019ce6:	2300      	movne	r3, #0
 8019ce8:	eba6 0807 	sub.w	r8, r6, r7
 8019cec:	608b      	str	r3, [r1, #8]
 8019cee:	f1b8 0f00 	cmp.w	r8, #0
 8019cf2:	dd9c      	ble.n	8019c2e <__sflush_r+0x1a>
 8019cf4:	6a21      	ldr	r1, [r4, #32]
 8019cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019cf8:	4643      	mov	r3, r8
 8019cfa:	463a      	mov	r2, r7
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	47b0      	blx	r6
 8019d00:	2800      	cmp	r0, #0
 8019d02:	dc06      	bgt.n	8019d12 <__sflush_r+0xfe>
 8019d04:	89a3      	ldrh	r3, [r4, #12]
 8019d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d0a:	81a3      	strh	r3, [r4, #12]
 8019d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d10:	e78e      	b.n	8019c30 <__sflush_r+0x1c>
 8019d12:	4407      	add	r7, r0
 8019d14:	eba8 0800 	sub.w	r8, r8, r0
 8019d18:	e7e9      	b.n	8019cee <__sflush_r+0xda>
 8019d1a:	bf00      	nop
 8019d1c:	20400001 	.word	0x20400001

08019d20 <_fflush_r>:
 8019d20:	b538      	push	{r3, r4, r5, lr}
 8019d22:	690b      	ldr	r3, [r1, #16]
 8019d24:	4605      	mov	r5, r0
 8019d26:	460c      	mov	r4, r1
 8019d28:	b913      	cbnz	r3, 8019d30 <_fflush_r+0x10>
 8019d2a:	2500      	movs	r5, #0
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	bd38      	pop	{r3, r4, r5, pc}
 8019d30:	b118      	cbz	r0, 8019d3a <_fflush_r+0x1a>
 8019d32:	6983      	ldr	r3, [r0, #24]
 8019d34:	b90b      	cbnz	r3, 8019d3a <_fflush_r+0x1a>
 8019d36:	f000 f887 	bl	8019e48 <__sinit>
 8019d3a:	4b14      	ldr	r3, [pc, #80]	; (8019d8c <_fflush_r+0x6c>)
 8019d3c:	429c      	cmp	r4, r3
 8019d3e:	d11b      	bne.n	8019d78 <_fflush_r+0x58>
 8019d40:	686c      	ldr	r4, [r5, #4]
 8019d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d0ef      	beq.n	8019d2a <_fflush_r+0xa>
 8019d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d4c:	07d0      	lsls	r0, r2, #31
 8019d4e:	d404      	bmi.n	8019d5a <_fflush_r+0x3a>
 8019d50:	0599      	lsls	r1, r3, #22
 8019d52:	d402      	bmi.n	8019d5a <_fflush_r+0x3a>
 8019d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d56:	f000 f915 	bl	8019f84 <__retarget_lock_acquire_recursive>
 8019d5a:	4628      	mov	r0, r5
 8019d5c:	4621      	mov	r1, r4
 8019d5e:	f7ff ff59 	bl	8019c14 <__sflush_r>
 8019d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d64:	07da      	lsls	r2, r3, #31
 8019d66:	4605      	mov	r5, r0
 8019d68:	d4e0      	bmi.n	8019d2c <_fflush_r+0xc>
 8019d6a:	89a3      	ldrh	r3, [r4, #12]
 8019d6c:	059b      	lsls	r3, r3, #22
 8019d6e:	d4dd      	bmi.n	8019d2c <_fflush_r+0xc>
 8019d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d72:	f000 f908 	bl	8019f86 <__retarget_lock_release_recursive>
 8019d76:	e7d9      	b.n	8019d2c <_fflush_r+0xc>
 8019d78:	4b05      	ldr	r3, [pc, #20]	; (8019d90 <_fflush_r+0x70>)
 8019d7a:	429c      	cmp	r4, r3
 8019d7c:	d101      	bne.n	8019d82 <_fflush_r+0x62>
 8019d7e:	68ac      	ldr	r4, [r5, #8]
 8019d80:	e7df      	b.n	8019d42 <_fflush_r+0x22>
 8019d82:	4b04      	ldr	r3, [pc, #16]	; (8019d94 <_fflush_r+0x74>)
 8019d84:	429c      	cmp	r4, r3
 8019d86:	bf08      	it	eq
 8019d88:	68ec      	ldreq	r4, [r5, #12]
 8019d8a:	e7da      	b.n	8019d42 <_fflush_r+0x22>
 8019d8c:	08030680 	.word	0x08030680
 8019d90:	080306a0 	.word	0x080306a0
 8019d94:	08030660 	.word	0x08030660

08019d98 <std>:
 8019d98:	2300      	movs	r3, #0
 8019d9a:	b510      	push	{r4, lr}
 8019d9c:	4604      	mov	r4, r0
 8019d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8019da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019da6:	6083      	str	r3, [r0, #8]
 8019da8:	8181      	strh	r1, [r0, #12]
 8019daa:	6643      	str	r3, [r0, #100]	; 0x64
 8019dac:	81c2      	strh	r2, [r0, #14]
 8019dae:	6183      	str	r3, [r0, #24]
 8019db0:	4619      	mov	r1, r3
 8019db2:	2208      	movs	r2, #8
 8019db4:	305c      	adds	r0, #92	; 0x5c
 8019db6:	f7ff fce7 	bl	8019788 <memset>
 8019dba:	4b05      	ldr	r3, [pc, #20]	; (8019dd0 <std+0x38>)
 8019dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8019dbe:	4b05      	ldr	r3, [pc, #20]	; (8019dd4 <std+0x3c>)
 8019dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019dc2:	4b05      	ldr	r3, [pc, #20]	; (8019dd8 <std+0x40>)
 8019dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019dc6:	4b05      	ldr	r3, [pc, #20]	; (8019ddc <std+0x44>)
 8019dc8:	6224      	str	r4, [r4, #32]
 8019dca:	6323      	str	r3, [r4, #48]	; 0x30
 8019dcc:	bd10      	pop	{r4, pc}
 8019dce:	bf00      	nop
 8019dd0:	0801a98d 	.word	0x0801a98d
 8019dd4:	0801a9af 	.word	0x0801a9af
 8019dd8:	0801a9e7 	.word	0x0801a9e7
 8019ddc:	0801aa0b 	.word	0x0801aa0b

08019de0 <_cleanup_r>:
 8019de0:	4901      	ldr	r1, [pc, #4]	; (8019de8 <_cleanup_r+0x8>)
 8019de2:	f000 b8af 	b.w	8019f44 <_fwalk_reent>
 8019de6:	bf00      	nop
 8019de8:	08019d21 	.word	0x08019d21

08019dec <__sfmoreglue>:
 8019dec:	b570      	push	{r4, r5, r6, lr}
 8019dee:	1e4a      	subs	r2, r1, #1
 8019df0:	2568      	movs	r5, #104	; 0x68
 8019df2:	4355      	muls	r5, r2
 8019df4:	460e      	mov	r6, r1
 8019df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019dfa:	f7ff fd1d 	bl	8019838 <_malloc_r>
 8019dfe:	4604      	mov	r4, r0
 8019e00:	b140      	cbz	r0, 8019e14 <__sfmoreglue+0x28>
 8019e02:	2100      	movs	r1, #0
 8019e04:	e9c0 1600 	strd	r1, r6, [r0]
 8019e08:	300c      	adds	r0, #12
 8019e0a:	60a0      	str	r0, [r4, #8]
 8019e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019e10:	f7ff fcba 	bl	8019788 <memset>
 8019e14:	4620      	mov	r0, r4
 8019e16:	bd70      	pop	{r4, r5, r6, pc}

08019e18 <__sfp_lock_acquire>:
 8019e18:	4801      	ldr	r0, [pc, #4]	; (8019e20 <__sfp_lock_acquire+0x8>)
 8019e1a:	f000 b8b3 	b.w	8019f84 <__retarget_lock_acquire_recursive>
 8019e1e:	bf00      	nop
 8019e20:	2004adc8 	.word	0x2004adc8

08019e24 <__sfp_lock_release>:
 8019e24:	4801      	ldr	r0, [pc, #4]	; (8019e2c <__sfp_lock_release+0x8>)
 8019e26:	f000 b8ae 	b.w	8019f86 <__retarget_lock_release_recursive>
 8019e2a:	bf00      	nop
 8019e2c:	2004adc8 	.word	0x2004adc8

08019e30 <__sinit_lock_acquire>:
 8019e30:	4801      	ldr	r0, [pc, #4]	; (8019e38 <__sinit_lock_acquire+0x8>)
 8019e32:	f000 b8a7 	b.w	8019f84 <__retarget_lock_acquire_recursive>
 8019e36:	bf00      	nop
 8019e38:	2004adc3 	.word	0x2004adc3

08019e3c <__sinit_lock_release>:
 8019e3c:	4801      	ldr	r0, [pc, #4]	; (8019e44 <__sinit_lock_release+0x8>)
 8019e3e:	f000 b8a2 	b.w	8019f86 <__retarget_lock_release_recursive>
 8019e42:	bf00      	nop
 8019e44:	2004adc3 	.word	0x2004adc3

08019e48 <__sinit>:
 8019e48:	b510      	push	{r4, lr}
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	f7ff fff0 	bl	8019e30 <__sinit_lock_acquire>
 8019e50:	69a3      	ldr	r3, [r4, #24]
 8019e52:	b11b      	cbz	r3, 8019e5c <__sinit+0x14>
 8019e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e58:	f7ff bff0 	b.w	8019e3c <__sinit_lock_release>
 8019e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019e60:	6523      	str	r3, [r4, #80]	; 0x50
 8019e62:	4b13      	ldr	r3, [pc, #76]	; (8019eb0 <__sinit+0x68>)
 8019e64:	4a13      	ldr	r2, [pc, #76]	; (8019eb4 <__sinit+0x6c>)
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8019e6a:	42a3      	cmp	r3, r4
 8019e6c:	bf04      	itt	eq
 8019e6e:	2301      	moveq	r3, #1
 8019e70:	61a3      	streq	r3, [r4, #24]
 8019e72:	4620      	mov	r0, r4
 8019e74:	f000 f820 	bl	8019eb8 <__sfp>
 8019e78:	6060      	str	r0, [r4, #4]
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	f000 f81c 	bl	8019eb8 <__sfp>
 8019e80:	60a0      	str	r0, [r4, #8]
 8019e82:	4620      	mov	r0, r4
 8019e84:	f000 f818 	bl	8019eb8 <__sfp>
 8019e88:	2200      	movs	r2, #0
 8019e8a:	60e0      	str	r0, [r4, #12]
 8019e8c:	2104      	movs	r1, #4
 8019e8e:	6860      	ldr	r0, [r4, #4]
 8019e90:	f7ff ff82 	bl	8019d98 <std>
 8019e94:	68a0      	ldr	r0, [r4, #8]
 8019e96:	2201      	movs	r2, #1
 8019e98:	2109      	movs	r1, #9
 8019e9a:	f7ff ff7d 	bl	8019d98 <std>
 8019e9e:	68e0      	ldr	r0, [r4, #12]
 8019ea0:	2202      	movs	r2, #2
 8019ea2:	2112      	movs	r1, #18
 8019ea4:	f7ff ff78 	bl	8019d98 <std>
 8019ea8:	2301      	movs	r3, #1
 8019eaa:	61a3      	str	r3, [r4, #24]
 8019eac:	e7d2      	b.n	8019e54 <__sinit+0xc>
 8019eae:	bf00      	nop
 8019eb0:	0803065c 	.word	0x0803065c
 8019eb4:	08019de1 	.word	0x08019de1

08019eb8 <__sfp>:
 8019eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eba:	4607      	mov	r7, r0
 8019ebc:	f7ff ffac 	bl	8019e18 <__sfp_lock_acquire>
 8019ec0:	4b1e      	ldr	r3, [pc, #120]	; (8019f3c <__sfp+0x84>)
 8019ec2:	681e      	ldr	r6, [r3, #0]
 8019ec4:	69b3      	ldr	r3, [r6, #24]
 8019ec6:	b913      	cbnz	r3, 8019ece <__sfp+0x16>
 8019ec8:	4630      	mov	r0, r6
 8019eca:	f7ff ffbd 	bl	8019e48 <__sinit>
 8019ece:	3648      	adds	r6, #72	; 0x48
 8019ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019ed4:	3b01      	subs	r3, #1
 8019ed6:	d503      	bpl.n	8019ee0 <__sfp+0x28>
 8019ed8:	6833      	ldr	r3, [r6, #0]
 8019eda:	b30b      	cbz	r3, 8019f20 <__sfp+0x68>
 8019edc:	6836      	ldr	r6, [r6, #0]
 8019ede:	e7f7      	b.n	8019ed0 <__sfp+0x18>
 8019ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ee4:	b9d5      	cbnz	r5, 8019f1c <__sfp+0x64>
 8019ee6:	4b16      	ldr	r3, [pc, #88]	; (8019f40 <__sfp+0x88>)
 8019ee8:	60e3      	str	r3, [r4, #12]
 8019eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019eee:	6665      	str	r5, [r4, #100]	; 0x64
 8019ef0:	f000 f847 	bl	8019f82 <__retarget_lock_init_recursive>
 8019ef4:	f7ff ff96 	bl	8019e24 <__sfp_lock_release>
 8019ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019f00:	6025      	str	r5, [r4, #0]
 8019f02:	61a5      	str	r5, [r4, #24]
 8019f04:	2208      	movs	r2, #8
 8019f06:	4629      	mov	r1, r5
 8019f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019f0c:	f7ff fc3c 	bl	8019788 <memset>
 8019f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019f18:	4620      	mov	r0, r4
 8019f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f1c:	3468      	adds	r4, #104	; 0x68
 8019f1e:	e7d9      	b.n	8019ed4 <__sfp+0x1c>
 8019f20:	2104      	movs	r1, #4
 8019f22:	4638      	mov	r0, r7
 8019f24:	f7ff ff62 	bl	8019dec <__sfmoreglue>
 8019f28:	4604      	mov	r4, r0
 8019f2a:	6030      	str	r0, [r6, #0]
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	d1d5      	bne.n	8019edc <__sfp+0x24>
 8019f30:	f7ff ff78 	bl	8019e24 <__sfp_lock_release>
 8019f34:	230c      	movs	r3, #12
 8019f36:	603b      	str	r3, [r7, #0]
 8019f38:	e7ee      	b.n	8019f18 <__sfp+0x60>
 8019f3a:	bf00      	nop
 8019f3c:	0803065c 	.word	0x0803065c
 8019f40:	ffff0001 	.word	0xffff0001

08019f44 <_fwalk_reent>:
 8019f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f48:	4606      	mov	r6, r0
 8019f4a:	4688      	mov	r8, r1
 8019f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f50:	2700      	movs	r7, #0
 8019f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f56:	f1b9 0901 	subs.w	r9, r9, #1
 8019f5a:	d505      	bpl.n	8019f68 <_fwalk_reent+0x24>
 8019f5c:	6824      	ldr	r4, [r4, #0]
 8019f5e:	2c00      	cmp	r4, #0
 8019f60:	d1f7      	bne.n	8019f52 <_fwalk_reent+0xe>
 8019f62:	4638      	mov	r0, r7
 8019f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f68:	89ab      	ldrh	r3, [r5, #12]
 8019f6a:	2b01      	cmp	r3, #1
 8019f6c:	d907      	bls.n	8019f7e <_fwalk_reent+0x3a>
 8019f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f72:	3301      	adds	r3, #1
 8019f74:	d003      	beq.n	8019f7e <_fwalk_reent+0x3a>
 8019f76:	4629      	mov	r1, r5
 8019f78:	4630      	mov	r0, r6
 8019f7a:	47c0      	blx	r8
 8019f7c:	4307      	orrs	r7, r0
 8019f7e:	3568      	adds	r5, #104	; 0x68
 8019f80:	e7e9      	b.n	8019f56 <_fwalk_reent+0x12>

08019f82 <__retarget_lock_init_recursive>:
 8019f82:	4770      	bx	lr

08019f84 <__retarget_lock_acquire_recursive>:
 8019f84:	4770      	bx	lr

08019f86 <__retarget_lock_release_recursive>:
 8019f86:	4770      	bx	lr

08019f88 <__swhatbuf_r>:
 8019f88:	b570      	push	{r4, r5, r6, lr}
 8019f8a:	460e      	mov	r6, r1
 8019f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f90:	2900      	cmp	r1, #0
 8019f92:	b096      	sub	sp, #88	; 0x58
 8019f94:	4614      	mov	r4, r2
 8019f96:	461d      	mov	r5, r3
 8019f98:	da07      	bge.n	8019faa <__swhatbuf_r+0x22>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	602b      	str	r3, [r5, #0]
 8019f9e:	89b3      	ldrh	r3, [r6, #12]
 8019fa0:	061a      	lsls	r2, r3, #24
 8019fa2:	d410      	bmi.n	8019fc6 <__swhatbuf_r+0x3e>
 8019fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fa8:	e00e      	b.n	8019fc8 <__swhatbuf_r+0x40>
 8019faa:	466a      	mov	r2, sp
 8019fac:	f000 fd54 	bl	801aa58 <_fstat_r>
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	dbf2      	blt.n	8019f9a <__swhatbuf_r+0x12>
 8019fb4:	9a01      	ldr	r2, [sp, #4]
 8019fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019fbe:	425a      	negs	r2, r3
 8019fc0:	415a      	adcs	r2, r3
 8019fc2:	602a      	str	r2, [r5, #0]
 8019fc4:	e7ee      	b.n	8019fa4 <__swhatbuf_r+0x1c>
 8019fc6:	2340      	movs	r3, #64	; 0x40
 8019fc8:	2000      	movs	r0, #0
 8019fca:	6023      	str	r3, [r4, #0]
 8019fcc:	b016      	add	sp, #88	; 0x58
 8019fce:	bd70      	pop	{r4, r5, r6, pc}

08019fd0 <__smakebuf_r>:
 8019fd0:	898b      	ldrh	r3, [r1, #12]
 8019fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019fd4:	079d      	lsls	r5, r3, #30
 8019fd6:	4606      	mov	r6, r0
 8019fd8:	460c      	mov	r4, r1
 8019fda:	d507      	bpl.n	8019fec <__smakebuf_r+0x1c>
 8019fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019fe0:	6023      	str	r3, [r4, #0]
 8019fe2:	6123      	str	r3, [r4, #16]
 8019fe4:	2301      	movs	r3, #1
 8019fe6:	6163      	str	r3, [r4, #20]
 8019fe8:	b002      	add	sp, #8
 8019fea:	bd70      	pop	{r4, r5, r6, pc}
 8019fec:	ab01      	add	r3, sp, #4
 8019fee:	466a      	mov	r2, sp
 8019ff0:	f7ff ffca 	bl	8019f88 <__swhatbuf_r>
 8019ff4:	9900      	ldr	r1, [sp, #0]
 8019ff6:	4605      	mov	r5, r0
 8019ff8:	4630      	mov	r0, r6
 8019ffa:	f7ff fc1d 	bl	8019838 <_malloc_r>
 8019ffe:	b948      	cbnz	r0, 801a014 <__smakebuf_r+0x44>
 801a000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a004:	059a      	lsls	r2, r3, #22
 801a006:	d4ef      	bmi.n	8019fe8 <__smakebuf_r+0x18>
 801a008:	f023 0303 	bic.w	r3, r3, #3
 801a00c:	f043 0302 	orr.w	r3, r3, #2
 801a010:	81a3      	strh	r3, [r4, #12]
 801a012:	e7e3      	b.n	8019fdc <__smakebuf_r+0xc>
 801a014:	4b0d      	ldr	r3, [pc, #52]	; (801a04c <__smakebuf_r+0x7c>)
 801a016:	62b3      	str	r3, [r6, #40]	; 0x28
 801a018:	89a3      	ldrh	r3, [r4, #12]
 801a01a:	6020      	str	r0, [r4, #0]
 801a01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a020:	81a3      	strh	r3, [r4, #12]
 801a022:	9b00      	ldr	r3, [sp, #0]
 801a024:	6163      	str	r3, [r4, #20]
 801a026:	9b01      	ldr	r3, [sp, #4]
 801a028:	6120      	str	r0, [r4, #16]
 801a02a:	b15b      	cbz	r3, 801a044 <__smakebuf_r+0x74>
 801a02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a030:	4630      	mov	r0, r6
 801a032:	f000 fd23 	bl	801aa7c <_isatty_r>
 801a036:	b128      	cbz	r0, 801a044 <__smakebuf_r+0x74>
 801a038:	89a3      	ldrh	r3, [r4, #12]
 801a03a:	f023 0303 	bic.w	r3, r3, #3
 801a03e:	f043 0301 	orr.w	r3, r3, #1
 801a042:	81a3      	strh	r3, [r4, #12]
 801a044:	89a0      	ldrh	r0, [r4, #12]
 801a046:	4305      	orrs	r5, r0
 801a048:	81a5      	strh	r5, [r4, #12]
 801a04a:	e7cd      	b.n	8019fe8 <__smakebuf_r+0x18>
 801a04c:	08019de1 	.word	0x08019de1

0801a050 <__malloc_lock>:
 801a050:	4801      	ldr	r0, [pc, #4]	; (801a058 <__malloc_lock+0x8>)
 801a052:	f7ff bf97 	b.w	8019f84 <__retarget_lock_acquire_recursive>
 801a056:	bf00      	nop
 801a058:	2004adc4 	.word	0x2004adc4

0801a05c <__malloc_unlock>:
 801a05c:	4801      	ldr	r0, [pc, #4]	; (801a064 <__malloc_unlock+0x8>)
 801a05e:	f7ff bf92 	b.w	8019f86 <__retarget_lock_release_recursive>
 801a062:	bf00      	nop
 801a064:	2004adc4 	.word	0x2004adc4

0801a068 <__ssputs_r>:
 801a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a06c:	688e      	ldr	r6, [r1, #8]
 801a06e:	429e      	cmp	r6, r3
 801a070:	4682      	mov	sl, r0
 801a072:	460c      	mov	r4, r1
 801a074:	4690      	mov	r8, r2
 801a076:	461f      	mov	r7, r3
 801a078:	d838      	bhi.n	801a0ec <__ssputs_r+0x84>
 801a07a:	898a      	ldrh	r2, [r1, #12]
 801a07c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a080:	d032      	beq.n	801a0e8 <__ssputs_r+0x80>
 801a082:	6825      	ldr	r5, [r4, #0]
 801a084:	6909      	ldr	r1, [r1, #16]
 801a086:	eba5 0901 	sub.w	r9, r5, r1
 801a08a:	6965      	ldr	r5, [r4, #20]
 801a08c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a094:	3301      	adds	r3, #1
 801a096:	444b      	add	r3, r9
 801a098:	106d      	asrs	r5, r5, #1
 801a09a:	429d      	cmp	r5, r3
 801a09c:	bf38      	it	cc
 801a09e:	461d      	movcc	r5, r3
 801a0a0:	0553      	lsls	r3, r2, #21
 801a0a2:	d531      	bpl.n	801a108 <__ssputs_r+0xa0>
 801a0a4:	4629      	mov	r1, r5
 801a0a6:	f7ff fbc7 	bl	8019838 <_malloc_r>
 801a0aa:	4606      	mov	r6, r0
 801a0ac:	b950      	cbnz	r0, 801a0c4 <__ssputs_r+0x5c>
 801a0ae:	230c      	movs	r3, #12
 801a0b0:	f8ca 3000 	str.w	r3, [sl]
 801a0b4:	89a3      	ldrh	r3, [r4, #12]
 801a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0ba:	81a3      	strh	r3, [r4, #12]
 801a0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0c4:	6921      	ldr	r1, [r4, #16]
 801a0c6:	464a      	mov	r2, r9
 801a0c8:	f7ff fb50 	bl	801976c <memcpy>
 801a0cc:	89a3      	ldrh	r3, [r4, #12]
 801a0ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a0d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a0d6:	81a3      	strh	r3, [r4, #12]
 801a0d8:	6126      	str	r6, [r4, #16]
 801a0da:	6165      	str	r5, [r4, #20]
 801a0dc:	444e      	add	r6, r9
 801a0de:	eba5 0509 	sub.w	r5, r5, r9
 801a0e2:	6026      	str	r6, [r4, #0]
 801a0e4:	60a5      	str	r5, [r4, #8]
 801a0e6:	463e      	mov	r6, r7
 801a0e8:	42be      	cmp	r6, r7
 801a0ea:	d900      	bls.n	801a0ee <__ssputs_r+0x86>
 801a0ec:	463e      	mov	r6, r7
 801a0ee:	4632      	mov	r2, r6
 801a0f0:	6820      	ldr	r0, [r4, #0]
 801a0f2:	4641      	mov	r1, r8
 801a0f4:	f000 fce4 	bl	801aac0 <memmove>
 801a0f8:	68a3      	ldr	r3, [r4, #8]
 801a0fa:	6822      	ldr	r2, [r4, #0]
 801a0fc:	1b9b      	subs	r3, r3, r6
 801a0fe:	4432      	add	r2, r6
 801a100:	60a3      	str	r3, [r4, #8]
 801a102:	6022      	str	r2, [r4, #0]
 801a104:	2000      	movs	r0, #0
 801a106:	e7db      	b.n	801a0c0 <__ssputs_r+0x58>
 801a108:	462a      	mov	r2, r5
 801a10a:	f000 fcf3 	bl	801aaf4 <_realloc_r>
 801a10e:	4606      	mov	r6, r0
 801a110:	2800      	cmp	r0, #0
 801a112:	d1e1      	bne.n	801a0d8 <__ssputs_r+0x70>
 801a114:	6921      	ldr	r1, [r4, #16]
 801a116:	4650      	mov	r0, sl
 801a118:	f7ff fb3e 	bl	8019798 <_free_r>
 801a11c:	e7c7      	b.n	801a0ae <__ssputs_r+0x46>
	...

0801a120 <_svfiprintf_r>:
 801a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a124:	4698      	mov	r8, r3
 801a126:	898b      	ldrh	r3, [r1, #12]
 801a128:	061b      	lsls	r3, r3, #24
 801a12a:	b09d      	sub	sp, #116	; 0x74
 801a12c:	4607      	mov	r7, r0
 801a12e:	460d      	mov	r5, r1
 801a130:	4614      	mov	r4, r2
 801a132:	d50e      	bpl.n	801a152 <_svfiprintf_r+0x32>
 801a134:	690b      	ldr	r3, [r1, #16]
 801a136:	b963      	cbnz	r3, 801a152 <_svfiprintf_r+0x32>
 801a138:	2140      	movs	r1, #64	; 0x40
 801a13a:	f7ff fb7d 	bl	8019838 <_malloc_r>
 801a13e:	6028      	str	r0, [r5, #0]
 801a140:	6128      	str	r0, [r5, #16]
 801a142:	b920      	cbnz	r0, 801a14e <_svfiprintf_r+0x2e>
 801a144:	230c      	movs	r3, #12
 801a146:	603b      	str	r3, [r7, #0]
 801a148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a14c:	e0d1      	b.n	801a2f2 <_svfiprintf_r+0x1d2>
 801a14e:	2340      	movs	r3, #64	; 0x40
 801a150:	616b      	str	r3, [r5, #20]
 801a152:	2300      	movs	r3, #0
 801a154:	9309      	str	r3, [sp, #36]	; 0x24
 801a156:	2320      	movs	r3, #32
 801a158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a15c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a160:	2330      	movs	r3, #48	; 0x30
 801a162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a30c <_svfiprintf_r+0x1ec>
 801a166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a16a:	f04f 0901 	mov.w	r9, #1
 801a16e:	4623      	mov	r3, r4
 801a170:	469a      	mov	sl, r3
 801a172:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a176:	b10a      	cbz	r2, 801a17c <_svfiprintf_r+0x5c>
 801a178:	2a25      	cmp	r2, #37	; 0x25
 801a17a:	d1f9      	bne.n	801a170 <_svfiprintf_r+0x50>
 801a17c:	ebba 0b04 	subs.w	fp, sl, r4
 801a180:	d00b      	beq.n	801a19a <_svfiprintf_r+0x7a>
 801a182:	465b      	mov	r3, fp
 801a184:	4622      	mov	r2, r4
 801a186:	4629      	mov	r1, r5
 801a188:	4638      	mov	r0, r7
 801a18a:	f7ff ff6d 	bl	801a068 <__ssputs_r>
 801a18e:	3001      	adds	r0, #1
 801a190:	f000 80aa 	beq.w	801a2e8 <_svfiprintf_r+0x1c8>
 801a194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a196:	445a      	add	r2, fp
 801a198:	9209      	str	r2, [sp, #36]	; 0x24
 801a19a:	f89a 3000 	ldrb.w	r3, [sl]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	f000 80a2 	beq.w	801a2e8 <_svfiprintf_r+0x1c8>
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1ae:	f10a 0a01 	add.w	sl, sl, #1
 801a1b2:	9304      	str	r3, [sp, #16]
 801a1b4:	9307      	str	r3, [sp, #28]
 801a1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a1ba:	931a      	str	r3, [sp, #104]	; 0x68
 801a1bc:	4654      	mov	r4, sl
 801a1be:	2205      	movs	r2, #5
 801a1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1c4:	4851      	ldr	r0, [pc, #324]	; (801a30c <_svfiprintf_r+0x1ec>)
 801a1c6:	f7e6 f883 	bl	80002d0 <memchr>
 801a1ca:	9a04      	ldr	r2, [sp, #16]
 801a1cc:	b9d8      	cbnz	r0, 801a206 <_svfiprintf_r+0xe6>
 801a1ce:	06d0      	lsls	r0, r2, #27
 801a1d0:	bf44      	itt	mi
 801a1d2:	2320      	movmi	r3, #32
 801a1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1d8:	0711      	lsls	r1, r2, #28
 801a1da:	bf44      	itt	mi
 801a1dc:	232b      	movmi	r3, #43	; 0x2b
 801a1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1e2:	f89a 3000 	ldrb.w	r3, [sl]
 801a1e6:	2b2a      	cmp	r3, #42	; 0x2a
 801a1e8:	d015      	beq.n	801a216 <_svfiprintf_r+0xf6>
 801a1ea:	9a07      	ldr	r2, [sp, #28]
 801a1ec:	4654      	mov	r4, sl
 801a1ee:	2000      	movs	r0, #0
 801a1f0:	f04f 0c0a 	mov.w	ip, #10
 801a1f4:	4621      	mov	r1, r4
 801a1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1fa:	3b30      	subs	r3, #48	; 0x30
 801a1fc:	2b09      	cmp	r3, #9
 801a1fe:	d94e      	bls.n	801a29e <_svfiprintf_r+0x17e>
 801a200:	b1b0      	cbz	r0, 801a230 <_svfiprintf_r+0x110>
 801a202:	9207      	str	r2, [sp, #28]
 801a204:	e014      	b.n	801a230 <_svfiprintf_r+0x110>
 801a206:	eba0 0308 	sub.w	r3, r0, r8
 801a20a:	fa09 f303 	lsl.w	r3, r9, r3
 801a20e:	4313      	orrs	r3, r2
 801a210:	9304      	str	r3, [sp, #16]
 801a212:	46a2      	mov	sl, r4
 801a214:	e7d2      	b.n	801a1bc <_svfiprintf_r+0x9c>
 801a216:	9b03      	ldr	r3, [sp, #12]
 801a218:	1d19      	adds	r1, r3, #4
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	9103      	str	r1, [sp, #12]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	bfbb      	ittet	lt
 801a222:	425b      	neglt	r3, r3
 801a224:	f042 0202 	orrlt.w	r2, r2, #2
 801a228:	9307      	strge	r3, [sp, #28]
 801a22a:	9307      	strlt	r3, [sp, #28]
 801a22c:	bfb8      	it	lt
 801a22e:	9204      	strlt	r2, [sp, #16]
 801a230:	7823      	ldrb	r3, [r4, #0]
 801a232:	2b2e      	cmp	r3, #46	; 0x2e
 801a234:	d10c      	bne.n	801a250 <_svfiprintf_r+0x130>
 801a236:	7863      	ldrb	r3, [r4, #1]
 801a238:	2b2a      	cmp	r3, #42	; 0x2a
 801a23a:	d135      	bne.n	801a2a8 <_svfiprintf_r+0x188>
 801a23c:	9b03      	ldr	r3, [sp, #12]
 801a23e:	1d1a      	adds	r2, r3, #4
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	9203      	str	r2, [sp, #12]
 801a244:	2b00      	cmp	r3, #0
 801a246:	bfb8      	it	lt
 801a248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a24c:	3402      	adds	r4, #2
 801a24e:	9305      	str	r3, [sp, #20]
 801a250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a31c <_svfiprintf_r+0x1fc>
 801a254:	7821      	ldrb	r1, [r4, #0]
 801a256:	2203      	movs	r2, #3
 801a258:	4650      	mov	r0, sl
 801a25a:	f7e6 f839 	bl	80002d0 <memchr>
 801a25e:	b140      	cbz	r0, 801a272 <_svfiprintf_r+0x152>
 801a260:	2340      	movs	r3, #64	; 0x40
 801a262:	eba0 000a 	sub.w	r0, r0, sl
 801a266:	fa03 f000 	lsl.w	r0, r3, r0
 801a26a:	9b04      	ldr	r3, [sp, #16]
 801a26c:	4303      	orrs	r3, r0
 801a26e:	3401      	adds	r4, #1
 801a270:	9304      	str	r3, [sp, #16]
 801a272:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a276:	4826      	ldr	r0, [pc, #152]	; (801a310 <_svfiprintf_r+0x1f0>)
 801a278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a27c:	2206      	movs	r2, #6
 801a27e:	f7e6 f827 	bl	80002d0 <memchr>
 801a282:	2800      	cmp	r0, #0
 801a284:	d038      	beq.n	801a2f8 <_svfiprintf_r+0x1d8>
 801a286:	4b23      	ldr	r3, [pc, #140]	; (801a314 <_svfiprintf_r+0x1f4>)
 801a288:	bb1b      	cbnz	r3, 801a2d2 <_svfiprintf_r+0x1b2>
 801a28a:	9b03      	ldr	r3, [sp, #12]
 801a28c:	3307      	adds	r3, #7
 801a28e:	f023 0307 	bic.w	r3, r3, #7
 801a292:	3308      	adds	r3, #8
 801a294:	9303      	str	r3, [sp, #12]
 801a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a298:	4433      	add	r3, r6
 801a29a:	9309      	str	r3, [sp, #36]	; 0x24
 801a29c:	e767      	b.n	801a16e <_svfiprintf_r+0x4e>
 801a29e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2a2:	460c      	mov	r4, r1
 801a2a4:	2001      	movs	r0, #1
 801a2a6:	e7a5      	b.n	801a1f4 <_svfiprintf_r+0xd4>
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	3401      	adds	r4, #1
 801a2ac:	9305      	str	r3, [sp, #20]
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	f04f 0c0a 	mov.w	ip, #10
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2ba:	3a30      	subs	r2, #48	; 0x30
 801a2bc:	2a09      	cmp	r2, #9
 801a2be:	d903      	bls.n	801a2c8 <_svfiprintf_r+0x1a8>
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d0c5      	beq.n	801a250 <_svfiprintf_r+0x130>
 801a2c4:	9105      	str	r1, [sp, #20]
 801a2c6:	e7c3      	b.n	801a250 <_svfiprintf_r+0x130>
 801a2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a2cc:	4604      	mov	r4, r0
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	e7f0      	b.n	801a2b4 <_svfiprintf_r+0x194>
 801a2d2:	ab03      	add	r3, sp, #12
 801a2d4:	9300      	str	r3, [sp, #0]
 801a2d6:	462a      	mov	r2, r5
 801a2d8:	4b0f      	ldr	r3, [pc, #60]	; (801a318 <_svfiprintf_r+0x1f8>)
 801a2da:	a904      	add	r1, sp, #16
 801a2dc:	4638      	mov	r0, r7
 801a2de:	f3af 8000 	nop.w
 801a2e2:	1c42      	adds	r2, r0, #1
 801a2e4:	4606      	mov	r6, r0
 801a2e6:	d1d6      	bne.n	801a296 <_svfiprintf_r+0x176>
 801a2e8:	89ab      	ldrh	r3, [r5, #12]
 801a2ea:	065b      	lsls	r3, r3, #25
 801a2ec:	f53f af2c 	bmi.w	801a148 <_svfiprintf_r+0x28>
 801a2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2f2:	b01d      	add	sp, #116	; 0x74
 801a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2f8:	ab03      	add	r3, sp, #12
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	462a      	mov	r2, r5
 801a2fe:	4b06      	ldr	r3, [pc, #24]	; (801a318 <_svfiprintf_r+0x1f8>)
 801a300:	a904      	add	r1, sp, #16
 801a302:	4638      	mov	r0, r7
 801a304:	f000 f9d4 	bl	801a6b0 <_printf_i>
 801a308:	e7eb      	b.n	801a2e2 <_svfiprintf_r+0x1c2>
 801a30a:	bf00      	nop
 801a30c:	080306c0 	.word	0x080306c0
 801a310:	080306ca 	.word	0x080306ca
 801a314:	00000000 	.word	0x00000000
 801a318:	0801a069 	.word	0x0801a069
 801a31c:	080306c6 	.word	0x080306c6

0801a320 <__sfputc_r>:
 801a320:	6893      	ldr	r3, [r2, #8]
 801a322:	3b01      	subs	r3, #1
 801a324:	2b00      	cmp	r3, #0
 801a326:	b410      	push	{r4}
 801a328:	6093      	str	r3, [r2, #8]
 801a32a:	da08      	bge.n	801a33e <__sfputc_r+0x1e>
 801a32c:	6994      	ldr	r4, [r2, #24]
 801a32e:	42a3      	cmp	r3, r4
 801a330:	db01      	blt.n	801a336 <__sfputc_r+0x16>
 801a332:	290a      	cmp	r1, #10
 801a334:	d103      	bne.n	801a33e <__sfputc_r+0x1e>
 801a336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a33a:	f7ff bbab 	b.w	8019a94 <__swbuf_r>
 801a33e:	6813      	ldr	r3, [r2, #0]
 801a340:	1c58      	adds	r0, r3, #1
 801a342:	6010      	str	r0, [r2, #0]
 801a344:	7019      	strb	r1, [r3, #0]
 801a346:	4608      	mov	r0, r1
 801a348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a34c:	4770      	bx	lr

0801a34e <__sfputs_r>:
 801a34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a350:	4606      	mov	r6, r0
 801a352:	460f      	mov	r7, r1
 801a354:	4614      	mov	r4, r2
 801a356:	18d5      	adds	r5, r2, r3
 801a358:	42ac      	cmp	r4, r5
 801a35a:	d101      	bne.n	801a360 <__sfputs_r+0x12>
 801a35c:	2000      	movs	r0, #0
 801a35e:	e007      	b.n	801a370 <__sfputs_r+0x22>
 801a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a364:	463a      	mov	r2, r7
 801a366:	4630      	mov	r0, r6
 801a368:	f7ff ffda 	bl	801a320 <__sfputc_r>
 801a36c:	1c43      	adds	r3, r0, #1
 801a36e:	d1f3      	bne.n	801a358 <__sfputs_r+0xa>
 801a370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a374 <_vfiprintf_r>:
 801a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a378:	460d      	mov	r5, r1
 801a37a:	b09d      	sub	sp, #116	; 0x74
 801a37c:	4614      	mov	r4, r2
 801a37e:	4698      	mov	r8, r3
 801a380:	4606      	mov	r6, r0
 801a382:	b118      	cbz	r0, 801a38c <_vfiprintf_r+0x18>
 801a384:	6983      	ldr	r3, [r0, #24]
 801a386:	b90b      	cbnz	r3, 801a38c <_vfiprintf_r+0x18>
 801a388:	f7ff fd5e 	bl	8019e48 <__sinit>
 801a38c:	4b89      	ldr	r3, [pc, #548]	; (801a5b4 <_vfiprintf_r+0x240>)
 801a38e:	429d      	cmp	r5, r3
 801a390:	d11b      	bne.n	801a3ca <_vfiprintf_r+0x56>
 801a392:	6875      	ldr	r5, [r6, #4]
 801a394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a396:	07d9      	lsls	r1, r3, #31
 801a398:	d405      	bmi.n	801a3a6 <_vfiprintf_r+0x32>
 801a39a:	89ab      	ldrh	r3, [r5, #12]
 801a39c:	059a      	lsls	r2, r3, #22
 801a39e:	d402      	bmi.n	801a3a6 <_vfiprintf_r+0x32>
 801a3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3a2:	f7ff fdef 	bl	8019f84 <__retarget_lock_acquire_recursive>
 801a3a6:	89ab      	ldrh	r3, [r5, #12]
 801a3a8:	071b      	lsls	r3, r3, #28
 801a3aa:	d501      	bpl.n	801a3b0 <_vfiprintf_r+0x3c>
 801a3ac:	692b      	ldr	r3, [r5, #16]
 801a3ae:	b9eb      	cbnz	r3, 801a3ec <_vfiprintf_r+0x78>
 801a3b0:	4629      	mov	r1, r5
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f7ff fbc0 	bl	8019b38 <__swsetup_r>
 801a3b8:	b1c0      	cbz	r0, 801a3ec <_vfiprintf_r+0x78>
 801a3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3bc:	07dc      	lsls	r4, r3, #31
 801a3be:	d50e      	bpl.n	801a3de <_vfiprintf_r+0x6a>
 801a3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3c4:	b01d      	add	sp, #116	; 0x74
 801a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ca:	4b7b      	ldr	r3, [pc, #492]	; (801a5b8 <_vfiprintf_r+0x244>)
 801a3cc:	429d      	cmp	r5, r3
 801a3ce:	d101      	bne.n	801a3d4 <_vfiprintf_r+0x60>
 801a3d0:	68b5      	ldr	r5, [r6, #8]
 801a3d2:	e7df      	b.n	801a394 <_vfiprintf_r+0x20>
 801a3d4:	4b79      	ldr	r3, [pc, #484]	; (801a5bc <_vfiprintf_r+0x248>)
 801a3d6:	429d      	cmp	r5, r3
 801a3d8:	bf08      	it	eq
 801a3da:	68f5      	ldreq	r5, [r6, #12]
 801a3dc:	e7da      	b.n	801a394 <_vfiprintf_r+0x20>
 801a3de:	89ab      	ldrh	r3, [r5, #12]
 801a3e0:	0598      	lsls	r0, r3, #22
 801a3e2:	d4ed      	bmi.n	801a3c0 <_vfiprintf_r+0x4c>
 801a3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3e6:	f7ff fdce 	bl	8019f86 <__retarget_lock_release_recursive>
 801a3ea:	e7e9      	b.n	801a3c0 <_vfiprintf_r+0x4c>
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a3f0:	2320      	movs	r3, #32
 801a3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3fa:	2330      	movs	r3, #48	; 0x30
 801a3fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a5c0 <_vfiprintf_r+0x24c>
 801a400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a404:	f04f 0901 	mov.w	r9, #1
 801a408:	4623      	mov	r3, r4
 801a40a:	469a      	mov	sl, r3
 801a40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a410:	b10a      	cbz	r2, 801a416 <_vfiprintf_r+0xa2>
 801a412:	2a25      	cmp	r2, #37	; 0x25
 801a414:	d1f9      	bne.n	801a40a <_vfiprintf_r+0x96>
 801a416:	ebba 0b04 	subs.w	fp, sl, r4
 801a41a:	d00b      	beq.n	801a434 <_vfiprintf_r+0xc0>
 801a41c:	465b      	mov	r3, fp
 801a41e:	4622      	mov	r2, r4
 801a420:	4629      	mov	r1, r5
 801a422:	4630      	mov	r0, r6
 801a424:	f7ff ff93 	bl	801a34e <__sfputs_r>
 801a428:	3001      	adds	r0, #1
 801a42a:	f000 80aa 	beq.w	801a582 <_vfiprintf_r+0x20e>
 801a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a430:	445a      	add	r2, fp
 801a432:	9209      	str	r2, [sp, #36]	; 0x24
 801a434:	f89a 3000 	ldrb.w	r3, [sl]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	f000 80a2 	beq.w	801a582 <_vfiprintf_r+0x20e>
 801a43e:	2300      	movs	r3, #0
 801a440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a448:	f10a 0a01 	add.w	sl, sl, #1
 801a44c:	9304      	str	r3, [sp, #16]
 801a44e:	9307      	str	r3, [sp, #28]
 801a450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a454:	931a      	str	r3, [sp, #104]	; 0x68
 801a456:	4654      	mov	r4, sl
 801a458:	2205      	movs	r2, #5
 801a45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a45e:	4858      	ldr	r0, [pc, #352]	; (801a5c0 <_vfiprintf_r+0x24c>)
 801a460:	f7e5 ff36 	bl	80002d0 <memchr>
 801a464:	9a04      	ldr	r2, [sp, #16]
 801a466:	b9d8      	cbnz	r0, 801a4a0 <_vfiprintf_r+0x12c>
 801a468:	06d1      	lsls	r1, r2, #27
 801a46a:	bf44      	itt	mi
 801a46c:	2320      	movmi	r3, #32
 801a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a472:	0713      	lsls	r3, r2, #28
 801a474:	bf44      	itt	mi
 801a476:	232b      	movmi	r3, #43	; 0x2b
 801a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a47c:	f89a 3000 	ldrb.w	r3, [sl]
 801a480:	2b2a      	cmp	r3, #42	; 0x2a
 801a482:	d015      	beq.n	801a4b0 <_vfiprintf_r+0x13c>
 801a484:	9a07      	ldr	r2, [sp, #28]
 801a486:	4654      	mov	r4, sl
 801a488:	2000      	movs	r0, #0
 801a48a:	f04f 0c0a 	mov.w	ip, #10
 801a48e:	4621      	mov	r1, r4
 801a490:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a494:	3b30      	subs	r3, #48	; 0x30
 801a496:	2b09      	cmp	r3, #9
 801a498:	d94e      	bls.n	801a538 <_vfiprintf_r+0x1c4>
 801a49a:	b1b0      	cbz	r0, 801a4ca <_vfiprintf_r+0x156>
 801a49c:	9207      	str	r2, [sp, #28]
 801a49e:	e014      	b.n	801a4ca <_vfiprintf_r+0x156>
 801a4a0:	eba0 0308 	sub.w	r3, r0, r8
 801a4a4:	fa09 f303 	lsl.w	r3, r9, r3
 801a4a8:	4313      	orrs	r3, r2
 801a4aa:	9304      	str	r3, [sp, #16]
 801a4ac:	46a2      	mov	sl, r4
 801a4ae:	e7d2      	b.n	801a456 <_vfiprintf_r+0xe2>
 801a4b0:	9b03      	ldr	r3, [sp, #12]
 801a4b2:	1d19      	adds	r1, r3, #4
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	9103      	str	r1, [sp, #12]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	bfbb      	ittet	lt
 801a4bc:	425b      	neglt	r3, r3
 801a4be:	f042 0202 	orrlt.w	r2, r2, #2
 801a4c2:	9307      	strge	r3, [sp, #28]
 801a4c4:	9307      	strlt	r3, [sp, #28]
 801a4c6:	bfb8      	it	lt
 801a4c8:	9204      	strlt	r2, [sp, #16]
 801a4ca:	7823      	ldrb	r3, [r4, #0]
 801a4cc:	2b2e      	cmp	r3, #46	; 0x2e
 801a4ce:	d10c      	bne.n	801a4ea <_vfiprintf_r+0x176>
 801a4d0:	7863      	ldrb	r3, [r4, #1]
 801a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 801a4d4:	d135      	bne.n	801a542 <_vfiprintf_r+0x1ce>
 801a4d6:	9b03      	ldr	r3, [sp, #12]
 801a4d8:	1d1a      	adds	r2, r3, #4
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	9203      	str	r2, [sp, #12]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	bfb8      	it	lt
 801a4e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a4e6:	3402      	adds	r4, #2
 801a4e8:	9305      	str	r3, [sp, #20]
 801a4ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a5d0 <_vfiprintf_r+0x25c>
 801a4ee:	7821      	ldrb	r1, [r4, #0]
 801a4f0:	2203      	movs	r2, #3
 801a4f2:	4650      	mov	r0, sl
 801a4f4:	f7e5 feec 	bl	80002d0 <memchr>
 801a4f8:	b140      	cbz	r0, 801a50c <_vfiprintf_r+0x198>
 801a4fa:	2340      	movs	r3, #64	; 0x40
 801a4fc:	eba0 000a 	sub.w	r0, r0, sl
 801a500:	fa03 f000 	lsl.w	r0, r3, r0
 801a504:	9b04      	ldr	r3, [sp, #16]
 801a506:	4303      	orrs	r3, r0
 801a508:	3401      	adds	r4, #1
 801a50a:	9304      	str	r3, [sp, #16]
 801a50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a510:	482c      	ldr	r0, [pc, #176]	; (801a5c4 <_vfiprintf_r+0x250>)
 801a512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a516:	2206      	movs	r2, #6
 801a518:	f7e5 feda 	bl	80002d0 <memchr>
 801a51c:	2800      	cmp	r0, #0
 801a51e:	d03f      	beq.n	801a5a0 <_vfiprintf_r+0x22c>
 801a520:	4b29      	ldr	r3, [pc, #164]	; (801a5c8 <_vfiprintf_r+0x254>)
 801a522:	bb1b      	cbnz	r3, 801a56c <_vfiprintf_r+0x1f8>
 801a524:	9b03      	ldr	r3, [sp, #12]
 801a526:	3307      	adds	r3, #7
 801a528:	f023 0307 	bic.w	r3, r3, #7
 801a52c:	3308      	adds	r3, #8
 801a52e:	9303      	str	r3, [sp, #12]
 801a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a532:	443b      	add	r3, r7
 801a534:	9309      	str	r3, [sp, #36]	; 0x24
 801a536:	e767      	b.n	801a408 <_vfiprintf_r+0x94>
 801a538:	fb0c 3202 	mla	r2, ip, r2, r3
 801a53c:	460c      	mov	r4, r1
 801a53e:	2001      	movs	r0, #1
 801a540:	e7a5      	b.n	801a48e <_vfiprintf_r+0x11a>
 801a542:	2300      	movs	r3, #0
 801a544:	3401      	adds	r4, #1
 801a546:	9305      	str	r3, [sp, #20]
 801a548:	4619      	mov	r1, r3
 801a54a:	f04f 0c0a 	mov.w	ip, #10
 801a54e:	4620      	mov	r0, r4
 801a550:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a554:	3a30      	subs	r2, #48	; 0x30
 801a556:	2a09      	cmp	r2, #9
 801a558:	d903      	bls.n	801a562 <_vfiprintf_r+0x1ee>
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d0c5      	beq.n	801a4ea <_vfiprintf_r+0x176>
 801a55e:	9105      	str	r1, [sp, #20]
 801a560:	e7c3      	b.n	801a4ea <_vfiprintf_r+0x176>
 801a562:	fb0c 2101 	mla	r1, ip, r1, r2
 801a566:	4604      	mov	r4, r0
 801a568:	2301      	movs	r3, #1
 801a56a:	e7f0      	b.n	801a54e <_vfiprintf_r+0x1da>
 801a56c:	ab03      	add	r3, sp, #12
 801a56e:	9300      	str	r3, [sp, #0]
 801a570:	462a      	mov	r2, r5
 801a572:	4b16      	ldr	r3, [pc, #88]	; (801a5cc <_vfiprintf_r+0x258>)
 801a574:	a904      	add	r1, sp, #16
 801a576:	4630      	mov	r0, r6
 801a578:	f3af 8000 	nop.w
 801a57c:	4607      	mov	r7, r0
 801a57e:	1c78      	adds	r0, r7, #1
 801a580:	d1d6      	bne.n	801a530 <_vfiprintf_r+0x1bc>
 801a582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a584:	07d9      	lsls	r1, r3, #31
 801a586:	d405      	bmi.n	801a594 <_vfiprintf_r+0x220>
 801a588:	89ab      	ldrh	r3, [r5, #12]
 801a58a:	059a      	lsls	r2, r3, #22
 801a58c:	d402      	bmi.n	801a594 <_vfiprintf_r+0x220>
 801a58e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a590:	f7ff fcf9 	bl	8019f86 <__retarget_lock_release_recursive>
 801a594:	89ab      	ldrh	r3, [r5, #12]
 801a596:	065b      	lsls	r3, r3, #25
 801a598:	f53f af12 	bmi.w	801a3c0 <_vfiprintf_r+0x4c>
 801a59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a59e:	e711      	b.n	801a3c4 <_vfiprintf_r+0x50>
 801a5a0:	ab03      	add	r3, sp, #12
 801a5a2:	9300      	str	r3, [sp, #0]
 801a5a4:	462a      	mov	r2, r5
 801a5a6:	4b09      	ldr	r3, [pc, #36]	; (801a5cc <_vfiprintf_r+0x258>)
 801a5a8:	a904      	add	r1, sp, #16
 801a5aa:	4630      	mov	r0, r6
 801a5ac:	f000 f880 	bl	801a6b0 <_printf_i>
 801a5b0:	e7e4      	b.n	801a57c <_vfiprintf_r+0x208>
 801a5b2:	bf00      	nop
 801a5b4:	08030680 	.word	0x08030680
 801a5b8:	080306a0 	.word	0x080306a0
 801a5bc:	08030660 	.word	0x08030660
 801a5c0:	080306c0 	.word	0x080306c0
 801a5c4:	080306ca 	.word	0x080306ca
 801a5c8:	00000000 	.word	0x00000000
 801a5cc:	0801a34f 	.word	0x0801a34f
 801a5d0:	080306c6 	.word	0x080306c6

0801a5d4 <_printf_common>:
 801a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5d8:	4616      	mov	r6, r2
 801a5da:	4699      	mov	r9, r3
 801a5dc:	688a      	ldr	r2, [r1, #8]
 801a5de:	690b      	ldr	r3, [r1, #16]
 801a5e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a5e4:	4293      	cmp	r3, r2
 801a5e6:	bfb8      	it	lt
 801a5e8:	4613      	movlt	r3, r2
 801a5ea:	6033      	str	r3, [r6, #0]
 801a5ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a5f0:	4607      	mov	r7, r0
 801a5f2:	460c      	mov	r4, r1
 801a5f4:	b10a      	cbz	r2, 801a5fa <_printf_common+0x26>
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	6033      	str	r3, [r6, #0]
 801a5fa:	6823      	ldr	r3, [r4, #0]
 801a5fc:	0699      	lsls	r1, r3, #26
 801a5fe:	bf42      	ittt	mi
 801a600:	6833      	ldrmi	r3, [r6, #0]
 801a602:	3302      	addmi	r3, #2
 801a604:	6033      	strmi	r3, [r6, #0]
 801a606:	6825      	ldr	r5, [r4, #0]
 801a608:	f015 0506 	ands.w	r5, r5, #6
 801a60c:	d106      	bne.n	801a61c <_printf_common+0x48>
 801a60e:	f104 0a19 	add.w	sl, r4, #25
 801a612:	68e3      	ldr	r3, [r4, #12]
 801a614:	6832      	ldr	r2, [r6, #0]
 801a616:	1a9b      	subs	r3, r3, r2
 801a618:	42ab      	cmp	r3, r5
 801a61a:	dc26      	bgt.n	801a66a <_printf_common+0x96>
 801a61c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a620:	1e13      	subs	r3, r2, #0
 801a622:	6822      	ldr	r2, [r4, #0]
 801a624:	bf18      	it	ne
 801a626:	2301      	movne	r3, #1
 801a628:	0692      	lsls	r2, r2, #26
 801a62a:	d42b      	bmi.n	801a684 <_printf_common+0xb0>
 801a62c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a630:	4649      	mov	r1, r9
 801a632:	4638      	mov	r0, r7
 801a634:	47c0      	blx	r8
 801a636:	3001      	adds	r0, #1
 801a638:	d01e      	beq.n	801a678 <_printf_common+0xa4>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	68e5      	ldr	r5, [r4, #12]
 801a63e:	6832      	ldr	r2, [r6, #0]
 801a640:	f003 0306 	and.w	r3, r3, #6
 801a644:	2b04      	cmp	r3, #4
 801a646:	bf08      	it	eq
 801a648:	1aad      	subeq	r5, r5, r2
 801a64a:	68a3      	ldr	r3, [r4, #8]
 801a64c:	6922      	ldr	r2, [r4, #16]
 801a64e:	bf0c      	ite	eq
 801a650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a654:	2500      	movne	r5, #0
 801a656:	4293      	cmp	r3, r2
 801a658:	bfc4      	itt	gt
 801a65a:	1a9b      	subgt	r3, r3, r2
 801a65c:	18ed      	addgt	r5, r5, r3
 801a65e:	2600      	movs	r6, #0
 801a660:	341a      	adds	r4, #26
 801a662:	42b5      	cmp	r5, r6
 801a664:	d11a      	bne.n	801a69c <_printf_common+0xc8>
 801a666:	2000      	movs	r0, #0
 801a668:	e008      	b.n	801a67c <_printf_common+0xa8>
 801a66a:	2301      	movs	r3, #1
 801a66c:	4652      	mov	r2, sl
 801a66e:	4649      	mov	r1, r9
 801a670:	4638      	mov	r0, r7
 801a672:	47c0      	blx	r8
 801a674:	3001      	adds	r0, #1
 801a676:	d103      	bne.n	801a680 <_printf_common+0xac>
 801a678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a680:	3501      	adds	r5, #1
 801a682:	e7c6      	b.n	801a612 <_printf_common+0x3e>
 801a684:	18e1      	adds	r1, r4, r3
 801a686:	1c5a      	adds	r2, r3, #1
 801a688:	2030      	movs	r0, #48	; 0x30
 801a68a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a68e:	4422      	add	r2, r4
 801a690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a698:	3302      	adds	r3, #2
 801a69a:	e7c7      	b.n	801a62c <_printf_common+0x58>
 801a69c:	2301      	movs	r3, #1
 801a69e:	4622      	mov	r2, r4
 801a6a0:	4649      	mov	r1, r9
 801a6a2:	4638      	mov	r0, r7
 801a6a4:	47c0      	blx	r8
 801a6a6:	3001      	adds	r0, #1
 801a6a8:	d0e6      	beq.n	801a678 <_printf_common+0xa4>
 801a6aa:	3601      	adds	r6, #1
 801a6ac:	e7d9      	b.n	801a662 <_printf_common+0x8e>
	...

0801a6b0 <_printf_i>:
 801a6b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a6b4:	460c      	mov	r4, r1
 801a6b6:	4691      	mov	r9, r2
 801a6b8:	7e27      	ldrb	r7, [r4, #24]
 801a6ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a6bc:	2f78      	cmp	r7, #120	; 0x78
 801a6be:	4680      	mov	r8, r0
 801a6c0:	469a      	mov	sl, r3
 801a6c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a6c6:	d807      	bhi.n	801a6d8 <_printf_i+0x28>
 801a6c8:	2f62      	cmp	r7, #98	; 0x62
 801a6ca:	d80a      	bhi.n	801a6e2 <_printf_i+0x32>
 801a6cc:	2f00      	cmp	r7, #0
 801a6ce:	f000 80d8 	beq.w	801a882 <_printf_i+0x1d2>
 801a6d2:	2f58      	cmp	r7, #88	; 0x58
 801a6d4:	f000 80a3 	beq.w	801a81e <_printf_i+0x16e>
 801a6d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a6dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a6e0:	e03a      	b.n	801a758 <_printf_i+0xa8>
 801a6e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a6e6:	2b15      	cmp	r3, #21
 801a6e8:	d8f6      	bhi.n	801a6d8 <_printf_i+0x28>
 801a6ea:	a001      	add	r0, pc, #4	; (adr r0, 801a6f0 <_printf_i+0x40>)
 801a6ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a6f0:	0801a749 	.word	0x0801a749
 801a6f4:	0801a75d 	.word	0x0801a75d
 801a6f8:	0801a6d9 	.word	0x0801a6d9
 801a6fc:	0801a6d9 	.word	0x0801a6d9
 801a700:	0801a6d9 	.word	0x0801a6d9
 801a704:	0801a6d9 	.word	0x0801a6d9
 801a708:	0801a75d 	.word	0x0801a75d
 801a70c:	0801a6d9 	.word	0x0801a6d9
 801a710:	0801a6d9 	.word	0x0801a6d9
 801a714:	0801a6d9 	.word	0x0801a6d9
 801a718:	0801a6d9 	.word	0x0801a6d9
 801a71c:	0801a869 	.word	0x0801a869
 801a720:	0801a78d 	.word	0x0801a78d
 801a724:	0801a84b 	.word	0x0801a84b
 801a728:	0801a6d9 	.word	0x0801a6d9
 801a72c:	0801a6d9 	.word	0x0801a6d9
 801a730:	0801a88b 	.word	0x0801a88b
 801a734:	0801a6d9 	.word	0x0801a6d9
 801a738:	0801a78d 	.word	0x0801a78d
 801a73c:	0801a6d9 	.word	0x0801a6d9
 801a740:	0801a6d9 	.word	0x0801a6d9
 801a744:	0801a853 	.word	0x0801a853
 801a748:	680b      	ldr	r3, [r1, #0]
 801a74a:	1d1a      	adds	r2, r3, #4
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	600a      	str	r2, [r1, #0]
 801a750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a758:	2301      	movs	r3, #1
 801a75a:	e0a3      	b.n	801a8a4 <_printf_i+0x1f4>
 801a75c:	6825      	ldr	r5, [r4, #0]
 801a75e:	6808      	ldr	r0, [r1, #0]
 801a760:	062e      	lsls	r6, r5, #24
 801a762:	f100 0304 	add.w	r3, r0, #4
 801a766:	d50a      	bpl.n	801a77e <_printf_i+0xce>
 801a768:	6805      	ldr	r5, [r0, #0]
 801a76a:	600b      	str	r3, [r1, #0]
 801a76c:	2d00      	cmp	r5, #0
 801a76e:	da03      	bge.n	801a778 <_printf_i+0xc8>
 801a770:	232d      	movs	r3, #45	; 0x2d
 801a772:	426d      	negs	r5, r5
 801a774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a778:	485e      	ldr	r0, [pc, #376]	; (801a8f4 <_printf_i+0x244>)
 801a77a:	230a      	movs	r3, #10
 801a77c:	e019      	b.n	801a7b2 <_printf_i+0x102>
 801a77e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a782:	6805      	ldr	r5, [r0, #0]
 801a784:	600b      	str	r3, [r1, #0]
 801a786:	bf18      	it	ne
 801a788:	b22d      	sxthne	r5, r5
 801a78a:	e7ef      	b.n	801a76c <_printf_i+0xbc>
 801a78c:	680b      	ldr	r3, [r1, #0]
 801a78e:	6825      	ldr	r5, [r4, #0]
 801a790:	1d18      	adds	r0, r3, #4
 801a792:	6008      	str	r0, [r1, #0]
 801a794:	0628      	lsls	r0, r5, #24
 801a796:	d501      	bpl.n	801a79c <_printf_i+0xec>
 801a798:	681d      	ldr	r5, [r3, #0]
 801a79a:	e002      	b.n	801a7a2 <_printf_i+0xf2>
 801a79c:	0669      	lsls	r1, r5, #25
 801a79e:	d5fb      	bpl.n	801a798 <_printf_i+0xe8>
 801a7a0:	881d      	ldrh	r5, [r3, #0]
 801a7a2:	4854      	ldr	r0, [pc, #336]	; (801a8f4 <_printf_i+0x244>)
 801a7a4:	2f6f      	cmp	r7, #111	; 0x6f
 801a7a6:	bf0c      	ite	eq
 801a7a8:	2308      	moveq	r3, #8
 801a7aa:	230a      	movne	r3, #10
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a7b2:	6866      	ldr	r6, [r4, #4]
 801a7b4:	60a6      	str	r6, [r4, #8]
 801a7b6:	2e00      	cmp	r6, #0
 801a7b8:	bfa2      	ittt	ge
 801a7ba:	6821      	ldrge	r1, [r4, #0]
 801a7bc:	f021 0104 	bicge.w	r1, r1, #4
 801a7c0:	6021      	strge	r1, [r4, #0]
 801a7c2:	b90d      	cbnz	r5, 801a7c8 <_printf_i+0x118>
 801a7c4:	2e00      	cmp	r6, #0
 801a7c6:	d04d      	beq.n	801a864 <_printf_i+0x1b4>
 801a7c8:	4616      	mov	r6, r2
 801a7ca:	fbb5 f1f3 	udiv	r1, r5, r3
 801a7ce:	fb03 5711 	mls	r7, r3, r1, r5
 801a7d2:	5dc7      	ldrb	r7, [r0, r7]
 801a7d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a7d8:	462f      	mov	r7, r5
 801a7da:	42bb      	cmp	r3, r7
 801a7dc:	460d      	mov	r5, r1
 801a7de:	d9f4      	bls.n	801a7ca <_printf_i+0x11a>
 801a7e0:	2b08      	cmp	r3, #8
 801a7e2:	d10b      	bne.n	801a7fc <_printf_i+0x14c>
 801a7e4:	6823      	ldr	r3, [r4, #0]
 801a7e6:	07df      	lsls	r7, r3, #31
 801a7e8:	d508      	bpl.n	801a7fc <_printf_i+0x14c>
 801a7ea:	6923      	ldr	r3, [r4, #16]
 801a7ec:	6861      	ldr	r1, [r4, #4]
 801a7ee:	4299      	cmp	r1, r3
 801a7f0:	bfde      	ittt	le
 801a7f2:	2330      	movle	r3, #48	; 0x30
 801a7f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a7f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a7fc:	1b92      	subs	r2, r2, r6
 801a7fe:	6122      	str	r2, [r4, #16]
 801a800:	f8cd a000 	str.w	sl, [sp]
 801a804:	464b      	mov	r3, r9
 801a806:	aa03      	add	r2, sp, #12
 801a808:	4621      	mov	r1, r4
 801a80a:	4640      	mov	r0, r8
 801a80c:	f7ff fee2 	bl	801a5d4 <_printf_common>
 801a810:	3001      	adds	r0, #1
 801a812:	d14c      	bne.n	801a8ae <_printf_i+0x1fe>
 801a814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a818:	b004      	add	sp, #16
 801a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a81e:	4835      	ldr	r0, [pc, #212]	; (801a8f4 <_printf_i+0x244>)
 801a820:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a824:	6823      	ldr	r3, [r4, #0]
 801a826:	680e      	ldr	r6, [r1, #0]
 801a828:	061f      	lsls	r7, r3, #24
 801a82a:	f856 5b04 	ldr.w	r5, [r6], #4
 801a82e:	600e      	str	r6, [r1, #0]
 801a830:	d514      	bpl.n	801a85c <_printf_i+0x1ac>
 801a832:	07d9      	lsls	r1, r3, #31
 801a834:	bf44      	itt	mi
 801a836:	f043 0320 	orrmi.w	r3, r3, #32
 801a83a:	6023      	strmi	r3, [r4, #0]
 801a83c:	b91d      	cbnz	r5, 801a846 <_printf_i+0x196>
 801a83e:	6823      	ldr	r3, [r4, #0]
 801a840:	f023 0320 	bic.w	r3, r3, #32
 801a844:	6023      	str	r3, [r4, #0]
 801a846:	2310      	movs	r3, #16
 801a848:	e7b0      	b.n	801a7ac <_printf_i+0xfc>
 801a84a:	6823      	ldr	r3, [r4, #0]
 801a84c:	f043 0320 	orr.w	r3, r3, #32
 801a850:	6023      	str	r3, [r4, #0]
 801a852:	2378      	movs	r3, #120	; 0x78
 801a854:	4828      	ldr	r0, [pc, #160]	; (801a8f8 <_printf_i+0x248>)
 801a856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a85a:	e7e3      	b.n	801a824 <_printf_i+0x174>
 801a85c:	065e      	lsls	r6, r3, #25
 801a85e:	bf48      	it	mi
 801a860:	b2ad      	uxthmi	r5, r5
 801a862:	e7e6      	b.n	801a832 <_printf_i+0x182>
 801a864:	4616      	mov	r6, r2
 801a866:	e7bb      	b.n	801a7e0 <_printf_i+0x130>
 801a868:	680b      	ldr	r3, [r1, #0]
 801a86a:	6826      	ldr	r6, [r4, #0]
 801a86c:	6960      	ldr	r0, [r4, #20]
 801a86e:	1d1d      	adds	r5, r3, #4
 801a870:	600d      	str	r5, [r1, #0]
 801a872:	0635      	lsls	r5, r6, #24
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	d501      	bpl.n	801a87c <_printf_i+0x1cc>
 801a878:	6018      	str	r0, [r3, #0]
 801a87a:	e002      	b.n	801a882 <_printf_i+0x1d2>
 801a87c:	0671      	lsls	r1, r6, #25
 801a87e:	d5fb      	bpl.n	801a878 <_printf_i+0x1c8>
 801a880:	8018      	strh	r0, [r3, #0]
 801a882:	2300      	movs	r3, #0
 801a884:	6123      	str	r3, [r4, #16]
 801a886:	4616      	mov	r6, r2
 801a888:	e7ba      	b.n	801a800 <_printf_i+0x150>
 801a88a:	680b      	ldr	r3, [r1, #0]
 801a88c:	1d1a      	adds	r2, r3, #4
 801a88e:	600a      	str	r2, [r1, #0]
 801a890:	681e      	ldr	r6, [r3, #0]
 801a892:	6862      	ldr	r2, [r4, #4]
 801a894:	2100      	movs	r1, #0
 801a896:	4630      	mov	r0, r6
 801a898:	f7e5 fd1a 	bl	80002d0 <memchr>
 801a89c:	b108      	cbz	r0, 801a8a2 <_printf_i+0x1f2>
 801a89e:	1b80      	subs	r0, r0, r6
 801a8a0:	6060      	str	r0, [r4, #4]
 801a8a2:	6863      	ldr	r3, [r4, #4]
 801a8a4:	6123      	str	r3, [r4, #16]
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8ac:	e7a8      	b.n	801a800 <_printf_i+0x150>
 801a8ae:	6923      	ldr	r3, [r4, #16]
 801a8b0:	4632      	mov	r2, r6
 801a8b2:	4649      	mov	r1, r9
 801a8b4:	4640      	mov	r0, r8
 801a8b6:	47d0      	blx	sl
 801a8b8:	3001      	adds	r0, #1
 801a8ba:	d0ab      	beq.n	801a814 <_printf_i+0x164>
 801a8bc:	6823      	ldr	r3, [r4, #0]
 801a8be:	079b      	lsls	r3, r3, #30
 801a8c0:	d413      	bmi.n	801a8ea <_printf_i+0x23a>
 801a8c2:	68e0      	ldr	r0, [r4, #12]
 801a8c4:	9b03      	ldr	r3, [sp, #12]
 801a8c6:	4298      	cmp	r0, r3
 801a8c8:	bfb8      	it	lt
 801a8ca:	4618      	movlt	r0, r3
 801a8cc:	e7a4      	b.n	801a818 <_printf_i+0x168>
 801a8ce:	2301      	movs	r3, #1
 801a8d0:	4632      	mov	r2, r6
 801a8d2:	4649      	mov	r1, r9
 801a8d4:	4640      	mov	r0, r8
 801a8d6:	47d0      	blx	sl
 801a8d8:	3001      	adds	r0, #1
 801a8da:	d09b      	beq.n	801a814 <_printf_i+0x164>
 801a8dc:	3501      	adds	r5, #1
 801a8de:	68e3      	ldr	r3, [r4, #12]
 801a8e0:	9903      	ldr	r1, [sp, #12]
 801a8e2:	1a5b      	subs	r3, r3, r1
 801a8e4:	42ab      	cmp	r3, r5
 801a8e6:	dcf2      	bgt.n	801a8ce <_printf_i+0x21e>
 801a8e8:	e7eb      	b.n	801a8c2 <_printf_i+0x212>
 801a8ea:	2500      	movs	r5, #0
 801a8ec:	f104 0619 	add.w	r6, r4, #25
 801a8f0:	e7f5      	b.n	801a8de <_printf_i+0x22e>
 801a8f2:	bf00      	nop
 801a8f4:	080306d1 	.word	0x080306d1
 801a8f8:	080306e2 	.word	0x080306e2

0801a8fc <_putc_r>:
 801a8fc:	b570      	push	{r4, r5, r6, lr}
 801a8fe:	460d      	mov	r5, r1
 801a900:	4614      	mov	r4, r2
 801a902:	4606      	mov	r6, r0
 801a904:	b118      	cbz	r0, 801a90e <_putc_r+0x12>
 801a906:	6983      	ldr	r3, [r0, #24]
 801a908:	b90b      	cbnz	r3, 801a90e <_putc_r+0x12>
 801a90a:	f7ff fa9d 	bl	8019e48 <__sinit>
 801a90e:	4b1c      	ldr	r3, [pc, #112]	; (801a980 <_putc_r+0x84>)
 801a910:	429c      	cmp	r4, r3
 801a912:	d124      	bne.n	801a95e <_putc_r+0x62>
 801a914:	6874      	ldr	r4, [r6, #4]
 801a916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a918:	07d8      	lsls	r0, r3, #31
 801a91a:	d405      	bmi.n	801a928 <_putc_r+0x2c>
 801a91c:	89a3      	ldrh	r3, [r4, #12]
 801a91e:	0599      	lsls	r1, r3, #22
 801a920:	d402      	bmi.n	801a928 <_putc_r+0x2c>
 801a922:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a924:	f7ff fb2e 	bl	8019f84 <__retarget_lock_acquire_recursive>
 801a928:	68a3      	ldr	r3, [r4, #8]
 801a92a:	3b01      	subs	r3, #1
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	60a3      	str	r3, [r4, #8]
 801a930:	da05      	bge.n	801a93e <_putc_r+0x42>
 801a932:	69a2      	ldr	r2, [r4, #24]
 801a934:	4293      	cmp	r3, r2
 801a936:	db1c      	blt.n	801a972 <_putc_r+0x76>
 801a938:	b2eb      	uxtb	r3, r5
 801a93a:	2b0a      	cmp	r3, #10
 801a93c:	d019      	beq.n	801a972 <_putc_r+0x76>
 801a93e:	6823      	ldr	r3, [r4, #0]
 801a940:	1c5a      	adds	r2, r3, #1
 801a942:	6022      	str	r2, [r4, #0]
 801a944:	701d      	strb	r5, [r3, #0]
 801a946:	b2ed      	uxtb	r5, r5
 801a948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a94a:	07da      	lsls	r2, r3, #31
 801a94c:	d405      	bmi.n	801a95a <_putc_r+0x5e>
 801a94e:	89a3      	ldrh	r3, [r4, #12]
 801a950:	059b      	lsls	r3, r3, #22
 801a952:	d402      	bmi.n	801a95a <_putc_r+0x5e>
 801a954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a956:	f7ff fb16 	bl	8019f86 <__retarget_lock_release_recursive>
 801a95a:	4628      	mov	r0, r5
 801a95c:	bd70      	pop	{r4, r5, r6, pc}
 801a95e:	4b09      	ldr	r3, [pc, #36]	; (801a984 <_putc_r+0x88>)
 801a960:	429c      	cmp	r4, r3
 801a962:	d101      	bne.n	801a968 <_putc_r+0x6c>
 801a964:	68b4      	ldr	r4, [r6, #8]
 801a966:	e7d6      	b.n	801a916 <_putc_r+0x1a>
 801a968:	4b07      	ldr	r3, [pc, #28]	; (801a988 <_putc_r+0x8c>)
 801a96a:	429c      	cmp	r4, r3
 801a96c:	bf08      	it	eq
 801a96e:	68f4      	ldreq	r4, [r6, #12]
 801a970:	e7d1      	b.n	801a916 <_putc_r+0x1a>
 801a972:	4629      	mov	r1, r5
 801a974:	4622      	mov	r2, r4
 801a976:	4630      	mov	r0, r6
 801a978:	f7ff f88c 	bl	8019a94 <__swbuf_r>
 801a97c:	4605      	mov	r5, r0
 801a97e:	e7e3      	b.n	801a948 <_putc_r+0x4c>
 801a980:	08030680 	.word	0x08030680
 801a984:	080306a0 	.word	0x080306a0
 801a988:	08030660 	.word	0x08030660

0801a98c <__sread>:
 801a98c:	b510      	push	{r4, lr}
 801a98e:	460c      	mov	r4, r1
 801a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a994:	f000 f8d4 	bl	801ab40 <_read_r>
 801a998:	2800      	cmp	r0, #0
 801a99a:	bfab      	itete	ge
 801a99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a99e:	89a3      	ldrhlt	r3, [r4, #12]
 801a9a0:	181b      	addge	r3, r3, r0
 801a9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a9a6:	bfac      	ite	ge
 801a9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a9aa:	81a3      	strhlt	r3, [r4, #12]
 801a9ac:	bd10      	pop	{r4, pc}

0801a9ae <__swrite>:
 801a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9b2:	461f      	mov	r7, r3
 801a9b4:	898b      	ldrh	r3, [r1, #12]
 801a9b6:	05db      	lsls	r3, r3, #23
 801a9b8:	4605      	mov	r5, r0
 801a9ba:	460c      	mov	r4, r1
 801a9bc:	4616      	mov	r6, r2
 801a9be:	d505      	bpl.n	801a9cc <__swrite+0x1e>
 801a9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	f000 f868 	bl	801aa9c <_lseek_r>
 801a9cc:	89a3      	ldrh	r3, [r4, #12]
 801a9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a9d6:	81a3      	strh	r3, [r4, #12]
 801a9d8:	4632      	mov	r2, r6
 801a9da:	463b      	mov	r3, r7
 801a9dc:	4628      	mov	r0, r5
 801a9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e2:	f000 b817 	b.w	801aa14 <_write_r>

0801a9e6 <__sseek>:
 801a9e6:	b510      	push	{r4, lr}
 801a9e8:	460c      	mov	r4, r1
 801a9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9ee:	f000 f855 	bl	801aa9c <_lseek_r>
 801a9f2:	1c43      	adds	r3, r0, #1
 801a9f4:	89a3      	ldrh	r3, [r4, #12]
 801a9f6:	bf15      	itete	ne
 801a9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aa02:	81a3      	strheq	r3, [r4, #12]
 801aa04:	bf18      	it	ne
 801aa06:	81a3      	strhne	r3, [r4, #12]
 801aa08:	bd10      	pop	{r4, pc}

0801aa0a <__sclose>:
 801aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa0e:	f000 b813 	b.w	801aa38 <_close_r>
	...

0801aa14 <_write_r>:
 801aa14:	b538      	push	{r3, r4, r5, lr}
 801aa16:	4d07      	ldr	r5, [pc, #28]	; (801aa34 <_write_r+0x20>)
 801aa18:	4604      	mov	r4, r0
 801aa1a:	4608      	mov	r0, r1
 801aa1c:	4611      	mov	r1, r2
 801aa1e:	2200      	movs	r2, #0
 801aa20:	602a      	str	r2, [r5, #0]
 801aa22:	461a      	mov	r2, r3
 801aa24:	f7e9 fa0d 	bl	8003e42 <_write>
 801aa28:	1c43      	adds	r3, r0, #1
 801aa2a:	d102      	bne.n	801aa32 <_write_r+0x1e>
 801aa2c:	682b      	ldr	r3, [r5, #0]
 801aa2e:	b103      	cbz	r3, 801aa32 <_write_r+0x1e>
 801aa30:	6023      	str	r3, [r4, #0]
 801aa32:	bd38      	pop	{r3, r4, r5, pc}
 801aa34:	2004adcc 	.word	0x2004adcc

0801aa38 <_close_r>:
 801aa38:	b538      	push	{r3, r4, r5, lr}
 801aa3a:	4d06      	ldr	r5, [pc, #24]	; (801aa54 <_close_r+0x1c>)
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	4604      	mov	r4, r0
 801aa40:	4608      	mov	r0, r1
 801aa42:	602b      	str	r3, [r5, #0]
 801aa44:	f7e9 fa19 	bl	8003e7a <_close>
 801aa48:	1c43      	adds	r3, r0, #1
 801aa4a:	d102      	bne.n	801aa52 <_close_r+0x1a>
 801aa4c:	682b      	ldr	r3, [r5, #0]
 801aa4e:	b103      	cbz	r3, 801aa52 <_close_r+0x1a>
 801aa50:	6023      	str	r3, [r4, #0]
 801aa52:	bd38      	pop	{r3, r4, r5, pc}
 801aa54:	2004adcc 	.word	0x2004adcc

0801aa58 <_fstat_r>:
 801aa58:	b538      	push	{r3, r4, r5, lr}
 801aa5a:	4d07      	ldr	r5, [pc, #28]	; (801aa78 <_fstat_r+0x20>)
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	4604      	mov	r4, r0
 801aa60:	4608      	mov	r0, r1
 801aa62:	4611      	mov	r1, r2
 801aa64:	602b      	str	r3, [r5, #0]
 801aa66:	f7e9 fa14 	bl	8003e92 <_fstat>
 801aa6a:	1c43      	adds	r3, r0, #1
 801aa6c:	d102      	bne.n	801aa74 <_fstat_r+0x1c>
 801aa6e:	682b      	ldr	r3, [r5, #0]
 801aa70:	b103      	cbz	r3, 801aa74 <_fstat_r+0x1c>
 801aa72:	6023      	str	r3, [r4, #0]
 801aa74:	bd38      	pop	{r3, r4, r5, pc}
 801aa76:	bf00      	nop
 801aa78:	2004adcc 	.word	0x2004adcc

0801aa7c <_isatty_r>:
 801aa7c:	b538      	push	{r3, r4, r5, lr}
 801aa7e:	4d06      	ldr	r5, [pc, #24]	; (801aa98 <_isatty_r+0x1c>)
 801aa80:	2300      	movs	r3, #0
 801aa82:	4604      	mov	r4, r0
 801aa84:	4608      	mov	r0, r1
 801aa86:	602b      	str	r3, [r5, #0]
 801aa88:	f7e9 fa13 	bl	8003eb2 <_isatty>
 801aa8c:	1c43      	adds	r3, r0, #1
 801aa8e:	d102      	bne.n	801aa96 <_isatty_r+0x1a>
 801aa90:	682b      	ldr	r3, [r5, #0]
 801aa92:	b103      	cbz	r3, 801aa96 <_isatty_r+0x1a>
 801aa94:	6023      	str	r3, [r4, #0]
 801aa96:	bd38      	pop	{r3, r4, r5, pc}
 801aa98:	2004adcc 	.word	0x2004adcc

0801aa9c <_lseek_r>:
 801aa9c:	b538      	push	{r3, r4, r5, lr}
 801aa9e:	4d07      	ldr	r5, [pc, #28]	; (801aabc <_lseek_r+0x20>)
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	4608      	mov	r0, r1
 801aaa4:	4611      	mov	r1, r2
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	602a      	str	r2, [r5, #0]
 801aaaa:	461a      	mov	r2, r3
 801aaac:	f7e9 fa0c 	bl	8003ec8 <_lseek>
 801aab0:	1c43      	adds	r3, r0, #1
 801aab2:	d102      	bne.n	801aaba <_lseek_r+0x1e>
 801aab4:	682b      	ldr	r3, [r5, #0]
 801aab6:	b103      	cbz	r3, 801aaba <_lseek_r+0x1e>
 801aab8:	6023      	str	r3, [r4, #0]
 801aaba:	bd38      	pop	{r3, r4, r5, pc}
 801aabc:	2004adcc 	.word	0x2004adcc

0801aac0 <memmove>:
 801aac0:	4288      	cmp	r0, r1
 801aac2:	b510      	push	{r4, lr}
 801aac4:	eb01 0402 	add.w	r4, r1, r2
 801aac8:	d902      	bls.n	801aad0 <memmove+0x10>
 801aaca:	4284      	cmp	r4, r0
 801aacc:	4623      	mov	r3, r4
 801aace:	d807      	bhi.n	801aae0 <memmove+0x20>
 801aad0:	1e43      	subs	r3, r0, #1
 801aad2:	42a1      	cmp	r1, r4
 801aad4:	d008      	beq.n	801aae8 <memmove+0x28>
 801aad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aada:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aade:	e7f8      	b.n	801aad2 <memmove+0x12>
 801aae0:	4402      	add	r2, r0
 801aae2:	4601      	mov	r1, r0
 801aae4:	428a      	cmp	r2, r1
 801aae6:	d100      	bne.n	801aaea <memmove+0x2a>
 801aae8:	bd10      	pop	{r4, pc}
 801aaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aaf2:	e7f7      	b.n	801aae4 <memmove+0x24>

0801aaf4 <_realloc_r>:
 801aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaf6:	4607      	mov	r7, r0
 801aaf8:	4614      	mov	r4, r2
 801aafa:	460e      	mov	r6, r1
 801aafc:	b921      	cbnz	r1, 801ab08 <_realloc_r+0x14>
 801aafe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ab02:	4611      	mov	r1, r2
 801ab04:	f7fe be98 	b.w	8019838 <_malloc_r>
 801ab08:	b922      	cbnz	r2, 801ab14 <_realloc_r+0x20>
 801ab0a:	f7fe fe45 	bl	8019798 <_free_r>
 801ab0e:	4625      	mov	r5, r4
 801ab10:	4628      	mov	r0, r5
 801ab12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab14:	f000 f826 	bl	801ab64 <_malloc_usable_size_r>
 801ab18:	42a0      	cmp	r0, r4
 801ab1a:	d20f      	bcs.n	801ab3c <_realloc_r+0x48>
 801ab1c:	4621      	mov	r1, r4
 801ab1e:	4638      	mov	r0, r7
 801ab20:	f7fe fe8a 	bl	8019838 <_malloc_r>
 801ab24:	4605      	mov	r5, r0
 801ab26:	2800      	cmp	r0, #0
 801ab28:	d0f2      	beq.n	801ab10 <_realloc_r+0x1c>
 801ab2a:	4631      	mov	r1, r6
 801ab2c:	4622      	mov	r2, r4
 801ab2e:	f7fe fe1d 	bl	801976c <memcpy>
 801ab32:	4631      	mov	r1, r6
 801ab34:	4638      	mov	r0, r7
 801ab36:	f7fe fe2f 	bl	8019798 <_free_r>
 801ab3a:	e7e9      	b.n	801ab10 <_realloc_r+0x1c>
 801ab3c:	4635      	mov	r5, r6
 801ab3e:	e7e7      	b.n	801ab10 <_realloc_r+0x1c>

0801ab40 <_read_r>:
 801ab40:	b538      	push	{r3, r4, r5, lr}
 801ab42:	4d07      	ldr	r5, [pc, #28]	; (801ab60 <_read_r+0x20>)
 801ab44:	4604      	mov	r4, r0
 801ab46:	4608      	mov	r0, r1
 801ab48:	4611      	mov	r1, r2
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	602a      	str	r2, [r5, #0]
 801ab4e:	461a      	mov	r2, r3
 801ab50:	f7e9 f95a 	bl	8003e08 <_read>
 801ab54:	1c43      	adds	r3, r0, #1
 801ab56:	d102      	bne.n	801ab5e <_read_r+0x1e>
 801ab58:	682b      	ldr	r3, [r5, #0]
 801ab5a:	b103      	cbz	r3, 801ab5e <_read_r+0x1e>
 801ab5c:	6023      	str	r3, [r4, #0]
 801ab5e:	bd38      	pop	{r3, r4, r5, pc}
 801ab60:	2004adcc 	.word	0x2004adcc

0801ab64 <_malloc_usable_size_r>:
 801ab64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab68:	1f18      	subs	r0, r3, #4
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	bfbc      	itt	lt
 801ab6e:	580b      	ldrlt	r3, [r1, r0]
 801ab70:	18c0      	addlt	r0, r0, r3
 801ab72:	4770      	bx	lr
 801ab74:	0000      	movs	r0, r0
	...

0801ab78 <log10>:
 801ab78:	b538      	push	{r3, r4, r5, lr}
 801ab7a:	ed2d 8b02 	vpush	{d8}
 801ab7e:	ec55 4b10 	vmov	r4, r5, d0
 801ab82:	f000 f869 	bl	801ac58 <__ieee754_log10>
 801ab86:	4b1e      	ldr	r3, [pc, #120]	; (801ac00 <log10+0x88>)
 801ab88:	eeb0 8a40 	vmov.f32	s16, s0
 801ab8c:	eef0 8a60 	vmov.f32	s17, s1
 801ab90:	f993 3000 	ldrsb.w	r3, [r3]
 801ab94:	3301      	adds	r3, #1
 801ab96:	d01a      	beq.n	801abce <log10+0x56>
 801ab98:	4622      	mov	r2, r4
 801ab9a:	462b      	mov	r3, r5
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	4629      	mov	r1, r5
 801aba0:	f7e6 f83c 	bl	8000c1c <__aeabi_dcmpun>
 801aba4:	b998      	cbnz	r0, 801abce <log10+0x56>
 801aba6:	2200      	movs	r2, #0
 801aba8:	2300      	movs	r3, #0
 801abaa:	4620      	mov	r0, r4
 801abac:	4629      	mov	r1, r5
 801abae:	f7e6 f817 	bl	8000be0 <__aeabi_dcmple>
 801abb2:	b160      	cbz	r0, 801abce <log10+0x56>
 801abb4:	2200      	movs	r2, #0
 801abb6:	2300      	movs	r3, #0
 801abb8:	4620      	mov	r0, r4
 801abba:	4629      	mov	r1, r5
 801abbc:	f7e5 fffc 	bl	8000bb8 <__aeabi_dcmpeq>
 801abc0:	b160      	cbz	r0, 801abdc <log10+0x64>
 801abc2:	f7fe fd99 	bl	80196f8 <__errno>
 801abc6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801abf8 <log10+0x80>
 801abca:	2322      	movs	r3, #34	; 0x22
 801abcc:	6003      	str	r3, [r0, #0]
 801abce:	eeb0 0a48 	vmov.f32	s0, s16
 801abd2:	eef0 0a68 	vmov.f32	s1, s17
 801abd6:	ecbd 8b02 	vpop	{d8}
 801abda:	bd38      	pop	{r3, r4, r5, pc}
 801abdc:	f7fe fd8c 	bl	80196f8 <__errno>
 801abe0:	ecbd 8b02 	vpop	{d8}
 801abe4:	2321      	movs	r3, #33	; 0x21
 801abe6:	6003      	str	r3, [r0, #0]
 801abe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abec:	4805      	ldr	r0, [pc, #20]	; (801ac04 <log10+0x8c>)
 801abee:	f000 b8c3 	b.w	801ad78 <nan>
 801abf2:	bf00      	nop
 801abf4:	f3af 8000 	nop.w
 801abf8:	00000000 	.word	0x00000000
 801abfc:	fff00000 	.word	0xfff00000
 801ac00:	200000b4 	.word	0x200000b4
 801ac04:	080306c5 	.word	0x080306c5

0801ac08 <sqrtf>:
 801ac08:	b508      	push	{r3, lr}
 801ac0a:	ed2d 8b02 	vpush	{d8}
 801ac0e:	eeb0 8a40 	vmov.f32	s16, s0
 801ac12:	f000 f8ab 	bl	801ad6c <__ieee754_sqrtf>
 801ac16:	4b0d      	ldr	r3, [pc, #52]	; (801ac4c <sqrtf+0x44>)
 801ac18:	f993 3000 	ldrsb.w	r3, [r3]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	d011      	beq.n	801ac44 <sqrtf+0x3c>
 801ac20:	eeb4 8a48 	vcmp.f32	s16, s16
 801ac24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac28:	d60c      	bvs.n	801ac44 <sqrtf+0x3c>
 801ac2a:	eddf 8a09 	vldr	s17, [pc, #36]	; 801ac50 <sqrtf+0x48>
 801ac2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac36:	d505      	bpl.n	801ac44 <sqrtf+0x3c>
 801ac38:	f7fe fd5e 	bl	80196f8 <__errno>
 801ac3c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ac40:	2321      	movs	r3, #33	; 0x21
 801ac42:	6003      	str	r3, [r0, #0]
 801ac44:	ecbd 8b02 	vpop	{d8}
 801ac48:	bd08      	pop	{r3, pc}
 801ac4a:	bf00      	nop
 801ac4c:	200000b4 	.word	0x200000b4
	...

0801ac58 <__ieee754_log10>:
 801ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac5c:	ec55 4b10 	vmov	r4, r5, d0
 801ac60:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801ac64:	462b      	mov	r3, r5
 801ac66:	da2f      	bge.n	801acc8 <__ieee754_log10+0x70>
 801ac68:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801ac6c:	4322      	orrs	r2, r4
 801ac6e:	d109      	bne.n	801ac84 <__ieee754_log10+0x2c>
 801ac70:	493b      	ldr	r1, [pc, #236]	; (801ad60 <__ieee754_log10+0x108>)
 801ac72:	2200      	movs	r2, #0
 801ac74:	2300      	movs	r3, #0
 801ac76:	2000      	movs	r0, #0
 801ac78:	f7e5 fe60 	bl	800093c <__aeabi_ddiv>
 801ac7c:	ec41 0b10 	vmov	d0, r0, r1
 801ac80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac84:	2d00      	cmp	r5, #0
 801ac86:	da09      	bge.n	801ac9c <__ieee754_log10+0x44>
 801ac88:	ee10 2a10 	vmov	r2, s0
 801ac8c:	ee10 0a10 	vmov	r0, s0
 801ac90:	4629      	mov	r1, r5
 801ac92:	f7e5 fb71 	bl	8000378 <__aeabi_dsub>
 801ac96:	2200      	movs	r2, #0
 801ac98:	2300      	movs	r3, #0
 801ac9a:	e7ed      	b.n	801ac78 <__ieee754_log10+0x20>
 801ac9c:	4b31      	ldr	r3, [pc, #196]	; (801ad64 <__ieee754_log10+0x10c>)
 801ac9e:	2200      	movs	r2, #0
 801aca0:	4629      	mov	r1, r5
 801aca2:	ee10 0a10 	vmov	r0, s0
 801aca6:	f7e5 fd1f 	bl	80006e8 <__aeabi_dmul>
 801acaa:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801acae:	4604      	mov	r4, r0
 801acb0:	460d      	mov	r5, r1
 801acb2:	460b      	mov	r3, r1
 801acb4:	492c      	ldr	r1, [pc, #176]	; (801ad68 <__ieee754_log10+0x110>)
 801acb6:	428b      	cmp	r3, r1
 801acb8:	dd08      	ble.n	801accc <__ieee754_log10+0x74>
 801acba:	4622      	mov	r2, r4
 801acbc:	462b      	mov	r3, r5
 801acbe:	4620      	mov	r0, r4
 801acc0:	4629      	mov	r1, r5
 801acc2:	f7e5 fb5b 	bl	800037c <__adddf3>
 801acc6:	e7d9      	b.n	801ac7c <__ieee754_log10+0x24>
 801acc8:	2200      	movs	r2, #0
 801acca:	e7f3      	b.n	801acb4 <__ieee754_log10+0x5c>
 801accc:	1518      	asrs	r0, r3, #20
 801acce:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801acd2:	4410      	add	r0, r2
 801acd4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801acd8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801acdc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801ace0:	f7e5 fc98 	bl	8000614 <__aeabi_i2d>
 801ace4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801ace8:	3303      	adds	r3, #3
 801acea:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801acee:	ec45 4b10 	vmov	d0, r4, r5
 801acf2:	4606      	mov	r6, r0
 801acf4:	460f      	mov	r7, r1
 801acf6:	f000 f847 	bl	801ad88 <__ieee754_log>
 801acfa:	a313      	add	r3, pc, #76	; (adr r3, 801ad48 <__ieee754_log10+0xf0>)
 801acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad00:	4630      	mov	r0, r6
 801ad02:	4639      	mov	r1, r7
 801ad04:	ec59 8b10 	vmov	r8, r9, d0
 801ad08:	f7e5 fcee 	bl	80006e8 <__aeabi_dmul>
 801ad0c:	a310      	add	r3, pc, #64	; (adr r3, 801ad50 <__ieee754_log10+0xf8>)
 801ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad12:	4604      	mov	r4, r0
 801ad14:	460d      	mov	r5, r1
 801ad16:	4640      	mov	r0, r8
 801ad18:	4649      	mov	r1, r9
 801ad1a:	f7e5 fce5 	bl	80006e8 <__aeabi_dmul>
 801ad1e:	4602      	mov	r2, r0
 801ad20:	460b      	mov	r3, r1
 801ad22:	4620      	mov	r0, r4
 801ad24:	4629      	mov	r1, r5
 801ad26:	f7e5 fb29 	bl	800037c <__adddf3>
 801ad2a:	a30b      	add	r3, pc, #44	; (adr r3, 801ad58 <__ieee754_log10+0x100>)
 801ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad30:	4604      	mov	r4, r0
 801ad32:	460d      	mov	r5, r1
 801ad34:	4630      	mov	r0, r6
 801ad36:	4639      	mov	r1, r7
 801ad38:	f7e5 fcd6 	bl	80006e8 <__aeabi_dmul>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	460b      	mov	r3, r1
 801ad40:	4620      	mov	r0, r4
 801ad42:	4629      	mov	r1, r5
 801ad44:	e7bd      	b.n	801acc2 <__ieee754_log10+0x6a>
 801ad46:	bf00      	nop
 801ad48:	11f12b36 	.word	0x11f12b36
 801ad4c:	3d59fef3 	.word	0x3d59fef3
 801ad50:	1526e50e 	.word	0x1526e50e
 801ad54:	3fdbcb7b 	.word	0x3fdbcb7b
 801ad58:	509f6000 	.word	0x509f6000
 801ad5c:	3fd34413 	.word	0x3fd34413
 801ad60:	c3500000 	.word	0xc3500000
 801ad64:	43500000 	.word	0x43500000
 801ad68:	7fefffff 	.word	0x7fefffff

0801ad6c <__ieee754_sqrtf>:
 801ad6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ad70:	4770      	bx	lr
 801ad72:	0000      	movs	r0, r0
 801ad74:	0000      	movs	r0, r0
	...

0801ad78 <nan>:
 801ad78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ad80 <nan+0x8>
 801ad7c:	4770      	bx	lr
 801ad7e:	bf00      	nop
 801ad80:	00000000 	.word	0x00000000
 801ad84:	7ff80000 	.word	0x7ff80000

0801ad88 <__ieee754_log>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	ec51 0b10 	vmov	r0, r1, d0
 801ad90:	ed2d 8b04 	vpush	{d8-d9}
 801ad94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801ad98:	b083      	sub	sp, #12
 801ad9a:	460d      	mov	r5, r1
 801ad9c:	da29      	bge.n	801adf2 <__ieee754_log+0x6a>
 801ad9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ada2:	4303      	orrs	r3, r0
 801ada4:	ee10 2a10 	vmov	r2, s0
 801ada8:	d10c      	bne.n	801adc4 <__ieee754_log+0x3c>
 801adaa:	49cf      	ldr	r1, [pc, #828]	; (801b0e8 <__ieee754_log+0x360>)
 801adac:	2200      	movs	r2, #0
 801adae:	2300      	movs	r3, #0
 801adb0:	2000      	movs	r0, #0
 801adb2:	f7e5 fdc3 	bl	800093c <__aeabi_ddiv>
 801adb6:	ec41 0b10 	vmov	d0, r0, r1
 801adba:	b003      	add	sp, #12
 801adbc:	ecbd 8b04 	vpop	{d8-d9}
 801adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adc4:	2900      	cmp	r1, #0
 801adc6:	da05      	bge.n	801add4 <__ieee754_log+0x4c>
 801adc8:	460b      	mov	r3, r1
 801adca:	f7e5 fad5 	bl	8000378 <__aeabi_dsub>
 801adce:	2200      	movs	r2, #0
 801add0:	2300      	movs	r3, #0
 801add2:	e7ee      	b.n	801adb2 <__ieee754_log+0x2a>
 801add4:	4bc5      	ldr	r3, [pc, #788]	; (801b0ec <__ieee754_log+0x364>)
 801add6:	2200      	movs	r2, #0
 801add8:	f7e5 fc86 	bl	80006e8 <__aeabi_dmul>
 801addc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801ade0:	460d      	mov	r5, r1
 801ade2:	4ac3      	ldr	r2, [pc, #780]	; (801b0f0 <__ieee754_log+0x368>)
 801ade4:	4295      	cmp	r5, r2
 801ade6:	dd06      	ble.n	801adf6 <__ieee754_log+0x6e>
 801ade8:	4602      	mov	r2, r0
 801adea:	460b      	mov	r3, r1
 801adec:	f7e5 fac6 	bl	800037c <__adddf3>
 801adf0:	e7e1      	b.n	801adb6 <__ieee754_log+0x2e>
 801adf2:	2300      	movs	r3, #0
 801adf4:	e7f5      	b.n	801ade2 <__ieee754_log+0x5a>
 801adf6:	152c      	asrs	r4, r5, #20
 801adf8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801adfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801ae00:	441c      	add	r4, r3
 801ae02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801ae06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801ae0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ae0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801ae12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801ae16:	ea42 0105 	orr.w	r1, r2, r5
 801ae1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801ae1e:	2200      	movs	r2, #0
 801ae20:	4bb4      	ldr	r3, [pc, #720]	; (801b0f4 <__ieee754_log+0x36c>)
 801ae22:	f7e5 faa9 	bl	8000378 <__aeabi_dsub>
 801ae26:	1cab      	adds	r3, r5, #2
 801ae28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ae2c:	2b02      	cmp	r3, #2
 801ae2e:	4682      	mov	sl, r0
 801ae30:	468b      	mov	fp, r1
 801ae32:	f04f 0200 	mov.w	r2, #0
 801ae36:	dc53      	bgt.n	801aee0 <__ieee754_log+0x158>
 801ae38:	2300      	movs	r3, #0
 801ae3a:	f7e5 febd 	bl	8000bb8 <__aeabi_dcmpeq>
 801ae3e:	b1d0      	cbz	r0, 801ae76 <__ieee754_log+0xee>
 801ae40:	2c00      	cmp	r4, #0
 801ae42:	f000 8122 	beq.w	801b08a <__ieee754_log+0x302>
 801ae46:	4620      	mov	r0, r4
 801ae48:	f7e5 fbe4 	bl	8000614 <__aeabi_i2d>
 801ae4c:	a390      	add	r3, pc, #576	; (adr r3, 801b090 <__ieee754_log+0x308>)
 801ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae52:	4606      	mov	r6, r0
 801ae54:	460f      	mov	r7, r1
 801ae56:	f7e5 fc47 	bl	80006e8 <__aeabi_dmul>
 801ae5a:	a38f      	add	r3, pc, #572	; (adr r3, 801b098 <__ieee754_log+0x310>)
 801ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae60:	4604      	mov	r4, r0
 801ae62:	460d      	mov	r5, r1
 801ae64:	4630      	mov	r0, r6
 801ae66:	4639      	mov	r1, r7
 801ae68:	f7e5 fc3e 	bl	80006e8 <__aeabi_dmul>
 801ae6c:	4602      	mov	r2, r0
 801ae6e:	460b      	mov	r3, r1
 801ae70:	4620      	mov	r0, r4
 801ae72:	4629      	mov	r1, r5
 801ae74:	e7ba      	b.n	801adec <__ieee754_log+0x64>
 801ae76:	a38a      	add	r3, pc, #552	; (adr r3, 801b0a0 <__ieee754_log+0x318>)
 801ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae7c:	4650      	mov	r0, sl
 801ae7e:	4659      	mov	r1, fp
 801ae80:	f7e5 fc32 	bl	80006e8 <__aeabi_dmul>
 801ae84:	4602      	mov	r2, r0
 801ae86:	460b      	mov	r3, r1
 801ae88:	2000      	movs	r0, #0
 801ae8a:	499b      	ldr	r1, [pc, #620]	; (801b0f8 <__ieee754_log+0x370>)
 801ae8c:	f7e5 fa74 	bl	8000378 <__aeabi_dsub>
 801ae90:	4652      	mov	r2, sl
 801ae92:	4606      	mov	r6, r0
 801ae94:	460f      	mov	r7, r1
 801ae96:	465b      	mov	r3, fp
 801ae98:	4650      	mov	r0, sl
 801ae9a:	4659      	mov	r1, fp
 801ae9c:	f7e5 fc24 	bl	80006e8 <__aeabi_dmul>
 801aea0:	4602      	mov	r2, r0
 801aea2:	460b      	mov	r3, r1
 801aea4:	4630      	mov	r0, r6
 801aea6:	4639      	mov	r1, r7
 801aea8:	f7e5 fc1e 	bl	80006e8 <__aeabi_dmul>
 801aeac:	4606      	mov	r6, r0
 801aeae:	460f      	mov	r7, r1
 801aeb0:	b914      	cbnz	r4, 801aeb8 <__ieee754_log+0x130>
 801aeb2:	4632      	mov	r2, r6
 801aeb4:	463b      	mov	r3, r7
 801aeb6:	e0a2      	b.n	801affe <__ieee754_log+0x276>
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f7e5 fbab 	bl	8000614 <__aeabi_i2d>
 801aebe:	a374      	add	r3, pc, #464	; (adr r3, 801b090 <__ieee754_log+0x308>)
 801aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec4:	4680      	mov	r8, r0
 801aec6:	4689      	mov	r9, r1
 801aec8:	f7e5 fc0e 	bl	80006e8 <__aeabi_dmul>
 801aecc:	a372      	add	r3, pc, #456	; (adr r3, 801b098 <__ieee754_log+0x310>)
 801aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed2:	4604      	mov	r4, r0
 801aed4:	460d      	mov	r5, r1
 801aed6:	4640      	mov	r0, r8
 801aed8:	4649      	mov	r1, r9
 801aeda:	f7e5 fc05 	bl	80006e8 <__aeabi_dmul>
 801aede:	e0a7      	b.n	801b030 <__ieee754_log+0x2a8>
 801aee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aee4:	f7e5 fa4a 	bl	800037c <__adddf3>
 801aee8:	4602      	mov	r2, r0
 801aeea:	460b      	mov	r3, r1
 801aeec:	4650      	mov	r0, sl
 801aeee:	4659      	mov	r1, fp
 801aef0:	f7e5 fd24 	bl	800093c <__aeabi_ddiv>
 801aef4:	ec41 0b18 	vmov	d8, r0, r1
 801aef8:	4620      	mov	r0, r4
 801aefa:	f7e5 fb8b 	bl	8000614 <__aeabi_i2d>
 801aefe:	ec53 2b18 	vmov	r2, r3, d8
 801af02:	ec41 0b19 	vmov	d9, r0, r1
 801af06:	ec51 0b18 	vmov	r0, r1, d8
 801af0a:	f7e5 fbed 	bl	80006e8 <__aeabi_dmul>
 801af0e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801af12:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801af16:	9301      	str	r3, [sp, #4]
 801af18:	4602      	mov	r2, r0
 801af1a:	460b      	mov	r3, r1
 801af1c:	4680      	mov	r8, r0
 801af1e:	4689      	mov	r9, r1
 801af20:	f7e5 fbe2 	bl	80006e8 <__aeabi_dmul>
 801af24:	a360      	add	r3, pc, #384	; (adr r3, 801b0a8 <__ieee754_log+0x320>)
 801af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2a:	4606      	mov	r6, r0
 801af2c:	460f      	mov	r7, r1
 801af2e:	f7e5 fbdb 	bl	80006e8 <__aeabi_dmul>
 801af32:	a35f      	add	r3, pc, #380	; (adr r3, 801b0b0 <__ieee754_log+0x328>)
 801af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af38:	f7e5 fa20 	bl	800037c <__adddf3>
 801af3c:	4632      	mov	r2, r6
 801af3e:	463b      	mov	r3, r7
 801af40:	f7e5 fbd2 	bl	80006e8 <__aeabi_dmul>
 801af44:	a35c      	add	r3, pc, #368	; (adr r3, 801b0b8 <__ieee754_log+0x330>)
 801af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4a:	f7e5 fa17 	bl	800037c <__adddf3>
 801af4e:	4632      	mov	r2, r6
 801af50:	463b      	mov	r3, r7
 801af52:	f7e5 fbc9 	bl	80006e8 <__aeabi_dmul>
 801af56:	a35a      	add	r3, pc, #360	; (adr r3, 801b0c0 <__ieee754_log+0x338>)
 801af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5c:	f7e5 fa0e 	bl	800037c <__adddf3>
 801af60:	4642      	mov	r2, r8
 801af62:	464b      	mov	r3, r9
 801af64:	f7e5 fbc0 	bl	80006e8 <__aeabi_dmul>
 801af68:	a357      	add	r3, pc, #348	; (adr r3, 801b0c8 <__ieee754_log+0x340>)
 801af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6e:	4680      	mov	r8, r0
 801af70:	4689      	mov	r9, r1
 801af72:	4630      	mov	r0, r6
 801af74:	4639      	mov	r1, r7
 801af76:	f7e5 fbb7 	bl	80006e8 <__aeabi_dmul>
 801af7a:	a355      	add	r3, pc, #340	; (adr r3, 801b0d0 <__ieee754_log+0x348>)
 801af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af80:	f7e5 f9fc 	bl	800037c <__adddf3>
 801af84:	4632      	mov	r2, r6
 801af86:	463b      	mov	r3, r7
 801af88:	f7e5 fbae 	bl	80006e8 <__aeabi_dmul>
 801af8c:	a352      	add	r3, pc, #328	; (adr r3, 801b0d8 <__ieee754_log+0x350>)
 801af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af92:	f7e5 f9f3 	bl	800037c <__adddf3>
 801af96:	4632      	mov	r2, r6
 801af98:	463b      	mov	r3, r7
 801af9a:	f7e5 fba5 	bl	80006e8 <__aeabi_dmul>
 801af9e:	460b      	mov	r3, r1
 801afa0:	4602      	mov	r2, r0
 801afa2:	4649      	mov	r1, r9
 801afa4:	4640      	mov	r0, r8
 801afa6:	f7e5 f9e9 	bl	800037c <__adddf3>
 801afaa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801afae:	9b01      	ldr	r3, [sp, #4]
 801afb0:	3551      	adds	r5, #81	; 0x51
 801afb2:	431d      	orrs	r5, r3
 801afb4:	2d00      	cmp	r5, #0
 801afb6:	4680      	mov	r8, r0
 801afb8:	4689      	mov	r9, r1
 801afba:	dd48      	ble.n	801b04e <__ieee754_log+0x2c6>
 801afbc:	4b4e      	ldr	r3, [pc, #312]	; (801b0f8 <__ieee754_log+0x370>)
 801afbe:	2200      	movs	r2, #0
 801afc0:	4650      	mov	r0, sl
 801afc2:	4659      	mov	r1, fp
 801afc4:	f7e5 fb90 	bl	80006e8 <__aeabi_dmul>
 801afc8:	4652      	mov	r2, sl
 801afca:	465b      	mov	r3, fp
 801afcc:	f7e5 fb8c 	bl	80006e8 <__aeabi_dmul>
 801afd0:	4602      	mov	r2, r0
 801afd2:	460b      	mov	r3, r1
 801afd4:	4606      	mov	r6, r0
 801afd6:	460f      	mov	r7, r1
 801afd8:	4640      	mov	r0, r8
 801afda:	4649      	mov	r1, r9
 801afdc:	f7e5 f9ce 	bl	800037c <__adddf3>
 801afe0:	ec53 2b18 	vmov	r2, r3, d8
 801afe4:	f7e5 fb80 	bl	80006e8 <__aeabi_dmul>
 801afe8:	4680      	mov	r8, r0
 801afea:	4689      	mov	r9, r1
 801afec:	b964      	cbnz	r4, 801b008 <__ieee754_log+0x280>
 801afee:	4602      	mov	r2, r0
 801aff0:	460b      	mov	r3, r1
 801aff2:	4630      	mov	r0, r6
 801aff4:	4639      	mov	r1, r7
 801aff6:	f7e5 f9bf 	bl	8000378 <__aeabi_dsub>
 801affa:	4602      	mov	r2, r0
 801affc:	460b      	mov	r3, r1
 801affe:	4650      	mov	r0, sl
 801b000:	4659      	mov	r1, fp
 801b002:	f7e5 f9b9 	bl	8000378 <__aeabi_dsub>
 801b006:	e6d6      	b.n	801adb6 <__ieee754_log+0x2e>
 801b008:	a321      	add	r3, pc, #132	; (adr r3, 801b090 <__ieee754_log+0x308>)
 801b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00e:	ec51 0b19 	vmov	r0, r1, d9
 801b012:	f7e5 fb69 	bl	80006e8 <__aeabi_dmul>
 801b016:	a320      	add	r3, pc, #128	; (adr r3, 801b098 <__ieee754_log+0x310>)
 801b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01c:	4604      	mov	r4, r0
 801b01e:	460d      	mov	r5, r1
 801b020:	ec51 0b19 	vmov	r0, r1, d9
 801b024:	f7e5 fb60 	bl	80006e8 <__aeabi_dmul>
 801b028:	4642      	mov	r2, r8
 801b02a:	464b      	mov	r3, r9
 801b02c:	f7e5 f9a6 	bl	800037c <__adddf3>
 801b030:	4602      	mov	r2, r0
 801b032:	460b      	mov	r3, r1
 801b034:	4630      	mov	r0, r6
 801b036:	4639      	mov	r1, r7
 801b038:	f7e5 f99e 	bl	8000378 <__aeabi_dsub>
 801b03c:	4652      	mov	r2, sl
 801b03e:	465b      	mov	r3, fp
 801b040:	f7e5 f99a 	bl	8000378 <__aeabi_dsub>
 801b044:	4602      	mov	r2, r0
 801b046:	460b      	mov	r3, r1
 801b048:	4620      	mov	r0, r4
 801b04a:	4629      	mov	r1, r5
 801b04c:	e7d9      	b.n	801b002 <__ieee754_log+0x27a>
 801b04e:	4602      	mov	r2, r0
 801b050:	460b      	mov	r3, r1
 801b052:	4650      	mov	r0, sl
 801b054:	4659      	mov	r1, fp
 801b056:	f7e5 f98f 	bl	8000378 <__aeabi_dsub>
 801b05a:	ec53 2b18 	vmov	r2, r3, d8
 801b05e:	f7e5 fb43 	bl	80006e8 <__aeabi_dmul>
 801b062:	4606      	mov	r6, r0
 801b064:	460f      	mov	r7, r1
 801b066:	2c00      	cmp	r4, #0
 801b068:	f43f af23 	beq.w	801aeb2 <__ieee754_log+0x12a>
 801b06c:	a308      	add	r3, pc, #32	; (adr r3, 801b090 <__ieee754_log+0x308>)
 801b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b072:	ec51 0b19 	vmov	r0, r1, d9
 801b076:	f7e5 fb37 	bl	80006e8 <__aeabi_dmul>
 801b07a:	a307      	add	r3, pc, #28	; (adr r3, 801b098 <__ieee754_log+0x310>)
 801b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b080:	4604      	mov	r4, r0
 801b082:	460d      	mov	r5, r1
 801b084:	ec51 0b19 	vmov	r0, r1, d9
 801b088:	e727      	b.n	801aeda <__ieee754_log+0x152>
 801b08a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801b0e0 <__ieee754_log+0x358>
 801b08e:	e694      	b.n	801adba <__ieee754_log+0x32>
 801b090:	fee00000 	.word	0xfee00000
 801b094:	3fe62e42 	.word	0x3fe62e42
 801b098:	35793c76 	.word	0x35793c76
 801b09c:	3dea39ef 	.word	0x3dea39ef
 801b0a0:	55555555 	.word	0x55555555
 801b0a4:	3fd55555 	.word	0x3fd55555
 801b0a8:	df3e5244 	.word	0xdf3e5244
 801b0ac:	3fc2f112 	.word	0x3fc2f112
 801b0b0:	96cb03de 	.word	0x96cb03de
 801b0b4:	3fc74664 	.word	0x3fc74664
 801b0b8:	94229359 	.word	0x94229359
 801b0bc:	3fd24924 	.word	0x3fd24924
 801b0c0:	55555593 	.word	0x55555593
 801b0c4:	3fe55555 	.word	0x3fe55555
 801b0c8:	d078c69f 	.word	0xd078c69f
 801b0cc:	3fc39a09 	.word	0x3fc39a09
 801b0d0:	1d8e78af 	.word	0x1d8e78af
 801b0d4:	3fcc71c5 	.word	0x3fcc71c5
 801b0d8:	9997fa04 	.word	0x9997fa04
 801b0dc:	3fd99999 	.word	0x3fd99999
	...
 801b0e8:	c3500000 	.word	0xc3500000
 801b0ec:	43500000 	.word	0x43500000
 801b0f0:	7fefffff 	.word	0x7fefffff
 801b0f4:	3ff00000 	.word	0x3ff00000
 801b0f8:	3fe00000 	.word	0x3fe00000

0801b0fc <_init>:
 801b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0fe:	bf00      	nop
 801b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b102:	bc08      	pop	{r3}
 801b104:	469e      	mov	lr, r3
 801b106:	4770      	bx	lr

0801b108 <_fini>:
 801b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10a:	bf00      	nop
 801b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b10e:	bc08      	pop	{r3}
 801b110:	469e      	mov	lr, r3
 801b112:	4770      	bx	lr
